Cord is strong, thick string.
'Cord' NNP strong JJ thick JJ string NN 
sem(1,[1001:[tok:'Cord',pos:'NNP',lemma:'Cord',namex:'O'],1002:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1003:[tok:strong,pos:'JJ',lemma:strong,namex:'O'],1004:[tok: (','),pos: (','),lemma: (','),namex:'O'],1005:[tok:thick,pos:'JJ',lemma:thick,namex:'O'],1006:[tok:string,pos:'NN',lemma:string,namex:'O'],1007:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B],[[1001]:named(B,cord,nam,nam)]),drs([[]:C,[]:D,[]:E],[[1004]:rel(E,D,rel,0),[1006]:pred(D,string,n,0),[1005]:pred(C,thick,a,0),[]:rel(C,D,experiencer,0),[]:rel(E,B,experiencer,0),[1003]:pred(E,strong,a,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% Cord is strong , thick string . 
k2 attribute c1:strong:0 0 [ ]
k2 attribute c4:thick:0 0 [ ]
k2 concept c5:string:0 0 [ ]
k2 named c0:cord:nam 0 [ ]
k2 referent k2:s1 0 [ ]
k2 referent k2:s2 0 [ ]
k2 referent k2:x1 0 [ ]
k2 referent k2:x2 0 [ ]
k2 relation c6:rel:0 0 [ ]
k2 role c2:experiencer:1 0 [ ]
k2 role c3:experiencer:-1 0 [ ]
c2:experiencer:1 ext k2:x1 0 [ ]
c3:experiencer:-1 ext k2:s2 0 [ ]
c0:cord:nam instance k2:x1 1 [ Cord ]
c2:experiencer:1 int k2:s1 1 [ ]
k2 surface k2:s1 2 [ is ]
k2:s1 main k2 1 [ ]
c1:strong:0 arg k2:s1 3 [ strong ]
c6:rel:0 ext k2:x2 1 [ , ]
c4:thick:0 arg k2:s2 1 [ thick ]
c3:experiencer:-1 int k2:x2 2 [ ]
c5:string:0 instance k2:x2 3 [ string ]
k2 punctuation k2:x2 4 [ . ]
c6:rel:0 int k2:s1 4 [ ]


!.
A smile is the expression that you have on your face when you are pleased or amused, or when you are being friendly.
smile NN expression NN you PRP have VBP your PRP$ face NN when WRB you PRP are VBP pleased JJ amused JJ when WRB you PRP are VBP being VBG friendly JJ 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:smile,pos:'NN',lemma:smile,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:the,pos:'DT',lemma:the,namex:'O'],1005:[tok:expression,pos:'NN',lemma:expression,namex:'O'],1006:[tok:that,pos:'IN',lemma:that,namex:'O'],1007:[tok:you,pos:'PRP',lemma:you,namex:'O'],1008:[tok:have,pos:'VBP',lemma:have,namex:'O'],1009:[tok:on,pos:'IN',lemma:on,namex:'O'],1010:[tok:your,pos:'PRP$',lemma:your,namex:'O'],1011:[tok:face,pos:'NN',lemma:face,namex:'O'],1012:[tok:when,pos:'WRB',lemma:when,namex:'O'],1013:[tok:you,pos:'PRP',lemma:you,namex:'O'],1014:[tok:are,pos:'VBP',lemma:be,namex:'O'],1015:[tok:pleased,pos:'JJ',lemma:pleased,namex:'O'],1016:[tok:or,pos:'CC',lemma:or,namex:'O'],1017:[tok:amused,pos:'JJ',lemma:amused,namex:'O'],1018:[tok: (','),pos: (','),lemma: (','),namex:'O'],1019:[tok:or,pos:'CC',lemma:or,namex:'O'],1020:[tok:when,pos:'WRB',lemma:when,namex:'O'],1021:[tok:you,pos:'PRP',lemma:you,namex:'O'],1022:[tok:are,pos:'VBP',lemma:be,namex:'O'],1023:[tok:being,pos:'VBG',lemma:be,namex:'O'],1024:[tok:friendly,pos:'JJ',lemma:friendly,namex:'O'],1025:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[]:C,[]:D,[]:E,[]:F,[]:G,[]:H,[]:I,[]:J,[1004]:K],[[1021]:pred(B,person,n,1),[1011]:pred(C,face,n,0),[]:rel(C,D,of,1),[1010]:pred(D,person,n,1),[1007]:pred(E,person,n,1),[1013]:pred(F,person,n,1),[1013]:pred(G,person,n,1),[1011]:pred(H,face,n,0),[]:rel(H,I,of,1),[1010]:pred(I,person,n,1),[1007]:pred(J,person,n,1),[1005]:pred(K,expression,n,0)]),drs([[]:L,[1001]:M],[[]:prop(L,drs([],[[1003]:eq(M,K),[1019]:or(drs([[]:N,[]:O,[1006]:P],[[]:prop(N,drs([],[[1016]:or(drs([[]:Q],[[]:rel(Q,G,experiencer,0),[1015]:pred(Q,pleased,a,0)]),drs([[]:R],[[]:rel(R,F,experiencer,0),[1017]:pred(R,amused,a,0)]))])),[1012]:rel(O,N,when,0),[1009]:rel(O,H,on,0),[]:rel(O,P,theme,0),[]:rel(O,J,agent,0),[1008]:pred(O,have,v,0),[]:eq(K,P)]),drs([[]:S,[]:T,[1006]:U],[[]:prop(S,drs([[]:V],[[]:rel(V,B,experiencer,0),[1024]:pred(V,friendly,a,0)])),[1020]:rel(T,S,when,0),[1009]:rel(T,C,on,0),[]:rel(T,U,theme,0),[]:rel(T,E,agent,0),[1008]:pred(T,have,v,0),[]:eq(K,U)]))])),[1002]:pred(M,smile,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A smile is the expression that you have on your face when you are pleased or amused , or when you are being friendly . 
k4 concept c0:smile:0 0 [ ]
k4 referent k4:p1 0 [ ]
k5 concept c10:face:0 0 [ ]
k5 concept c3:person:1 0 [ ]
k5 concept c8:person:1 0 [ ]
k5 event c5:have:0 0 [ ]
k5 referent k5:e1 0 [ ]
k5 referent k5:p2 0 [ ]
k5 referent k5:x3 0 [ ]
k5 referent k5:x5 0 [ ]
k5 referent k5:x6 0 [ ]
k5 relation c11:on:0 0 [ ]
k5 relation c12:when:0 0 [ ]
k5 relation c4:equality 0 [ ]
k5 relation c9:of:1 0 [ ]
k5 role c6:agent:1 0 [ ]
k5 role c7:theme:-1 0 [ ]
k6 attribute c15:pleased:0 0 [ ]
k6 concept c14:person:1 0 [ ]
k6 referent k6:s1 0 [ ]
k6 referent k6:x7 0 [ ]
k6 role c16:experiencer:1 0 [ ]
k7 attribute c18:amused:0 0 [ ]
k7 concept c17:person:1 0 [ ]
k7 referent k7:s2 0 [ ]
k7 referent k7:x8 0 [ ]
k7 role c19:experiencer:1 0 [ ]
k8 concept c20:person:1 0 [ ]
k8 concept c25:person:1 0 [ ]
k8 concept c27:face:0 0 [ ]
k8 event c22:have:0 0 [ ]
k8 referent k8:e2 0 [ ]
k8 referent k8:p3 0 [ ]
k8 referent k8:x11 0 [ ]
k8 referent k8:x12 0 [ ]
k8 referent k8:x9 0 [ ]
k8 relation c21:equality 0 [ ]
k8 relation c26:of:1 0 [ ]
k8 relation c28:on:0 0 [ ]
k8 relation c29:when:0 0 [ ]
k8 role c23:agent:1 0 [ ]
k8 role c24:theme:-1 0 [ ]
c13:or antecedent k6 0 [ ]
c13:or consequent k7 0 [ ]
c16:experiencer:1 ext k6:x7 0 [ ]
c19:experiencer:1 ext k7:x8 0 [ ]
c2:or antecedent k5 0 [ ]
c2:or consequent k8 0 [ ]
c21:equality ext k8:x10 0 [ ]
c23:agent:1 ext k8:x9 0 [ ]
c26:of:1 ext k8:x11 0 [ ]
c32:experiencer:1 ext k8:p3:x13 0 [ ]
c33:equality ext k4:p1:x2 0 [ ]
c4:equality ext k5:x4 0 [ ]
c6:agent:1 ext k5:x3 0 [ ]
c9:of:1 ext k5:x5 0 [ ]
k4:p1 binary c2:or 0 [ ]
k4:p1 concept c1:expression:0 0 [ ]
k5:p2 binary c13:or 0 [ ]
k8:p3 attribute c31:friendly:0 0 [ ]
k8:p3 concept c30:person:1 0 [ ]
k8:p3 referent k8:p3:s3 0 [ ]
k8:p3 referent k8:p3:x13 0 [ ]
k8:p3 role c32:experiencer:1 0 [ ]
c24:theme:-1 ext k8:e2 0 [ ]
c7:theme:-1 ext k5:e1 0 [ ]
k4 referent k4:x1 1 [ A ]
c0:smile:0 instance k4:x1 2 [ smile ]
k4:p1 relation c33:equality 1 [ is ]
k4:p1 referent k4:p1:x2 1 [ the ]
c33:equality int k4:x1 3 [ ]
c1:expression:0 instance k4:p1:x2 2 [ expression ]
k5 referent k5:x4 1 [ that ]
k8 referent k8:x10 1 [ ]
c21:equality int k4:p1:x2 3 [ ]
c4:equality int k4:p1:x2 4 [ ]
c20:person:1 instance k8:x9 1 [ ]
c23:agent:1 int k8:e2 1 [ ]
c3:person:1 instance k5:x3 1 [ you ]
c6:agent:1 int k5:e1 1 [ ]
c22:have:0 instance k8:e2 2 [ ]
c5:have:0 instance k5:e1 2 [ have ]
c24:theme:-1 int k8:x10 2 [ ]
c7:theme:-1 int k5:x4 2 [ ]
c11:on:0 ext k5:x6 1 [ on ]
c28:on:0 ext k8:x12 1 [ ]
c25:person:1 instance k8:x11 1 [ ]
c8:person:1 instance k5:x5 1 [ your ]
c26:of:1 int k8:x12 2 [ ]
c9:of:1 int k5:x6 2 [ ]
c10:face:0 instance k5:x6 3 [ face ]
c11:on:0 int k5:e1 3 [ ]
c27:face:0 instance k8:x12 3 [ ]
c28:on:0 int k8:e2 3 [ ]
c12:when:0 ext k5:p2 1 [ when ]
c14:person:1 instance k6:x7 1 [ you ]
c16:experiencer:1 int k6:s1 1 [ ]
c17:person:1 instance k7:x8 1 [ ]
c19:experiencer:1 int k7:s2 1 [ ]
k6 surface k6:s1 2 [ are ]
k6:s1 main k5:p2 2 [ ]
c15:pleased:0 arg k6:s1 3 [ pleased ]
k7 surface k7:s2 2 [ or ]
c18:amused:0 arg k7:s2 3 [ amused ]
k7:s2 main k5:p2 3 [ ]
k5 punctuation k5:p2 4 [ , ]
c12:when:0 int k5:e1 4 [ ]
k7 surface k7:s2 4 [ or ]
c29:when:0 ext k8:p3 1 [ when ]
c30:person:1 instance k8:p3:x13 1 [ you ]
c32:experiencer:1 int k8:p3:s3 1 [ ]
k8:p3 surface k8:p3:s3 2 [ are ]
k8:p3 surface k8:p3:s3 3 [ being ]
k8:p3:s3 main k8:p3 2 [ ]
c31:friendly:0 arg k8:p3:s3 4 [ friendly ]
k8 punctuation k8:p3 3 [ . ]
c29:when:0 int k8:e2 4 [ ]


!.
0.01
0.02252
A rooster is an adult male chicken.
rooster NN adult NN male NN chicken NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:rooster,pos:'NN',lemma:rooster,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:an,pos:'DT',lemma:an,namex:'O'],1005:[tok:adult,pos:'NN',lemma:adult,namex:'O'],1006:[tok:male,pos:'NN',lemma:male,namex:'O'],1007:[tok:chicken,pos:'NN',lemma:chicken,namex:'O'],1008:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[]:E,[1004]:F],[[1003]:eq(C,F),[1007]:pred(F,chicken,n,0),[]:rel(F,D,of,0),[1006]:pred(D,male,n,0),[]:rel(F,E,of,0),[1005]:pred(E,adult,n,0)])),[1002]:pred(C,rooster,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A rooster is an adult male chicken . 
k2 concept c0:rooster:0 0 [ ]
k2 referent k2:p1 0 [ ]
c2:of:0 ext k2:p1:x3 0 [ ]
c4:of:0 ext k2:p1:x4 0 [ ]
c6:equality ext k2:p1:x2 0 [ ]
k2:p1 concept c1:adult:0 0 [ ]
k2:p1 concept c3:male:0 0 [ ]
k2:p1 concept c5:chicken:0 0 [ ]
k2:p1 referent k2:p1:x3 0 [ ]
k2:p1 referent k2:p1:x4 0 [ ]
k2:p1 relation c2:of:0 0 [ ]
k2:p1 relation c4:of:0 0 [ ]
k2 referent k2:x1 1 [ A ]
c0:rooster:0 instance k2:x1 2 [ rooster ]
k2:p1 relation c6:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ an ]
c1:adult:0 instance k2:p1:x3 1 [ adult ]
c2:of:0 int k2:p1:x2 2 [ ]
c3:male:0 instance k2:p1:x4 1 [ male ]
c4:of:0 int k2:p1:x2 3 [ ]
c5:chicken:0 instance k2:p1:x2 4 [ chicken ]
c6:equality int k2:x1 3 [ ]
k2:p1 punctuation k2:p1:x2 5 [ . ]


!.
A voyage is a long journey on a ship or in a spacecraft.
voyage NN long JJ journey NN ship NN spacecraft NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:voyage,pos:'NN',lemma:voyage,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:long,pos:'JJ',lemma:long,namex:'O'],1006:[tok:journey,pos:'NN',lemma:journey,namex:'O'],1007:[tok:on,pos:'IN',lemma:on,namex:'O'],1008:[tok:a,pos:'DT',lemma:a,namex:'O'],1009:[tok:ship,pos:'NN',lemma:ship,namex:'O'],1010:[tok:or,pos:'CC',lemma:or,namex:'O'],1011:[tok:in,pos:'IN',lemma:in,namex:'O'],1012:[tok:a,pos:'DT',lemma:a,namex:'O'],1013:[tok:spacecraft,pos:'NN',lemma:spacecraft,namex:'O'],1014:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([],[[1010]:or(drs([[1008]:B,[]:C,[1001]:D],[[1007]:rel(C,B,on,0),[1009]:pred(B,ship,n,0),[]:prop(C,drs([[]:E,[1004]:F],[[1003]:eq(D,F),[1006]:pred(F,journey,n,0),[1005]:pred(E,long,a,0),[]:rel(E,F,experiencer,0)])),[1002]:pred(D,voyage,n,0)]),drs([[1012]:G,[]:H,[1001]:I],[[1011]:rel(H,G,in,0),[1013]:pred(G,spacecraft,n,0),[]:prop(H,drs([[]:J,[1004]:K],[[1003]:eq(I,K),[1006]:pred(K,journey,n,0),[1005]:pred(J,long,a,0),[]:rel(J,K,experiencer,0)])),[1002]:pred(I,voyage,n,0)]))])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A voyage is a long journey on a ship or in a spacecraft . 
k2 binary c0:or 0 [ ]
k3 concept c1:voyage:0 0 [ ]
k3 concept c6:ship:0 0 [ ]
k3 referent k3:p1 0 [ ]
k3 relation c7:on:0 0 [ ]
k4 concept c13:spacecraft:0 0 [ ]
k4 concept c8:voyage:0 0 [ ]
k4 referent k4:p2 0 [ ]
k4 relation c14:in:0 0 [ ]
c0:or antecedent k3 0 [ ]
c0:or consequent k4 0 [ ]
c12:equality ext k4:p2:x6 0 [ ]
c2:experiencer:-1 ext k3:p1:s1 0 [ ]
c5:equality ext k3:p1:x3 0 [ ]
c9:experiencer:-1 ext k4:p2:s2 0 [ ]
k3:p1 attribute c3:long:0 0 [ ]
k3:p1 concept c4:journey:0 0 [ ]
k3:p1 referent k3:p1:s1 0 [ ]
k3:p1 role c2:experiencer:-1 0 [ ]
k4:p2 attribute c10:long:0 0 [ ]
k4:p2 concept c11:journey:0 0 [ ]
k4:p2 referent k4:p2:s2 0 [ ]
k4:p2 role c9:experiencer:-1 0 [ ]
k3 referent k3:x1 1 [ A ]
k4 referent k4:x4 1 [ ]
c1:voyage:0 instance k3:x1 2 [ voyage ]
c8:voyage:0 instance k4:x4 2 [ ]
k3:p1 relation c5:equality 1 [ is ]
k4:p2 relation c12:equality 1 [ ]
k3:p1 referent k3:p1:x3 1 [ a ]
k4:p2 referent k4:p2:x6 1 [ ]
c12:equality int k4:x4 3 [ ]
c5:equality int k3:x1 3 [ ]
c10:long:0 arg k4:p2:s2 1 [ ]
c3:long:0 arg k3:p1:s1 1 [ long ]
c2:experiencer:-1 int k3:p1:x3 2 [ ]
c11:journey:0 instance k4:p2:x6 2 [ ]
c4:journey:0 instance k3:p1:x3 3 [ journey ]
c7:on:0 ext k3:x2 1 [ on ]
c7:on:0 int k3:p1 1 [ ]
k3 referent k3:x2 2 [ a ]
c6:ship:0 instance k3:x2 3 [ ship ]
k4:p2 surface k4:p2:s2 2 [ or ]
c9:experiencer:-1 int k4:p2:x6 3 [ ]
c14:in:0 ext k4:x5 1 [ in ]
k4 referent k4:x5 2 [ a ]
c13:spacecraft:0 instance k4:x5 3 [ spacecraft ]
c14:in:0 int k4:p2 1 [ ]
k4 punctuation k4:x5 4 [ . ]


!.
0.005
0.2593
Noon is 12 o’clock in the middle of the day.
'Noon' NNP o NN '’clock' NN middle NN day NN 
sem(1,[1001:[tok:'Noon',pos:'NNP',lemma:'Noon',namex:'O'],1002:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1003:[tok:'12',pos:'CD',lemma:'12',namex:'I-PCT'],1004:[tok:o,pos:'NN',lemma:o,namex:'I-PCT'],1005:[tok:'’clock',pos:'NN',lemma:'’clock',namex:'I-PCT'],1006:[tok:in,pos:'IN',lemma:in,namex:'O'],1007:[tok:the,pos:'DT',lemma:the,namex:'I-DAT'],1008:[tok:middle,pos:'NN',lemma:middle,namex:'I-DAT'],1009:[tok:of,pos:'IN',lemma:of,namex:'I-DAT'],1010:[tok:the,pos:'DT',lemma:the,namex:'I-DAT'],1011:[tok:day,pos:'NN',lemma:day,namex:'I-DAT'],1012:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[1010]:B,[1007]:C,[]:D],[[1011]:pred(B,day,n,0),[1008]:pred(C,middle,n,0),[1001]:named(D,noon,nam,nam)]),drs([[]:E],[[1006]:rel(E,C,in,0),[1009]:rel(C,B,of,0),[]:prop(E,drs([[]:F,[]:G],[[1002]:eq(D,G),[1005]:pred(G,'’clock',n,0),[]:rel(G,F,of,0),[1004]:pred(F,o,n,0),[1003]:card(G,12,eq)]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% Noon is 12 o ’clock in the middle of the day . 
k2 concept c6:middle:0 0 [ ]
k2 concept c7:day:0 0 [ ]
k2 named c0:noon:nam 0 [ ]
k2 referent k2:p1 0 [ ]
k2 referent k2:x1 0 [ ]
k2 relation c8:of:0 0 [ ]
k2 relation c9:in:0 0 [ ]
c3:of:0 ext k2:p1:x5 0 [ ]
c5:equality ext k2:p1:x4 0 [ ]
k2:p1 cardinality c1:12:eq 0 [ ]
k2:p1 concept c2:o:0 0 [ ]
k2:p1 concept c4:’clock:0 0 [ ]
k2:p1 referent k2:p1:x4 0 [ ]
k2:p1 referent k2:p1:x5 0 [ ]
k2:p1 relation c3:of:0 0 [ ]
c0:noon:nam instance k2:x1 1 [ Noon ]
k2:p1 relation c5:equality 1 [ is ]
c1:12:eq arg k2:p1:x4 1 [ 12 ]
c5:equality int k2:x1 2 [ ]
c2:o:0 instance k2:p1:x5 1 [ o ]
c3:of:0 int k2:p1:x4 2 [ ]
c4:’clock:0 instance k2:p1:x4 3 [ ’clock ]
c9:in:0 ext k2:x2 1 [ in ]
c9:in:0 int k2:p1 1 [ ]
k2 referent k2:x2 2 [ the ]
c6:middle:0 instance k2:x2 3 [ middle ]
c8:of:0 ext k2:x3 1 [ of ]
k2 referent k2:x3 2 [ the ]
c7:day:0 instance k2:x3 3 [ day ]
k2 punctuation k2:x3 4 [ . ]
c8:of:0 int k2:x2 4 [ ]


!.
String is thin rope made of twisted threads, used for tying things together or tying up parcels.
'String' VBG thin JJ rope NN made VBN twisted JJ threads NNS used VBN tying VBG things NNS together RB tying VBG up RP parcels NNS 
sem(1,[1001:[tok:'String',pos:'VBG',lemma:string,namex:'O'],1002:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1003:[tok:thin,pos:'JJ',lemma:thin,namex:'O'],1004:[tok:rope,pos:'NN',lemma:rope,namex:'O'],1005:[tok:made,pos:'VBN',lemma:make,namex:'O'],1006:[tok:of,pos:'IN',lemma:of,namex:'O'],1007:[tok:twisted,pos:'JJ',lemma:twisted,namex:'O'],1008:[tok:threads,pos:'NNS',lemma:thread,namex:'O'],1009:[tok: (','),pos: (','),lemma: (','),namex:'O'],1010:[tok:used,pos:'VBN',lemma:use,namex:'O'],1011:[tok:for,pos:'IN',lemma:for,namex:'O'],1012:[tok:tying,pos:'VBG',lemma:tie,namex:'O'],1013:[tok:things,pos:'NNS',lemma:thing,namex:'O'],1014:[tok:together,pos:'RB',lemma:together,namex:'O'],1015:[tok:or,pos:'CC',lemma:or,namex:'O'],1016:[tok:tying,pos:'VBG',lemma:tie,namex:'O'],1017:[tok:up,pos:'RP',lemma:up,namex:'O'],1018:[tok:parcels,pos:'NNS',lemma:parcel,namex:'O'],1019:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[]:C],[[]:prop(B,drs([[]:D,[]:E,[]:F,[]:G,[]:H,[]:I,[]:J,[]:K],[[1002]:eq(C,K),[1006]:rel(H,G,of,0),[1015]:or(drs([[]:L,[]:M,[]:N],[[1011]:rel(D,L,for,0),[1014]:pred(L,together,r,0),[]:rel(L,M,theme,0),[]:rel(L,N,agent,0),[1012]:pred(L,tie,v,0),[1013]:pred(M,thing,n,0)]),drs([[]:O,[]:P,[]:Q],[[1011]:rel(D,O,for,0),[1017]:pred(O,up,r,0),[]:rel(O,P,theme,0),[]:rel(O,Q,agent,0),[1016]:pred(O,tie,v,0),[1018]:pred(P,parcel,n,0)])),[]:rel(D,E,theme,0),[1010]:pred(D,use,v,0),[]:eq(G,E),[1008]:pred(G,thread,n,0),[1007]:pred(F,twisted,a,0),[]:rel(F,G,experiencer,0),[]:rel(H,I,theme,0),[1005]:pred(H,make,v,0),[]:eq(K,I),[1004]:pred(K,rope,n,0),[1003]:pred(J,thin,a,0),[]:rel(J,K,experiencer,0)])),[1001]:pred(C,string,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% String is thin rope made of twisted threads , used for tying things together or tying up parcels . 
k6 concept c0:string:0 0 [ ]
k6 referent k6:p1 0 [ ]
k6 referent k6:x1 0 [ ]
k7 attribute c18:together:0 0 [ ]
k7 concept c14:thing:0 0 [ ]
k7 event c15:tie:0 0 [ ]
k7 referent k7:e3 0 [ ]
k7 referent k7:x6 0 [ ]
k7 referent k7:x7 0 [ ]
k7 relation c19:for:0 0 [ ]
k7 role c16:agent:1 0 [ ]
k7 role c17:theme:1 0 [ ]
k8 attribute c24:up:0 0 [ ]
k8 concept c20:parcel:0 0 [ ]
k8 event c21:tie:0 0 [ ]
k8 referent k8:e4 0 [ ]
k8 referent k8:x8 0 [ ]
k8 referent k8:x9 0 [ ]
k8 relation c25:for:0 0 [ ]
k8 role c22:agent:1 0 [ ]
k8 role c23:theme:1 0 [ ]
c1:experiencer:-1 ext k6:p1:s1 0 [ ]
c10:equality ext k6:p1:x5 0 [ ]
c13:or antecedent k7 0 [ ]
c13:or consequent k8 0 [ ]
c16:agent:1 ext k7:x6 0 [ ]
c16:agent:1 int k7:e3 0 [ ]
c17:theme:1 ext k7:x7 0 [ ]
c22:agent:1 ext k8:x8 0 [ ]
c22:agent:1 int k8:e4 0 [ ]
c23:theme:1 ext k8:x9 0 [ ]
c27:equality ext k6:p1:x2 0 [ ]
c4:equality ext k6:p1:x3 0 [ ]
c7:experiencer:-1 ext k6:p1:s2 0 [ ]
k6:p1 attribute c2:thin:0 0 [ ]
k6:p1 attribute c8:twisted:0 0 [ ]
k6:p1 binary c13:or 0 [ ]
k6:p1 concept c3:rope:0 0 [ ]
k6:p1 concept c9:thread:0 0 [ ]
k6:p1 event c11:use:0 0 [ ]
k6:p1 event c5:make:0 0 [ ]
k6:p1 referent k6:p1:e1 0 [ ]
k6:p1 referent k6:p1:e2 0 [ ]
k6:p1 referent k6:p1:s1 0 [ ]
k6:p1 referent k6:p1:s2 0 [ ]
k6:p1 referent k6:p1:x2 0 [ ]
k6:p1 referent k6:p1:x3 0 [ ]
k6:p1 referent k6:p1:x4 0 [ ]
k6:p1 referent k6:p1:x5 0 [ ]
k6:p1 relation c10:equality 0 [ ]
k6:p1 relation c26:of:0 0 [ ]
k6:p1 relation c4:equality 0 [ ]
k6:p1 role c1:experiencer:-1 0 [ ]
k6:p1 role c7:experiencer:-1 0 [ ]
k6:p1 role c12:theme:-1 0 [ ]
k6:p1 role c6:theme:-1 0 [ ]
c12:theme:-1 ext k6:p1:e2 0 [ ]
c6:theme:-1 ext k6:p1:e1 0 [ ]
c0:string:0 instance k6:x1 1 [ String ]
k6:p1 relation c27:equality 1 [ is ]
c1:experiencer:-1 int k6:p1:x2 1 [ ]
c2:thin:0 arg k6:p1:s1 1 [ thin ]
c27:equality int k6:x1 2 [ ]
c3:rope:0 instance k6:p1:x2 2 [ rope ]
c5:make:0 instance k6:p1:e1 1 [ made ]
c6:theme:-1 int k6:p1:x3 1 [ ]
c4:equality int k6:p1:x2 3 [ ]
c26:of:0 ext k6:p1:x4 1 [ of ]
c8:twisted:0 arg k6:p1:s2 1 [ twisted ]
c7:experiencer:-1 int k6:p1:x4 2 [ ]
c9:thread:0 instance k6:p1:x4 3 [ threads ]
c26:of:0 int k6:p1:e1 2 [ ]
k6:p1 punctuation k6:p1:x4 4 [ , ]
c11:use:0 instance k6:p1:e2 1 [ used ]
c12:theme:-1 int k6:p1:x5 1 [ ]
c10:equality int k6:p1:x4 5 [ ]
c19:for:0 ext k7:e3 1 [ for ]
c25:for:0 ext k8:e4 1 [ ]
k7:e3 main k6:p1 1 [ ]
c15:tie:0 instance k7:e3 2 [ tying ]
c19:for:0 int k6:p1:e2 2 [ ]
c14:thing:0 instance k7:x7 1 [ things ]
c17:theme:1 int k7:e3 3 [ ]
c18:together:0 arg k7:e3 4 [ together ]
k8 surface k8:e4 2 [ or ]
c25:for:0 int k6:p1:e2 3 [ ]
k8:e4 main k6:p1 2 [ ]
c21:tie:0 instance k8:e4 3 [ tying ]
c24:up:0 arg k8:e4 4 [ up ]
c20:parcel:0 instance k8:x9 1 [ parcels ]
k8 punctuation k8:x9 2 [ . ]
c23:theme:1 int k8:e4 5 [ ]


!.
0.0125
0.03455
Fruit or a fruit is something which grows on a tree or bush and which contains seeds or a stone covered by a substance that you can eat.
'Fruit' NNP fruit NN which WDT tree NN bush NN which WDT seeds NNS stone NN covered VBN substance NN you PRP eat VB 
sem(1,[1001:[tok:'Fruit',pos:'NNP',lemma:'Fruit',namex:'O'],1002:[tok:or,pos:'CC',lemma:or,namex:'O'],1003:[tok:a,pos:'DT',lemma:a,namex:'O'],1004:[tok:fruit,pos:'NN',lemma:fruit,namex:'O'],1005:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1006:[tok:something,pos:'DT',lemma:something,namex:'O'],1007:[tok:which,pos:'WDT',lemma:which,namex:'O'],1008:[tok:grows,pos:'VBZ',lemma:grow,namex:'O'],1009:[tok:on,pos:'IN',lemma:on,namex:'O'],1010:[tok:a,pos:'DT',lemma:a,namex:'O'],1011:[tok:tree,pos:'NN',lemma:tree,namex:'O'],1012:[tok:or,pos:'CC',lemma:or,namex:'O'],1013:[tok:bush,pos:'NN',lemma:bush,namex:'O'],1014:[tok:and,pos:'CC',lemma:and,namex:'O'],1015:[tok:which,pos:'WDT',lemma:which,namex:'O'],1016:[tok:contains,pos:'VBZ',lemma:contain,namex:'O'],1017:[tok:seeds,pos:'NNS',lemma:seed,namex:'O'],1018:[tok:or,pos:'CC',lemma:or,namex:'O'],1019:[tok:a,pos:'DT',lemma:a,namex:'O'],1020:[tok:stone,pos:'NN',lemma:stone,namex:'O'],1021:[tok:covered,pos:'VBN',lemma:cover,namex:'O'],1022:[tok:by,pos:'IN',lemma:by,namex:'O'],1023:[tok:a,pos:'DT',lemma:a,namex:'O'],1024:[tok:substance,pos:'NN',lemma:substance,namex:'O'],1025:[tok:that,pos:'IN',lemma:that,namex:'O'],1026:[tok:you,pos:'PRP',lemma:you,namex:'O'],1027:[tok:can,pos:'MD',lemma:can,namex:'O'],1028:[tok:eat,pos:'VB',lemma:eat,namex:'O'],1029:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[]:C,[]:D],[[1026]:pred(B,person,n,1),[1026]:pred(C,person,n,1),[1001]:named(D,fruit,nam,nam)]),drs([],[[1002]:or(drs([[]:E],[[]:prop(E,drs([[1015]:F,[]:G,[1010]:H,[]:I,[1007]:J,[]:K],[[1005]:eq(D,G),[1018]:or(drs([[]:L,[]:M],[[]:rel(L,M,theme,0),[]:rel(L,F,agent,0),[1016]:pred(L,contain,v,0),[1017]:pred(M,seed,n,0)]),drs([[]:N,[]:O,[]:P,[1023]:Q,[]:R,[]:S,[1019]:T],[[]:rel(N,T,theme,0),[]:rel(N,F,agent,0),[1016]:pred(N,contain,v,0),[1022]:rel(R,Q,agent,0),[]:prop(O,drs([[]:U,[1025]:V],[[]:rel(U,V,theme,0),[]:rel(U,C,agent,0),[1028]:pred(U,eat,v,0),[]:eq(Q,V)])),[]:rel(P,O,topic,0),[]:rel(P,C,agent,0),[1027]:pred(P,can,v,0),[1024]:pred(Q,substance,n,0),[]:rel(R,S,theme,0),[1021]:pred(R,cover,v,0),[]:eq(T,S),[1020]:pred(T,stone,n,0)])),[]:eq(G,F),[1006]:pred(G,thing,n,12),[1005]:eq(D,K),[1009]:rel(I,H,on,0),[1012]:or(drs([],[[1011]:pred(H,tree,n,0)]),drs([],[[1013]:pred(H,bush,n,0)])),[]:rel(I,J,agent,0),[1008]:pred(I,grow,v,0),[]:eq(K,J),[1006]:pred(K,thing,n,12)]))]),drs([[]:W,[1003]:X],[[]:prop(W,drs([[1015]:Y,[]:Z,[1010]:A1,[]:B1,[1007]:C1,[]:D1],[[1005]:eq(X,Z),[1018]:or(drs([[]:E1,[]:F1],[[]:rel(E1,F1,theme,0),[]:rel(E1,Y,agent,0),[1016]:pred(E1,contain,v,0),[1017]:pred(F1,seed,n,0)]),drs([[]:G1,[]:H1,[]:I1,[1023]:J1,[]:K1,[]:L1,[1019]:M1],[[]:rel(G1,M1,theme,0),[]:rel(G1,Y,agent,0),[1016]:pred(G1,contain,v,0),[1022]:rel(K1,J1,agent,0),[]:prop(H1,drs([[]:N1,[1025]:O1],[[]:rel(N1,O1,theme,0),[]:rel(N1,B,agent,0),[1028]:pred(N1,eat,v,0),[]:eq(J1,O1)])),[]:rel(I1,H1,topic,0),[]:rel(I1,B,agent,0),[1027]:pred(I1,can,v,0),[1024]:pred(J1,substance,n,0),[]:rel(K1,L1,theme,0),[1021]:pred(K1,cover,v,0),[]:eq(M1,L1),[1020]:pred(M1,stone,n,0)])),[]:eq(Z,Y),[1006]:pred(Z,thing,n,12),[1005]:eq(X,D1),[1009]:rel(B1,A1,on,0),[1012]:or(drs([],[[1011]:pred(A1,tree,n,0)]),drs([],[[1013]:pred(A1,bush,n,0)])),[]:rel(B1,C1,agent,0),[1008]:pred(B1,grow,v,0),[]:eq(D1,C1),[1006]:pred(D1,thing,n,12)])),[1004]:pred(X,fruit,n,0)]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% Fruit or a fruit is something which grows on a tree or bush and which contains seeds or a stone covered by a substance that you can eat . 
k14 binary c0:or 0 [ ]
k15 named c1:fruit:nam 0 [ ]
k15 referent k15:p1 0 [ ]
k15 referent k15:x1 0 [ ]
k16 concept c7:tree:0 0 [ ]
k17 concept c8:bush:0 0 [ ]
k18 concept c14:seed:0 0 [ ]
k18 event c15:contain:0 0 [ ]
k18 referent k18:e2 0 [ ]
k18 referent k18:x7 0 [ ]
k18 role c17:theme:1 0 [ ]
k18 role c16:agent:-1 0 [ ]
k19 concept c18:stone:0 0 [ ]
k19 concept c22:substance:0 0 [ ]
k19 concept c23:person:1 0 [ ]
k19 event c20:cover:0 0 [ ]
k19 event c24:can:0 0 [ ]
k19 event c32:contain:0 0 [ ]
k19 referent k19:e3 0 [ ]
k19 referent k19:e4 0 [ ]
k19 referent k19:e5 0 [ ]
k19 referent k19:p2 0 [ ]
k19 referent k19:x11 0 [ ]
k19 referent k19:x9 0 [ ]
k19 relation c19:equality 0 [ ]
k19 role c25:agent:1 0 [ ]
k19 role c26:topic:1 0 [ ]
k19 role c31:agent:1 0 [ ]
k19 role c34:theme:1 0 [ ]
k19 role c21:theme:-1 0 [ ]
k19 role c33:agent:-1 0 [ ]
k20 concept c36:fruit:0 0 [ ]
k20 referent k20:p3 0 [ ]
k21 concept c42:tree:0 0 [ ]
k22 concept c43:bush:0 0 [ ]
k23 concept c49:seed:0 0 [ ]
k23 event c50:contain:0 0 [ ]
k23 referent k23:e8 0 [ ]
k23 referent k23:x19 0 [ ]
k23 role c52:theme:1 0 [ ]
k23 role c51:agent:-1 0 [ ]
k24 concept c53:stone:0 0 [ ]
k24 concept c57:substance:0 0 [ ]
k24 concept c58:person:1 0 [ ]
k24 event c55:cover:0 0 [ ]
k24 event c59:can:0 0 [ ]
k24 event c67:contain:0 0 [ ]
k24 referent k24:e10 0 [ ]
k24 referent k24:e11 0 [ ]
k24 referent k24:e9 0 [ ]
k24 referent k24:p4 0 [ ]
k24 referent k24:x21 0 [ ]
k24 referent k24:x23 0 [ ]
k24 relation c54:equality 0 [ ]
k24 role c60:agent:1 0 [ ]
k24 role c61:topic:1 0 [ ]
k24 role c66:agent:1 0 [ ]
k24 role c69:theme:1 0 [ ]
k24 role c56:theme:-1 0 [ ]
k24 role c68:agent:-1 0 [ ]
c0:or antecedent k15 0 [ ]
c0:or consequent k20 0 [ ]
c10:equality ext k15:p1:x2 0 [ ]
c12:equality ext k15:p1:x6 0 [ ]
c13:or antecedent k18 0 [ ]
c13:or consequent k19 0 [ ]
c17:theme:1 ext k18:x7 0 [ ]
c19:equality ext k19:x9 0 [ ]
c25:agent:1 ext k19:x11 0 [ ]
c26:topic:1 ext k19:p2 0 [ ]
c27:equality ext k19:p2:x12 0 [ ]
c29:agent:1 ext k19:x11 0 [ ]
c3:equality ext k15:p1:x3 0 [ ]
c34:theme:1 ext k19:x8 0 [ ]
c35:equality ext k15:p1:x5 0 [ ]
c38:equality ext k20:p3:x15 0 [ ]
c41:or antecedent k21 0 [ ]
c41:or consequent k22 0 [ ]
c45:equality ext k20:p3:x14 0 [ ]
c47:equality ext k20:p3:x18 0 [ ]
c48:or antecedent k23 0 [ ]
c48:or consequent k24 0 [ ]
c52:theme:1 ext k23:x19 0 [ ]
c54:equality ext k24:x21 0 [ ]
c6:or antecedent k16 0 [ ]
c6:or consequent k17 0 [ ]
c60:agent:1 ext k24:x23 0 [ ]
c61:topic:1 ext k24:p4 0 [ ]
c62:equality ext k24:p4:x24 0 [ ]
c64:agent:1 ext k24:x23 0 [ ]
c69:theme:1 ext k24:x20 0 [ ]
c70:equality ext k20:p3:x17 0 [ ]
k15:p1 binary c13:or 0 [ ]
k15:p1 binary c6:or 0 [ ]
k15:p1 concept c11:thing:12 0 [ ]
k15:p1 concept c2:thing:12 0 [ ]
k15:p1 event c4:grow:0 0 [ ]
k15:p1 referent k15:p1:e1 0 [ ]
k15:p1 referent k15:p1:x2 0 [ ]
k15:p1 referent k15:p1:x5 0 [ ]
k15:p1 relation c12:equality 0 [ ]
k15:p1 relation c3:equality 0 [ ]
k15:p1 relation c9:on:0 0 [ ]
k15:p1 role c5:agent:-1 0 [ ]
k19:p2 event c28:eat:0 0 [ ]
k19:p2 referent k19:p2:e6 0 [ ]
k19:p2 relation c27:equality 0 [ ]
k19:p2 role c29:agent:1 0 [ ]
k19:p2 role c30:theme:-1 0 [ ]
k20:p3 binary c41:or 0 [ ]
k20:p3 binary c48:or 0 [ ]
k20:p3 concept c37:thing:12 0 [ ]
k20:p3 concept c46:thing:12 0 [ ]
k20:p3 event c39:grow:0 0 [ ]
k20:p3 referent k20:p3:e7 0 [ ]
k20:p3 referent k20:p3:x14 0 [ ]
k20:p3 referent k20:p3:x17 0 [ ]
k20:p3 relation c38:equality 0 [ ]
k20:p3 relation c44:on:0 0 [ ]
k20:p3 relation c47:equality 0 [ ]
k20:p3 role c40:agent:-1 0 [ ]
k24:p4 event c63:eat:0 0 [ ]
k24:p4 referent k24:p4:e12 0 [ ]
k24:p4 relation c62:equality 0 [ ]
k24:p4 role c64:agent:1 0 [ ]
k24:p4 role c65:theme:-1 0 [ ]
c16:agent:-1 ext k18:e2 0 [ ]
c21:theme:-1 ext k19:e3 0 [ ]
c30:theme:-1 ext k19:p2:e6 0 [ ]
c33:agent:-1 ext k19:e5 0 [ ]
c40:agent:-1 ext k20:p3:e7 0 [ ]
c5:agent:-1 ext k15:p1:e1 0 [ ]
c51:agent:-1 ext k23:e8 0 [ ]
c56:theme:-1 ext k24:e9 0 [ ]
c65:theme:-1 ext k24:p4:e12 0 [ ]
c68:agent:-1 ext k24:e11 0 [ ]
c1:fruit:nam instance k15:x1 1 [ Fruit ]
k20:p3 surface k20:p3:e7 1 [ or ]
c40:agent:-1 int k20:p3:x15 1 [ ]
k20 referent k20:x13 1 [ a ]
c36:fruit:0 instance k20:x13 2 [ fruit ]
k15:p1 relation c10:equality 1 [ is ]
k15:p1 relation c35:equality 1 [ ]
k20:p3 relation c45:equality 1 [ ]
k20:p3 relation c70:equality 1 [ ]
c11:thing:12 instance k15:p1:x5 1 [ ]
c2:thing:12 instance k15:p1:x2 1 [ something ]
c37:thing:12 instance k20:p3:x14 1 [ ]
c46:thing:12 instance k20:p3:x17 1 [ ]
c10:equality int k15:x1 2 [ ]
c35:equality int k15:x1 3 [ ]
c45:equality int k20:x13 3 [ ]
c70:equality int k20:x13 4 [ ]
k15:p1 referent k15:p1:x3 1 [ which ]
c3:equality int k15:p1:x2 2 [ ]
c38:equality int k20:p3:x14 2 [ ]
k20:p3 referent k20:p3:x15 2 [ ]
c4:grow:0 instance k15:p1:e1 1 [ grows ]
c39:grow:0 instance k20:p3:e7 2 [ ]
c5:agent:-1 int k15:p1:x3 2 [ ]
c44:on:0 ext k20:p3:x16 1 [ ]
c9:on:0 ext k15:p1:x4 1 [ on ]
c9:on:0 int k15:p1:e1 2 [ ]
k15:p1 referent k15:p1:x4 2 [ a ]
k20:p3 referent k20:p3:x16 2 [ ]
c44:on:0 int k20:p3:e7 3 [ ]
c42:tree:0 instance k20:p3:x16 3 [ ]
c7:tree:0 instance k15:p1:x4 3 [ tree ]
k15:p1 function k15:p1:x4 4 [ or ]
k20:p3 function k20:p3:x16 4 [ ]
c43:bush:0 instance k20:p3:x16 5 [ ]
c8:bush:0 instance k15:p1:x4 5 [ bush ]
k24 surface k24:e11 1 [ and ]
c68:agent:-1 int k20:p3:x18 1 [ ]
k15:p1 referent k15:p1:x6 1 [ which ]
c12:equality int k15:p1:x5 2 [ ]
c47:equality int k20:p3:x17 2 [ ]
k20:p3 referent k20:p3:x18 2 [ ]
c15:contain:0 instance k18:e2 1 [ contains ]
c32:contain:0 instance k19:e5 1 [ ]
c50:contain:0 instance k23:e8 1 [ ]
c67:contain:0 instance k24:e11 2 [ ]
c16:agent:-1 int k15:p1:x6 2 [ ]
c33:agent:-1 int k15:p1:x6 3 [ ]
c51:agent:-1 int k20:p3:x18 3 [ ]
c14:seed:0 instance k18:x7 1 [ seeds ]
c49:seed:0 instance k23:x19 1 [ ]
c17:theme:1 int k18:e2 2 [ ]
c52:theme:1 int k23:e8 2 [ ]
k24 surface k24:e11 3 [ or ]
k19 referent k19:x8 1 [ a ]
k24 referent k24:x20 1 [ ]
c34:theme:1 int k19:e5 2 [ ]
c69:theme:1 int k24:e11 4 [ ]
c18:stone:0 instance k19:x8 2 [ stone ]
c53:stone:0 instance k24:x20 2 [ ]
c20:cover:0 instance k19:e3 1 [ covered ]
c55:cover:0 instance k24:e9 1 [ ]
c21:theme:-1 int k19:x9 1 [ ]
c56:theme:-1 int k24:x21 1 [ ]
c19:equality int k19:x8 3 [ ]
c54:equality int k24:x20 3 [ ]
c31:agent:1 ext k19:x10 1 [ by ]
c66:agent:1 ext k24:x22 1 [ ]
k19 referent k19:x10 2 [ a ]
k24 referent k24:x22 2 [ ]
c31:agent:1 int k19:e3 2 [ ]
c66:agent:1 int k24:e9 2 [ ]
c22:substance:0 instance k19:x10 3 [ substance ]
c57:substance:0 instance k24:x22 3 [ ]
c26:topic:1 int k19:e4 1 [ ]
c61:topic:1 int k24:e10 1 [ ]
k19:p2 referent k19:p2:x12 1 [ that ]
k24:p4 referent k24:p4:x24 1 [ ]
c27:equality int k19:x10 4 [ ]
c62:equality int k24:x22 4 [ ]
c23:person:1 instance k19:x11 1 [ you ]
c29:agent:1 int k19:p2:e6 1 [ ]
c58:person:1 instance k24:x23 1 [ ]
c64:agent:1 int k24:p4:e12 1 [ ]
c25:agent:1 int k19:e4 2 [ ]
c60:agent:1 int k24:e10 2 [ ]
k19:e4 main k15:p1 1 [ ]
k24:e10 main k20:p3 1 [ ]
c24:can:0 instance k19:e4 3 [ can ]
c59:can:0 instance k24:e10 3 [ ]
c28:eat:0 instance k19:p2:e6 2 [ eat ]
c63:eat:0 instance k24:p4:e12 2 [ ]
c30:theme:-1 int k19:p2:x12 2 [ ]
c65:theme:-1 int k24:p4:x24 2 [ ]
k24:p4 punctuation k24:p4:e12 3 [ . ]


!.
A furnace is a container or enclosed space in which a very hot fire is made, for example to melt metal, burn rubbish or produce steam.
furnace NN container NN enclosed VBN space NN which WDT very RB hot JJ fire NN made VBN example NN melt VB metal NN burn VBP rubbish NN produce VB steam NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:furnace,pos:'NN',lemma:furnace,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:container,pos:'NN',lemma:container,namex:'O'],1006:[tok:or,pos:'CC',lemma:or,namex:'O'],1007:[tok:enclosed,pos:'VBN',lemma:enclose,namex:'O'],1008:[tok:space,pos:'NN',lemma:space,namex:'O'],1009:[tok:in,pos:'IN',lemma:in,namex:'O'],1010:[tok:which,pos:'WDT',lemma:which,namex:'O'],1011:[tok:a,pos:'DT',lemma:a,namex:'O'],1012:[tok:very,pos:'RB',lemma:very,namex:'O'],1013:[tok:hot,pos:'JJ',lemma:hot,namex:'O'],1014:[tok:fire,pos:'NN',lemma:fire,namex:'O'],1015:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1016:[tok:made,pos:'VBN',lemma:make,namex:'O'],1017:[tok: (','),pos: (','),lemma: (','),namex:'O'],1018:[tok:for,pos:'IN',lemma:for,namex:'O'],1019:[tok:example,pos:'NN',lemma:example,namex:'O'],1020:[tok:to,pos:'TO',lemma:to,namex:'O'],1021:[tok:melt,pos:'VB',lemma:melt,namex:'O'],1022:[tok:metal,pos:'NN',lemma:metal,namex:'O'],1023:[tok: (','),pos: (','),lemma: (','),namex:'O'],1024:[tok:burn,pos:'VBP',lemma:burn,namex:'O'],1025:[tok:rubbish,pos:'NN',lemma:rubbish,namex:'O'],1026:[tok:or,pos:'CC',lemma:or,namex:'O'],1027:[tok:produce,pos:'VB',lemma:produce,namex:'O'],1028:[tok:steam,pos:'NN',lemma:steam,namex:'O'],1029:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([],[[1006]:or(drs([[1004]:D],[[1003]:eq(C,D),[1005]:pred(D,container,n,0)]),drs([[]:E,[]:F,[]:G,[]:H,[]:I,[1011]:J],[[1003]:eq(C,G),[]:prop(E,drs([[1020]:K],[[]:prop(K,drs([],[[1026]:or(drs([[]:L,[]:M,[]:N,[]:O,[]:P,[]:Q],[[]:rel(L,P,theme,0),[]:rel(L,Q,agent,0),[1021]:pred(L,melt,v,0),[]:rel(M,N,theme,0),[]:rel(M,O,agent,0),[1024]:pred(M,burn,v,0),[1025]:pred(N,rubbish,n,0),[]:eq(P,O),[1022]:pred(P,metal,n,0),[1019]:pred(Q,example,n,0)]),drs([[]:R,[]:S,[]:T],[[]:rel(R,S,theme,0),[]:rel(R,T,agent,0),[1027]:pred(R,produce,v,0),[1028]:pred(S,steam,n,0),[1019]:pred(T,example,n,0)]))]))])),[1018]:rel(G,E,for,0),[1009]:rel(H,G,in,0),[1008]:pred(G,space,n,0),[]:rel(F,G,theme,0),[1007]:pred(F,enclose,v,0),[]:rel(H,J,theme,0),[1016]:pred(H,make,v,0),[1014]:pred(J,fire,n,0),[1013]:pred(I,hot,a,0),[]:rel(I,J,experiencer,0),[1012]:pred(J,very,a,0)]))])),[1002]:pred(C,furnace,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A furnace is a container or enclosed space in which a very hot fire is made , for example to melt metal , burn rubbish or produce steam . 
k10 concept c16:example:0 0 [ ]
k10 concept c17:metal:0 0 [ ]
k10 concept c19:rubbish:0 0 [ ]
k10 event c20:burn:0 0 [ ]
k10 event c23:melt:0 0 [ ]
k10 referent k10:e3 0 [ ]
k10 referent k10:e4 0 [ ]
k10 referent k10:x5 0 [ ]
k10 referent k10:x6 0 [ ]
k10 referent k10:x7 0 [ ]
k10 referent k10:x8 0 [ ]
k10 relation c18:equality 0 [ ]
k10 role c22:theme:1 0 [ ]
k10 role c24:agent:1 0 [ ]
k10 role c25:theme:1 0 [ ]
k10 role c21:agent:-1 0 [ ]
k11 concept c26:example:0 0 [ ]
k11 concept c27:steam:0 0 [ ]
k11 event c28:produce:0 0 [ ]
k11 referent k11:e5 0 [ ]
k11 referent k11:x10 0 [ ]
k11 referent k11:x9 0 [ ]
k11 role c29:agent:1 0 [ ]
k11 role c30:theme:1 0 [ ]
k7 concept c0:furnace:0 0 [ ]
k7 referent k7:p1 0 [ ]
k8 concept c2:container:0 0 [ ]
k9 attribute c4:very:0 0 [ ]
k9 attribute c6:hot:0 0 [ ]
k9 concept c12:space:0 0 [ ]
k9 concept c7:fire:0 0 [ ]
k9 event c10:enclose:0 0 [ ]
k9 event c8:make:0 0 [ ]
k9 referent k9:e1 0 [ ]
k9 referent k9:e2 0 [ ]
k9 referent k9:p2 0 [ ]
k9 referent k9:s1 0 [ ]
k9 referent k9:x4 0 [ ]
k9 relation c13:in:0 0 [ ]
k9 relation c14:for:0 0 [ ]
k9 role c11:theme:-1 0 [ ]
k9 role c5:experiencer:-1 0 [ ]
k9 role c9:theme:1 0 [ ]
c1:or antecedent k8 0 [ ]
c1:or consequent k9 0 [ ]
c11:theme:-1 ext k9:e2 0 [ ]
c15:or antecedent k10 0 [ ]
c15:or consequent k11 0 [ ]
c18:equality ext k10:x7 0 [ ]
c22:theme:1 ext k10:x8 0 [ ]
c24:agent:1 ext k10:x5 0 [ ]
c25:theme:1 ext k10:x6 0 [ ]
c29:agent:1 ext k11:x9 0 [ ]
c3:equality ext k8:x2 0 [ ]
c30:theme:1 ext k11:x10 0 [ ]
c31:equality ext k9:x4 0 [ ]
c5:experiencer:-1 ext k9:s1 0 [ ]
c9:theme:1 ext k9:x3 0 [ ]
k7:p1 binary c1:or 0 [ ]
k9:p2:p3 binary c15:or 0 [ ]
c21:agent:-1 ext k10:e3 0 [ ]
k7 referent k7:x1 1 [ A ]
c0:furnace:0 instance k7:x1 2 [ furnace ]
k8 relation c3:equality 1 [ is ]
k9 relation c31:equality 1 [ ]
k8 referent k8:x2 1 [ a ]
c3:equality int k7:x1 3 [ ]
c2:container:0 instance k8:x2 2 [ container ]
k9 surface k9:e2 1 [ or ]
c11:theme:-1 int k9:x4 1 [ ]
c10:enclose:0 instance k9:e2 2 [ enclosed ]
c13:in:0 int k9:e1 1 [ ]
c12:space:0 instance k9:x4 2 [ space ]
c31:equality int k7:x1 4 [ ]
c13:in:0 ext k9:x4 3 [ in ]
k9 surface k9:x3 1 [ which ]
c9:theme:1 int k9:e1 2 [ ]
k9 referent k9:x3 2 [ a ]
c4:very:0 arg k9:x3 3 [ very ]
c6:hot:0 arg k9:s1 1 [ hot ]
c5:experiencer:-1 int k9:x3 4 [ ]
c7:fire:0 instance k9:x3 5 [ fire ]
k9 surface k9:e1 3 [ is ]
k9:e1 main k7:p1 1 [ ]
c8:make:0 instance k9:e1 4 [ made ]
k7 punctuation k7:p1 2 [ , ]
c14:for:0 ext k9:p2 1 [ for ]
c14:for:0 int k9:x4 4 [ ]
c16:example:0 instance k10:x5 1 [ example ]
c24:agent:1 int k10:e4 1 [ ]
c26:example:0 instance k11:x9 1 [ ]
c29:agent:1 int k11:e5 1 [ ]
k9:p2 referent k9:p2:p3 1 [ to ]
c23:melt:0 instance k10:e4 2 [ melt ]
k10:e4 main k9:p2:p3 2 [ ]
c17:metal:0 instance k10:x6 1 [ metal ]
k10 punctuation k10:x6 2 [ , ]
c25:theme:1 int k10:e4 3 [ ]
c20:burn:0 instance k10:e3 1 [ burn ]
c21:agent:-1 int k10:x7 1 [ ]
c18:equality int k10:x6 3 [ ]
c19:rubbish:0 instance k10:x8 1 [ rubbish ]
c22:theme:1 int k10:e3 2 [ ]
k11 surface k11:e5 2 [ or ]
c28:produce:0 instance k11:e5 3 [ produce ]
k11:e5 main k9:p2:p3 3 [ ]
c27:steam:0 instance k11:x10 1 [ steam ]
k11 punctuation k11:x10 2 [ . ]
c30:theme:1 int k11:e5 4 [ ]


!.
0.0475
0.1388
An autograph is the signature of someone famous which is specially written for a fan to keep.
autograph NN signature NN famous JJ which WDT specially RB written VBN fan NN keep VB 
sem(1,[1001:[tok:'An',pos:'DT',lemma:an,namex:'O'],1002:[tok:autograph,pos:'NN',lemma:autograph,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:the,pos:'DT',lemma:the,namex:'O'],1005:[tok:signature,pos:'NN',lemma:signature,namex:'O'],1006:[tok:of,pos:'IN',lemma:of,namex:'O'],1007:[tok:someone,pos:'DT',lemma:someone,namex:'O'],1008:[tok:famous,pos:'JJ',lemma:famous,namex:'O'],1009:[tok:which,pos:'WDT',lemma:which,namex:'O'],1010:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1011:[tok:specially,pos:'RB',lemma:specially,namex:'O'],1012:[tok:written,pos:'VBN',lemma:write,namex:'O'],1013:[tok:for,pos:'IN',lemma:for,namex:'O'],1014:[tok:a,pos:'DT',lemma:a,namex:'O'],1015:[tok:fan,pos:'NN',lemma:fan,namex:'O'],1016:[tok:to,pos:'TO',lemma:to,namex:'O'],1017:[tok:keep,pos:'VB',lemma:keep,namex:'O'],1018:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[1004]:B],[[1005]:pred(B,signature,n,0)]),drs([[]:C,[1001]:D],[[]:prop(C,drs([[1016]:E,[1014]:F,[]:G,[1009]:H,[]:I,[]:J,[]:K],[[1003]:eq(D,B),[1006]:rel(B,K,of,0),[1011]:pred(G,specially,r,0),[1013]:rel(G,F,for,0),[]:prop(E,drs([[]:L,[]:M,[]:N],[[]:rel(L,M,theme,0),[]:rel(L,N,agent,0),[1017]:pred(L,keep,v,0),[]:pred(M,thing,n,12),[]:eq(F,N)])),[1015]:pred(F,fan,n,0),[]:rel(G,H,theme,0),[1012]:pred(G,write,v,0),[]:eq(K,H),[]:rel(I,J,experiencer,0),[1008]:pred(I,famous,a,0),[]:eq(K,J),[1007]:pred(K,person,n,1)])),[1002]:pred(D,autograph,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% An autograph is the signature of someone famous which is specially written for a fan to keep . 
k4 concept c0:autograph:0 0 [ ]
k4 referent k4:p1 0 [ ]
c10:equality ext (k4:p1):p2:x7 0 [ ]
c11:thing:12 instance (k4:p1):p2:x8 0 [ ]
c14:theme:1 ext (k4:p1):p2:x8 0 [ ]
c14:theme:1 int (k4:p1):p2:e2 0 [ ]
c18:equality ext k4:p1:x2 0 [ ]
c3:equality ext k4:p1:x4 0 [ ]
c6:equality ext k4:p1:x5 0 [ ]
k4:p1 attribute c16:specially:0 0 [ ]
k4:p1 attribute c4:famous:0 0 [ ]
k4:p1 concept c1:signature:0 0 [ ]
k4:p1 concept c2:person:1 0 [ ]
k4:p1 concept c9:fan:0 0 [ ]
k4:p1 event c7:write:0 0 [ ]
k4:p1 referent k4:p1:e1 0 [ ]
k4:p1 referent k4:p1:s1 0 [ ]
k4:p1 referent k4:p1:x3 0 [ ]
k4:p1 referent k4:p1:x4 0 [ ]
k4:p1 relation c15:for:0 0 [ ]
k4:p1 relation c17:of:0 0 [ ]
k4:p1 relation c3:equality 0 [ ]
k4:p1 relation c6:equality 0 [ ]
k4:p1 role c5:experiencer:-1 0 [ ]
k4:p1 role c8:theme:-1 0 [ ]
k4:p1:p2 concept c11:thing:12 0 [ ]
k4:p1:p2 event c12:keep:0 0 [ ]
k4:p1:p2 referent (k4:p1):p2:e2 0 [ ]
k4:p1:p2 referent (k4:p1):p2:x7 0 [ ]
k4:p1:p2 referent (k4:p1):p2:x8 0 [ ]
k4:p1:p2 relation c10:equality 0 [ ]
k4:p1:p2 role c14:theme:1 0 [ ]
k4:p1:p2 role c13:agent:-1 0 [ ]
c13:agent:-1 ext (k4:p1):p2:e2 0 [ ]
c5:experiencer:-1 ext k4:p1:s1 0 [ ]
c8:theme:-1 ext k4:p1:e1 0 [ ]
k4 referent k4:x1 1 [ An ]
c0:autograph:0 instance k4:x1 2 [ autograph ]
k4:p1 relation c18:equality 1 [ is ]
k4:p1 referent k4:p1:x2 1 [ the ]
c18:equality int k4:x1 3 [ ]
c1:signature:0 instance k4:p1:x2 2 [ signature ]
c17:of:0 ext k4:p1:x3 1 [ of ]
c2:person:1 instance k4:p1:x3 2 [ someone ]
c17:of:0 int k4:p1:x2 3 [ ]
c4:famous:0 arg k4:p1:s1 1 [ famous ]
c5:experiencer:-1 int k4:p1:x4 1 [ ]
c3:equality int k4:p1:x3 3 [ ]
k4:p1 referent k4:p1:x5 1 [ which ]
c6:equality int k4:p1:x3 4 [ ]
k4:p1 surface k4:p1:e1 1 [ is ]
c8:theme:-1 int k4:p1:x5 2 [ ]
c16:specially:0 arg k4:p1:e1 2 [ specially ]
c7:write:0 instance k4:p1:e1 3 [ written ]
c15:for:0 ext k4:p1:x6 1 [ for ]
k4:p1 referent k4:p1:x6 2 [ a ]
c15:for:0 int k4:p1:e1 4 [ ]
c9:fan:0 instance k4:p1:x6 3 [ fan ]
k4:p1 referent k4:p1:p2 1 [ to ]
c12:keep:0 instance (k4:p1):p2:e2 1 [ keep ]
c13:agent:-1 int (k4:p1):p2:x7 1 [ ]
k4:p1:p2 punctuation (k4:p1):p2:e2 2 [ . ]
c10:equality int k4:p1:x6 4 [ ]


!.
The shores or shore of a sea, lake, or wide river is the land along the edge of it.
shores NNS shore NN sea NN lake NN wide JJ river NN land NN edge NN it PRP 
sem(1,[1001:[tok:'The',pos:'DT',lemma:the,namex:'O'],1002:[tok:shores,pos:'NNS',lemma:shore,namex:'O'],1003:[tok:or,pos:'CC',lemma:or,namex:'O'],1004:[tok:shore,pos:'NN',lemma:shore,namex:'O'],1005:[tok:of,pos:'IN',lemma:of,namex:'O'],1006:[tok:a,pos:'DT',lemma:a,namex:'O'],1007:[tok:sea,pos:'NN',lemma:sea,namex:'O'],1008:[tok: (','),pos: (','),lemma: (','),namex:'O'],1009:[tok:lake,pos:'NN',lemma:lake,namex:'O'],1010:[tok: (','),pos: (','),lemma: (','),namex:'O'],1011:[tok:or,pos:'CC',lemma:or,namex:'O'],1012:[tok:wide,pos:'JJ',lemma:wide,namex:'O'],1013:[tok:river,pos:'NN',lemma:river,namex:'O'],1014:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1015:[tok:the,pos:'DT',lemma:the,namex:'O'],1016:[tok:land,pos:'NN',lemma:land,namex:'O'],1017:[tok:along,pos:'IN',lemma:along,namex:'O'],1018:[tok:the,pos:'DT',lemma:the,namex:'O'],1019:[tok:edge,pos:'NN',lemma:edge,namex:'O'],1020:[tok:of,pos:'IN',lemma:of,namex:'O'],1021:[tok:it,pos:'PRP',lemma:it,namex:'O'],1022:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[1018]:C,[1015]:D,[]:E,[1018]:F,[1015]:G,[1001]:H],[[1021]:pred(B,thing,n,12),[1019]:pred(C,edge,n,0),[1016]:pred(D,land,n,0),[1021]:pred(E,thing,n,12),[1019]:pred(F,edge,n,0),[1016]:pred(G,land,n,0),[1003]:or(drs([],[[1002]:pred(H,shore,n,0)]),drs([],[[1004]:pred(H,shore,n,0)]))]),drs([],[[1011]:or(drs([[]:I,[]:J,[1006]:K],[[]:prop(I,drs([],[[1014]:eq(H,G),[1017]:rel(G,F,along,0),[1020]:rel(F,E,of,0)])),[1005]:rel(H,K,of,0),[1008]:rel(K,J,rel,2),[1009]:pred(J,lake,n,0),[1007]:pred(K,sea,n,0)]),drs([[]:L,[]:M,[]:N],[[]:prop(L,drs([],[[1014]:eq(N,D),[1017]:rel(D,C,along,0),[1020]:rel(C,B,of,0)])),[1013]:pred(N,river,n,0),[1012]:pred(M,wide,a,0),[]:rel(M,N,experiencer,0)]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% The shores or shore of a sea , lake , or wide river is the land along the edge of it . 
k2 binary c0:or 0 [ ]
k3 binary c1:or 0 [ ]
k3 concept c4:sea:0 0 [ ]
k3 concept c5:lake:0 0 [ ]
k3 referent k3:p1 0 [ ]
k3 referent k3:x3 0 [ ]
k3 relation c6:rel:2 0 [ ]
k3 relation c7:of:0 0 [ ]
k4 concept c2:shore:0 0 [ ]
k5 concept c3:shore:0 0 [ ]
k6 attribute c15:wide:0 0 [ ]
k6 concept c16:river:0 0 [ ]
k6 referent k6:p2 0 [ ]
k6 referent k6:s1 0 [ ]
k6 referent k6:x7 0 [ ]
k6 role c14:experiencer:-1 0 [ ]
c0:or antecedent k3 0 [ ]
c0:or consequent k6 0 [ ]
c1:or antecedent k4 0 [ ]
c1:or consequent k5 0 [ ]
c13:equality ext k3:p1:x4 0 [ ]
c14:experiencer:-1 ext k6:s1 0 [ ]
c22:equality ext k6:p2:x8 0 [ ]
k3:p1 concept c10:thing:12 0 [ ]
k3:p1 concept c8:land:0 0 [ ]
k3:p1 concept c9:edge:0 0 [ ]
k3:p1 referent k3:p1:x6 0 [ ]
k3:p1 relation c11:of:0 0 [ ]
k3:p1 relation c12:along:0 0 [ ]
k6:p2 concept c17:land:0 0 [ ]
k6:p2 concept c18:edge:0 0 [ ]
k6:p2 concept c19:thing:12 0 [ ]
k6:p2 referent k6:p2:x10 0 [ ]
k6:p2 relation c20:of:0 0 [ ]
k6:p2 relation c21:along:0 0 [ ]
k3 referent k3:x1 1 [ The ]
c2:shore:0 instance k3:x1 2 [ shores ]
k3 function k3:x1 3 [ or ]
c3:shore:0 instance k3:x1 4 [ shore ]
c7:of:0 ext k3:x2 1 [ of ]
k3 referent k3:x2 2 [ a ]
c7:of:0 int k3:x1 5 [ ]
c4:sea:0 instance k3:x2 3 [ sea ]
c6:rel:2 ext k3:x3 1 [ , ]
c5:lake:0 instance k3:x3 2 [ lake ]
k3 punctuation k3:x3 3 [ , ]
c6:rel:2 int k3:x2 4 [ ]
k6 surface k6:s1 1 [ or ]
c14:experiencer:-1 int k6:x7 1 [ ]
c15:wide:0 arg k6:s1 2 [ wide ]
c16:river:0 instance k6:x7 2 [ river ]
k3:p1 relation c13:equality 1 [ is ]
k6:p2 relation c22:equality 1 [ ]
k3:p1 referent k3:p1:x4 1 [ the ]
k6:p2 referent k6:p2:x8 1 [ ]
c22:equality int k6:x7 3 [ ]
c13:equality int k3:x1 6 [ ]
c17:land:0 instance k6:p2:x8 2 [ ]
c8:land:0 instance k3:p1:x4 2 [ land ]
c12:along:0 ext k3:p1:x5 1 [ along ]
c21:along:0 ext k6:p2:x9 1 [ ]
k3:p1 referent k3:p1:x5 2 [ the ]
k6:p2 referent k6:p2:x9 2 [ ]
c12:along:0 int k3:p1:x4 3 [ ]
c21:along:0 int k6:p2:x8 3 [ ]
c18:edge:0 instance k6:p2:x9 3 [ ]
c9:edge:0 instance k3:p1:x5 3 [ edge ]
c11:of:0 ext k3:p1:x6 1 [ of ]
c20:of:0 ext k6:p2:x10 1 [ ]
c10:thing:12 instance k3:p1:x6 2 [ it ]
c19:thing:12 instance k6:p2:x10 2 [ ]
c11:of:0 int k3:p1:x5 4 [ ]
k6:p2 punctuation k6:p2:x10 3 [ . ]
c20:of:0 int k6:p2:x9 4 [ ]


!.
0.0050
0.0701
An automobile is a car.
automobile NN car NN 
sem(1,[1001:[tok:'An',pos:'DT',lemma:an,namex:'O'],1002:[tok:automobile,pos:'NN',lemma:automobile,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:car,pos:'NN',lemma:car,namex:'O'],1006:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[1004]:D],[[1003]:eq(C,D),[1005]:pred(D,car,n,0)])),[1002]:pred(C,automobile,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% An automobile is a car . 
k2 concept c0:automobile:0 0 [ ]
k2 referent k2:p1 0 [ ]
c2:equality ext k2:p1:x2 0 [ ]
k2:p1 concept c1:car:0 0 [ ]
k2 referent k2:x1 1 [ An ]
c0:automobile:0 instance k2:x1 2 [ automobile ]
k2:p1 relation c2:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ a ]
c1:car:0 instance k2:p1:x2 2 [ car ]
c2:equality int k2:x1 3 [ ]
k2:p1 punctuation k2:p1:x2 3 [ . ]


!.
In legends and fairy stories, a wizard is a man who has magic powers.
legends NNS fairy JJ stories NNS wizard NN man NN who WP magic JJ powers NNS 
sem(1,[1001:[tok:'In',pos:'IN',lemma:in,namex:'O'],1002:[tok:legends,pos:'NNS',lemma:legend,namex:'O'],1003:[tok:and,pos:'CC',lemma:and,namex:'O'],1004:[tok:fairy,pos:'JJ',lemma:fairy,namex:'O'],1005:[tok:stories,pos:'NNS',lemma:story,namex:'O'],1006:[tok: (','),pos: (','),lemma: (','),namex:'O'],1007:[tok:a,pos:'DT',lemma:a,namex:'O'],1008:[tok:wizard,pos:'NN',lemma:wizard,namex:'O'],1009:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1010:[tok:a,pos:'DT',lemma:a,namex:'O'],1011:[tok:man,pos:'NN',lemma:man,namex:'O'],1012:[tok:who,pos:'WP',lemma:who,namex:'O'],1013:[tok:has,pos:'VBZ',lemma:have,namex:'O'],1014:[tok:magic,pos:'JJ',lemma:magic,namex:'O'],1015:[tok:powers,pos:'NNS',lemma:power,namex:'O'],1016:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[]:C,[]:D,[1003]:E,[]:F,[1007]:G],[[1001]:rel(F,E,in,0),[]:rel(C,E,subset_of,1),[1005]:pred(C,story,n,0),[1004]:pred(B,fairy,a,0),[]:rel(B,C,experiencer,0),[]:rel(D,E,subset_of,1),[1002]:pred(D,legend,n,0),[]:prop(F,drs([[]:H,[]:I,[]:J,[1012]:K,[1010]:L],[[1009]:eq(G,L),[]:rel(H,J,theme,0),[]:rel(H,K,agent,0),[1013]:pred(H,have,v,0),[1015]:pred(J,power,n,0),[1014]:pred(I,magic,a,0),[]:rel(I,J,experiencer,0),[]:eq(L,K),[1011]:pred(L,man,n,0)])),[1008]:pred(G,wizard,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% In legends and fairy stories , a wizard is a man who has magic powers . 
k3 attribute c13:fairy:0 0 [ ]
k3 concept c0:wizard:0 0 [ ]
k3 concept c10:legend:0 0 [ ]
k3 concept c14:story:0 0 [ ]
k3 referent k3:p1 0 [ ]
k3 referent k3:s1 0 [ ]
k3 referent k3:x3 0 [ ]
k3 referent k3:x4 0 [ ]
k3 relation c11:superset_of:1 0 [ ]
k3 relation c15:superset_of:1 0 [ ]
k3 relation c16:in:0 0 [ ]
k3 role c12:experiencer:-1 0 [ ]
c11:superset_of:1 ext k3:x3 0 [ ]
c12:experiencer:-1 ext k3:s1 0 [ ]
c15:superset_of:1 ext k3:x4 0 [ ]
c2:equality ext k3:p1:x6 0 [ ]
c3:experiencer:-1 ext k3:p1:s2 0 [ ]
c8:theme:1 ext k3:p1:x7 0 [ ]
c9:equality ext k3:p1:x5 0 [ ]
k3:p1 attribute c4:magic:0 0 [ ]
k3:p1 concept c1:man:0 0 [ ]
k3:p1 concept c5:power:0 0 [ ]
k3:p1 event c6:have:0 0 [ ]
k3:p1 referent k3:p1:e1 0 [ ]
k3:p1 referent k3:p1:s2 0 [ ]
k3:p1 referent k3:p1:x7 0 [ ]
k3:p1 relation c2:equality 0 [ ]
k3:p1 role c3:experiencer:-1 0 [ ]
k3:p1 role c8:theme:1 0 [ ]
k3:p1 role c7:agent:-1 0 [ ]
c7:agent:-1 ext k3:p1:e1 0 [ ]
c16:in:0 ext k3:x2 1 [ In ]
c10:legend:0 instance k3:x3 1 [ legends ]
c11:superset_of:1 int k3:x2 2 [ ]
c16:in:0 int k3:p1 1 [ ]
k3 referent k3:x2 3 [ and ]
c12:experiencer:-1 int k3:x4 1 [ ]
c13:fairy:0 arg k3:s1 1 [ fairy ]
c14:story:0 instance k3:x4 2 [ stories ]
k3 punctuation k3:x4 3 [ , ]
c15:superset_of:1 int k3:x2 4 [ ]
k3 referent k3:x1 1 [ a ]
c0:wizard:0 instance k3:x1 2 [ wizard ]
k3:p1 relation c9:equality 1 [ is ]
k3:p1 referent k3:p1:x5 1 [ a ]
c9:equality int k3:x1 3 [ ]
c1:man:0 instance k3:p1:x5 2 [ man ]
k3:p1 referent k3:p1:x6 1 [ who ]
c2:equality int k3:p1:x5 3 [ ]
c6:have:0 instance k3:p1:e1 1 [ has ]
c7:agent:-1 int k3:p1:x6 2 [ ]
c3:experiencer:-1 int k3:p1:x7 1 [ ]
c4:magic:0 arg k3:p1:s2 1 [ magic ]
c5:power:0 instance k3:p1:x7 2 [ powers ]
c8:theme:1 int k3:p1:e1 2 [ ]
k3:p1 punctuation k3:p1:x7 3 [ . ]


!.
0.0200
0.0088
A mound of something is a large rounded pile of it.
mound NN large JJ rounded JJ pile NN it PRP 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:mound,pos:'NN',lemma:mound,namex:'O'],1003:[tok:of,pos:'IN',lemma:of,namex:'O'],1004:[tok:something,pos:'DT',lemma:something,namex:'O'],1005:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1006:[tok:a,pos:'DT',lemma:a,namex:'O'],1007:[tok:large,pos:'JJ',lemma:large,namex:'O'],1008:[tok:rounded,pos:'JJ',lemma:rounded,namex:'O'],1009:[tok:pile,pos:'NN',lemma:pile,namex:'O'],1010:[tok:of,pos:'IN',lemma:of,namex:'O'],1011:[tok:it,pos:'PRP',lemma:it,namex:'O'],1012:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B],[[1011]:pred(B,thing,n,12)]),drs([[]:C,[]:D,[1001]:E],[[]:prop(C,drs([[]:F,[]:G,[1006]:H],[[1005]:eq(E,H),[1010]:rel(H,B,of,0),[1009]:pred(H,pile,n,0),[1008]:pred(F,rounded,a,0),[]:rel(F,H,experiencer,0),[1007]:pred(G,large,a,0),[]:rel(G,H,experiencer,0)])),[1003]:rel(E,D,of,0),[1004]:pred(D,thing,n,12),[1002]:pred(E,mound,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A mound of something is a large rounded pile of it . 
k2 concept c0:mound:0 0 [ ]
k2 concept c1:thing:12 0 [ ]
k2 referent k2:p1 0 [ ]
k2 referent k2:x2 0 [ ]
k2 relation c2:of:0 0 [ ]
c10:equality ext k2:p1:x3 0 [ ]
c3:experiencer:-1 ext k2:p1:s1 0 [ ]
c5:experiencer:-1 ext k2:p1:s2 0 [ ]
k2:p1 attribute c4:large:0 0 [ ]
k2:p1 attribute c6:rounded:0 0 [ ]
k2:p1 concept c7:pile:0 0 [ ]
k2:p1 concept c8:thing:12 0 [ ]
k2:p1 referent k2:p1:s1 0 [ ]
k2:p1 referent k2:p1:s2 0 [ ]
k2:p1 referent k2:p1:x4 0 [ ]
k2:p1 relation c9:of:0 0 [ ]
k2:p1 role c3:experiencer:-1 0 [ ]
k2:p1 role c5:experiencer:-1 0 [ ]
k2 referent k2:x1 1 [ A ]
c0:mound:0 instance k2:x1 2 [ mound ]
c2:of:0 ext k2:x2 1 [ of ]
c1:thing:12 instance k2:x2 2 [ something ]
c2:of:0 int k2:x1 3 [ ]
k2:p1 relation c10:equality 1 [ is ]
k2:p1 referent k2:p1:x3 1 [ a ]
c10:equality int k2:x1 4 [ ]
c4:large:0 arg k2:p1:s1 1 [ large ]
c3:experiencer:-1 int k2:p1:x3 2 [ ]
c6:rounded:0 arg k2:p1:s2 1 [ rounded ]
c5:experiencer:-1 int k2:p1:x3 3 [ ]
c7:pile:0 instance k2:p1:x3 4 [ pile ]
c9:of:0 ext k2:p1:x4 1 [ of ]
c8:thing:12 instance k2:p1:x4 2 [ it ]
k2:p1 punctuation k2:p1:x4 3 [ . ]
c9:of:0 int k2:p1:x3 5 [ ]


!.
A stove is a piece of equipment which provides heat, either for cooking or for heating a room.
stove NN piece NN equipment NN which WDT heat NN cooking NN heating VBG room NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:stove,pos:'NN',lemma:stove,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:piece,pos:'NN',lemma:piece,namex:'O'],1006:[tok:of,pos:'IN',lemma:of,namex:'O'],1007:[tok:equipment,pos:'NN',lemma:equipment,namex:'O'],1008:[tok:which,pos:'WDT',lemma:which,namex:'O'],1009:[tok:provides,pos:'VBZ',lemma:provide,namex:'O'],1010:[tok:heat,pos:'NN',lemma:heat,namex:'O'],1011:[tok: (','),pos: (','),lemma: (','),namex:'O'],1012:[tok:either,pos:'CC',lemma:either,namex:'O'],1013:[tok:for,pos:'IN',lemma:for,namex:'O'],1014:[tok:cooking,pos:'NN',lemma:cooking,namex:'O'],1015:[tok:or,pos:'CC',lemma:or,namex:'O'],1016:[tok:for,pos:'IN',lemma:for,namex:'O'],1017:[tok:heating,pos:'VBG',lemma:heat,namex:'O'],1018:[tok:a,pos:'DT',lemma:a,namex:'O'],1019:[tok:room,pos:'NN',lemma:room,namex:'O'],1020:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[1004]:E],[[1003]:eq(C,E),[1015]:or(drs([[]:F,[]:G,[]:H,[1008]:I],[[1012]:pred(G,either,r,0),[1013]:rel(G,F,for,0),[1014]:pred(F,cooking,n,0),[]:rel(G,H,theme,0),[]:rel(G,I,agent,0),[1009]:pred(G,provide,v,0),[1010]:pred(H,heat,n,0),[]:eq(E,I)]),drs([[]:J,[1018]:K,[]:L,[]:M,[1008]:N],[[1016]:rel(L,J,for,0),[]:rel(J,K,theme,0),[]:rel(J,N,agent,0),[1017]:pred(J,heat,v,0),[1019]:pred(K,room,n,0),[]:rel(L,M,theme,0),[]:rel(L,N,agent,0),[1009]:pred(L,provide,v,0),[1010]:pred(M,heat,n,0),[]:eq(E,N)])),[1006]:rel(E,D,of,0),[1007]:pred(D,equipment,n,0),[1005]:pred(E,piece,n,0)])),[1002]:pred(C,stove,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A stove is a piece of equipment which provides heat , either for cooking or for heating a room . 
k5 concept c0:stove:0 0 [ ]
k5 referent k5:p1 0 [ ]
k6 attribute c12:either:0 0 [ ]
k6 concept c10:cooking:0 0 [ ]
k6 concept c6:heat:0 0 [ ]
k6 event c7:provide:0 0 [ ]
k6 referent k6:e1 0 [ ]
k6 referent k6:x5 0 [ ]
k6 referent k6:x6 0 [ ]
k6 relation c11:for:0 0 [ ]
k6 relation c5:equality 0 [ ]
k6 role c9:theme:1 0 [ ]
k6 role c8:agent:-1 0 [ ]
k7 concept c14:heat:0 0 [ ]
k7 concept c18:room:0 0 [ ]
k7 event c15:provide:0 0 [ ]
k7 event c19:heat:0 0 [ ]
k7 referent k7:e2 0 [ ]
k7 referent k7:e3 0 [ ]
k7 referent k7:x8 0 [ ]
k7 relation c13:equality 0 [ ]
k7 relation c22:for:0 0 [ ]
k7 role c17:theme:1 0 [ ]
k7 role c21:theme:1 0 [ ]
k7 role c16:agent:-1 0 [ ]
k7 role c20:agent:-1 0 [ ]
c13:equality ext k7:x7 0 [ ]
c17:theme:1 ext k7:x8 0 [ ]
c21:theme:1 ext k7:x9 0 [ ]
c23:equality ext k5:p1:x2 0 [ ]
c4:or antecedent k6 0 [ ]
c4:or consequent k7 0 [ ]
c5:equality ext k6:x4 0 [ ]
c9:theme:1 ext k6:x5 0 [ ]
k5:p1 binary c4:or 0 [ ]
k5:p1 concept c1:piece:0 0 [ ]
k5:p1 concept c2:equipment:0 0 [ ]
k5:p1 referent k5:p1:x3 0 [ ]
k5:p1 relation c3:of:0 0 [ ]
c16:agent:-1 ext k7:e2 0 [ ]
c20:agent:-1 ext k7:e3 0 [ ]
c8:agent:-1 ext k6:e1 0 [ ]
k5 referent k5:x1 1 [ A ]
c0:stove:0 instance k5:x1 2 [ stove ]
k5:p1 relation c23:equality 1 [ is ]
k5:p1 referent k5:p1:x2 1 [ a ]
c23:equality int k5:x1 3 [ ]
c1:piece:0 instance k5:p1:x2 2 [ piece ]
c3:of:0 ext k5:p1:x3 1 [ of ]
c2:equipment:0 instance k5:p1:x3 2 [ equipment ]
c3:of:0 int k5:p1:x2 3 [ ]
k6 referent k6:x4 1 [ which ]
k7 referent k7:x7 1 [ ]
c13:equality int k5:p1:x2 4 [ ]
c5:equality int k5:p1:x2 5 [ ]
c15:provide:0 instance k7:e2 1 [ ]
c7:provide:0 instance k6:e1 1 [ provides ]
c16:agent:-1 int k7:x7 2 [ ]
c8:agent:-1 int k6:x4 2 [ ]
c14:heat:0 instance k7:x8 1 [ ]
c6:heat:0 instance k6:x5 1 [ heat ]
c9:theme:1 int k6:e1 2 [ ]
k7 punctuation k7:x8 2 [ , ]
c17:theme:1 int k7:e2 2 [ ]
c12:either:0 arg k6:e1 3 [ either ]
c11:for:0 ext k6:x6 1 [ for ]
c10:cooking:0 instance k6:x6 2 [ cooking ]
c11:for:0 int k6:e1 4 [ ]
k7 surface k7:e3 1 [ or ]
c22:for:0 int k7:e2 3 [ ]
c20:agent:-1 int k7:x7 3 [ ]
c22:for:0 ext k7:e3 2 [ for ]
c19:heat:0 instance k7:e3 3 [ heating ]
k7 referent k7:x9 1 [ a ]
c18:room:0 instance k7:x9 2 [ room ]
k7 punctuation k7:x9 3 [ . ]
c21:theme:1 int k7:e3 4 [ ]


!.
0.0050
0.4968
A grin is a broad smile.
grin NN broad JJ smile NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:grin,pos:'NN',lemma:grin,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:broad,pos:'JJ',lemma:broad,namex:'O'],1006:[tok:smile,pos:'NN',lemma:smile,namex:'O'],1007:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[1004]:E],[[1003]:eq(C,E),[1006]:pred(E,smile,n,0),[1005]:pred(D,broad,a,0),[]:rel(D,E,experiencer,0)])),[1002]:pred(C,grin,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A grin is a broad smile . 
k2 concept c0:grin:0 0 [ ]
k2 referent k2:p1 0 [ ]
c1:experiencer:-1 ext k2:p1:s1 0 [ ]
c4:equality ext k2:p1:x2 0 [ ]
k2:p1 attribute c2:broad:0 0 [ ]
k2:p1 concept c3:smile:0 0 [ ]
k2:p1 referent k2:p1:s1 0 [ ]
k2:p1 role c1:experiencer:-1 0 [ ]
k2 referent k2:x1 1 [ A ]
c0:grin:0 instance k2:x1 2 [ grin ]
k2:p1 relation c4:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ a ]
c2:broad:0 arg k2:p1:s1 1 [ broad ]
c1:experiencer:-1 int k2:p1:x2 2 [ ]
c3:smile:0 instance k2:p1:x2 3 [ smile ]
c4:equality int k2:x1 3 [ ]
k2:p1 punctuation k2:p1:x2 4 [ . ]


!.
An implement is a tool or other pieces of equipment.
implement VB tool NN other JJ pieces NNS equipment NN 
sem(1,[1001:[tok:'An',pos:'DT',lemma:an,namex:'O'],1002:[tok:implement,pos:'VB',lemma:implement,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:tool,pos:'NN',lemma:tool,namex:'O'],1006:[tok:or,pos:'CC',lemma:or,namex:'O'],1007:[tok:other,pos:'JJ',lemma:other,namex:'O'],1008:[tok:pieces,pos:'NNS',lemma:piece,namex:'O'],1009:[tok:of,pos:'IN',lemma:of,namex:'O'],1010:[tok:equipment,pos:'NN',lemma:equipment,namex:'O'],1011:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B],[[1008]:pred(B,piece,n,0)]),drs([[]:C,[1001]:D],[[]:prop(C,drs([],[[1006]:or(drs([[1004]:E],[[1003]:eq(D,E),[1005]:pred(E,tool,n,0)]),drs([[]:F,[]:G],[[1003]:eq(D,G),[1009]:rel(G,F,of,0),[1010]:pred(F,equipment,n,0),[]:not(drs([],[[1007]:eq(G,B)])),[1008]:pred(G,piece,n,0)]))])),[1002]:pred(D,implement,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% An implement is a tool or other pieces of equipment . 
k2 concept c0:implement:0 0 [ ]
k2 referent k2:p1 0 [ ]
k3 concept c2:tool:0 0 [ ]
k4 attribute c5:other:0 0 [ ]
k4 concept c6:piece:0 0 [ ]
k4 concept c7:equipment:0 0 [ ]
k4 referent k4:s1 0 [ ]
k4 referent k4:x3 0 [ ]
k4 referent k4:x4 0 [ ]
k4 relation c8:of:0 0 [ ]
k4 role c4:experiencer:-1 0 [ ]
c1:or antecedent k3 0 [ ]
c1:or consequent k4 0 [ ]
c3:equality ext k3:x2 0 [ ]
c4:experiencer:-1 ext k4:s1 0 [ ]
c9:equality ext k4:x3 0 [ ]
k2:p1 binary c1:or 0 [ ]
k2 referent k2:x1 1 [ An ]
c0:implement:0 instance k2:x1 2 [ implement ]
k3 relation c3:equality 1 [ is ]
k4 relation c9:equality 1 [ ]
k3 referent k3:x2 1 [ a ]
c3:equality int k2:x1 3 [ ]
c2:tool:0 instance k3:x2 2 [ tool ]
k4 surface k4:s1 1 [ or ]
c4:experiencer:-1 int k4:x3 1 [ ]
c5:other:0 arg k4:s1 2 [ other ]
c6:piece:0 instance k4:x3 2 [ pieces ]
c9:equality int k2:x1 4 [ ]
c8:of:0 ext k4:x4 1 [ of ]
c7:equipment:0 instance k4:x4 2 [ equipment ]
k4 punctuation k4:x4 3 [ . ]
c8:of:0 int k4:x3 3 [ ]


!.
0.0050
0.0099
An asylum is a psychiatric hospital.
asylum NN psychiatric JJ hospital NN 
sem(1,[1001:[tok:'An',pos:'DT',lemma:an,namex:'O'],1002:[tok:asylum,pos:'NN',lemma:asylum,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:psychiatric,pos:'JJ',lemma:psychiatric,namex:'O'],1006:[tok:hospital,pos:'NN',lemma:hospital,namex:'O'],1007:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[1004]:E],[[1003]:eq(C,E),[1006]:pred(E,hospital,n,0),[1005]:pred(D,psychiatric,a,0),[]:rel(D,E,experiencer,0)])),[1002]:pred(C,asylum,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% An asylum is a psychiatric hospital . 
k2 concept c0:asylum:0 0 [ ]
k2 referent k2:p1 0 [ ]
c1:experiencer:-1 ext k2:p1:s1 0 [ ]
c4:equality ext k2:p1:x2 0 [ ]
k2:p1 attribute c2:psychiatric:0 0 [ ]
k2:p1 concept c3:hospital:0 0 [ ]
k2:p1 referent k2:p1:s1 0 [ ]
k2:p1 role c1:experiencer:-1 0 [ ]
k2 referent k2:x1 1 [ An ]
c0:asylum:0 instance k2:x1 2 [ asylum ]
k2:p1 relation c4:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ a ]
c2:psychiatric:0 arg k2:p1:s1 1 [ psychiatric ]
c1:experiencer:-1 int k2:p1:x2 2 [ ]
c3:hospital:0 instance k2:p1:x2 3 [ hospital ]
c4:equality int k2:x1 3 [ ]
k2:p1 punctuation k2:p1:x2 4 [ . ]


!.
Fruit or a fruit is something which grows on a tree or bush and which contains seeds or a stone covered by a substance that you can eat.
'Fruit' NNP fruit NN which WDT tree NN bush NN which WDT seeds NNS stone NN covered VBN substance NN you PRP eat VB 
sem(1,[1001:[tok:'Fruit',pos:'NNP',lemma:'Fruit',namex:'O'],1002:[tok:or,pos:'CC',lemma:or,namex:'O'],1003:[tok:a,pos:'DT',lemma:a,namex:'O'],1004:[tok:fruit,pos:'NN',lemma:fruit,namex:'O'],1005:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1006:[tok:something,pos:'DT',lemma:something,namex:'O'],1007:[tok:which,pos:'WDT',lemma:which,namex:'O'],1008:[tok:grows,pos:'VBZ',lemma:grow,namex:'O'],1009:[tok:on,pos:'IN',lemma:on,namex:'O'],1010:[tok:a,pos:'DT',lemma:a,namex:'O'],1011:[tok:tree,pos:'NN',lemma:tree,namex:'O'],1012:[tok:or,pos:'CC',lemma:or,namex:'O'],1013:[tok:bush,pos:'NN',lemma:bush,namex:'O'],1014:[tok:and,pos:'CC',lemma:and,namex:'O'],1015:[tok:which,pos:'WDT',lemma:which,namex:'O'],1016:[tok:contains,pos:'VBZ',lemma:contain,namex:'O'],1017:[tok:seeds,pos:'NNS',lemma:seed,namex:'O'],1018:[tok:or,pos:'CC',lemma:or,namex:'O'],1019:[tok:a,pos:'DT',lemma:a,namex:'O'],1020:[tok:stone,pos:'NN',lemma:stone,namex:'O'],1021:[tok:covered,pos:'VBN',lemma:cover,namex:'O'],1022:[tok:by,pos:'IN',lemma:by,namex:'O'],1023:[tok:a,pos:'DT',lemma:a,namex:'O'],1024:[tok:substance,pos:'NN',lemma:substance,namex:'O'],1025:[tok:that,pos:'IN',lemma:that,namex:'O'],1026:[tok:you,pos:'PRP',lemma:you,namex:'O'],1027:[tok:can,pos:'MD',lemma:can,namex:'O'],1028:[tok:eat,pos:'VB',lemma:eat,namex:'O'],1029:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[]:C,[]:D],[[1026]:pred(B,person,n,1),[1026]:pred(C,person,n,1),[1001]:named(D,fruit,nam,nam)]),drs([],[[1002]:or(drs([[]:E],[[]:prop(E,drs([[1015]:F,[]:G,[1010]:H,[]:I,[1007]:J,[]:K],[[1005]:eq(D,G),[1018]:or(drs([[]:L,[]:M],[[]:rel(L,M,theme,0),[]:rel(L,F,agent,0),[1016]:pred(L,contain,v,0),[1017]:pred(M,seed,n,0)]),drs([[]:N,[]:O,[]:P,[1023]:Q,[]:R,[]:S,[1019]:T],[[]:rel(N,T,theme,0),[]:rel(N,F,agent,0),[1016]:pred(N,contain,v,0),[1022]:rel(R,Q,agent,0),[]:prop(O,drs([[]:U,[1025]:V],[[]:rel(U,V,theme,0),[]:rel(U,C,agent,0),[1028]:pred(U,eat,v,0),[]:eq(Q,V)])),[]:rel(P,O,topic,0),[]:rel(P,C,agent,0),[1027]:pred(P,can,v,0),[1024]:pred(Q,substance,n,0),[]:rel(R,S,theme,0),[1021]:pred(R,cover,v,0),[]:eq(T,S),[1020]:pred(T,stone,n,0)])),[]:eq(G,F),[1006]:pred(G,thing,n,12),[1005]:eq(D,K),[1009]:rel(I,H,on,0),[1012]:or(drs([],[[1011]:pred(H,tree,n,0)]),drs([],[[1013]:pred(H,bush,n,0)])),[]:rel(I,J,agent,0),[1008]:pred(I,grow,v,0),[]:eq(K,J),[1006]:pred(K,thing,n,12)]))]),drs([[]:W,[1003]:X],[[]:prop(W,drs([[1015]:Y,[]:Z,[1010]:A1,[]:B1,[1007]:C1,[]:D1],[[1005]:eq(X,Z),[1018]:or(drs([[]:E1,[]:F1],[[]:rel(E1,F1,theme,0),[]:rel(E1,Y,agent,0),[1016]:pred(E1,contain,v,0),[1017]:pred(F1,seed,n,0)]),drs([[]:G1,[]:H1,[]:I1,[1023]:J1,[]:K1,[]:L1,[1019]:M1],[[]:rel(G1,M1,theme,0),[]:rel(G1,Y,agent,0),[1016]:pred(G1,contain,v,0),[1022]:rel(K1,J1,agent,0),[]:prop(H1,drs([[]:N1,[1025]:O1],[[]:rel(N1,O1,theme,0),[]:rel(N1,B,agent,0),[1028]:pred(N1,eat,v,0),[]:eq(J1,O1)])),[]:rel(I1,H1,topic,0),[]:rel(I1,B,agent,0),[1027]:pred(I1,can,v,0),[1024]:pred(J1,substance,n,0),[]:rel(K1,L1,theme,0),[1021]:pred(K1,cover,v,0),[]:eq(M1,L1),[1020]:pred(M1,stone,n,0)])),[]:eq(Z,Y),[1006]:pred(Z,thing,n,12),[1005]:eq(X,D1),[1009]:rel(B1,A1,on,0),[1012]:or(drs([],[[1011]:pred(A1,tree,n,0)]),drs([],[[1013]:pred(A1,bush,n,0)])),[]:rel(B1,C1,agent,0),[1008]:pred(B1,grow,v,0),[]:eq(D1,C1),[1006]:pred(D1,thing,n,12)])),[1004]:pred(X,fruit,n,0)]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% Fruit or a fruit is something which grows on a tree or bush and which contains seeds or a stone covered by a substance that you can eat . 
k14 binary c0:or 0 [ ]
k15 named c1:fruit:nam 0 [ ]
k15 referent k15:p1 0 [ ]
k15 referent k15:x1 0 [ ]
k16 concept c7:tree:0 0 [ ]
k17 concept c8:bush:0 0 [ ]
k18 concept c14:seed:0 0 [ ]
k18 event c15:contain:0 0 [ ]
k18 referent k18:e2 0 [ ]
k18 referent k18:x7 0 [ ]
k18 role c17:theme:1 0 [ ]
k18 role c16:agent:-1 0 [ ]
k19 concept c18:stone:0 0 [ ]
k19 concept c22:substance:0 0 [ ]
k19 concept c23:person:1 0 [ ]
k19 event c20:cover:0 0 [ ]
k19 event c24:can:0 0 [ ]
k19 event c32:contain:0 0 [ ]
k19 referent k19:e3 0 [ ]
k19 referent k19:e4 0 [ ]
k19 referent k19:e5 0 [ ]
k19 referent k19:p2 0 [ ]
k19 referent k19:x11 0 [ ]
k19 referent k19:x9 0 [ ]
k19 relation c19:equality 0 [ ]
k19 role c25:agent:1 0 [ ]
k19 role c26:topic:1 0 [ ]
k19 role c31:agent:1 0 [ ]
k19 role c34:theme:1 0 [ ]
k19 role c21:theme:-1 0 [ ]
k19 role c33:agent:-1 0 [ ]
k20 concept c36:fruit:0 0 [ ]
k20 referent k20:p3 0 [ ]
k21 concept c42:tree:0 0 [ ]
k22 concept c43:bush:0 0 [ ]
k23 concept c49:seed:0 0 [ ]
k23 event c50:contain:0 0 [ ]
k23 referent k23:e8 0 [ ]
k23 referent k23:x19 0 [ ]
k23 role c52:theme:1 0 [ ]
k23 role c51:agent:-1 0 [ ]
k24 concept c53:stone:0 0 [ ]
k24 concept c57:substance:0 0 [ ]
k24 concept c58:person:1 0 [ ]
k24 event c55:cover:0 0 [ ]
k24 event c59:can:0 0 [ ]
k24 event c67:contain:0 0 [ ]
k24 referent k24:e10 0 [ ]
k24 referent k24:e11 0 [ ]
k24 referent k24:e9 0 [ ]
k24 referent k24:p4 0 [ ]
k24 referent k24:x21 0 [ ]
k24 referent k24:x23 0 [ ]
k24 relation c54:equality 0 [ ]
k24 role c60:agent:1 0 [ ]
k24 role c61:topic:1 0 [ ]
k24 role c66:agent:1 0 [ ]
k24 role c69:theme:1 0 [ ]
k24 role c56:theme:-1 0 [ ]
k24 role c68:agent:-1 0 [ ]
c0:or antecedent k15 0 [ ]
c0:or consequent k20 0 [ ]
c10:equality ext k15:p1:x2 0 [ ]
c12:equality ext k15:p1:x6 0 [ ]
c13:or antecedent k18 0 [ ]
c13:or consequent k19 0 [ ]
c17:theme:1 ext k18:x7 0 [ ]
c19:equality ext k19:x9 0 [ ]
c25:agent:1 ext k19:x11 0 [ ]
c26:topic:1 ext k19:p2 0 [ ]
c27:equality ext k19:p2:x12 0 [ ]
c29:agent:1 ext k19:x11 0 [ ]
c3:equality ext k15:p1:x3 0 [ ]
c34:theme:1 ext k19:x8 0 [ ]
c35:equality ext k15:p1:x5 0 [ ]
c38:equality ext k20:p3:x15 0 [ ]
c41:or antecedent k21 0 [ ]
c41:or consequent k22 0 [ ]
c45:equality ext k20:p3:x14 0 [ ]
c47:equality ext k20:p3:x18 0 [ ]
c48:or antecedent k23 0 [ ]
c48:or consequent k24 0 [ ]
c52:theme:1 ext k23:x19 0 [ ]
c54:equality ext k24:x21 0 [ ]
c6:or antecedent k16 0 [ ]
c6:or consequent k17 0 [ ]
c60:agent:1 ext k24:x23 0 [ ]
c61:topic:1 ext k24:p4 0 [ ]
c62:equality ext k24:p4:x24 0 [ ]
c64:agent:1 ext k24:x23 0 [ ]
c69:theme:1 ext k24:x20 0 [ ]
c70:equality ext k20:p3:x17 0 [ ]
k15:p1 binary c13:or 0 [ ]
k15:p1 binary c6:or 0 [ ]
k15:p1 concept c11:thing:12 0 [ ]
k15:p1 concept c2:thing:12 0 [ ]
k15:p1 event c4:grow:0 0 [ ]
k15:p1 referent k15:p1:e1 0 [ ]
k15:p1 referent k15:p1:x2 0 [ ]
k15:p1 referent k15:p1:x5 0 [ ]
k15:p1 relation c12:equality 0 [ ]
k15:p1 relation c3:equality 0 [ ]
k15:p1 relation c9:on:0 0 [ ]
k15:p1 role c5:agent:-1 0 [ ]
k19:p2 event c28:eat:0 0 [ ]
k19:p2 referent k19:p2:e6 0 [ ]
k19:p2 relation c27:equality 0 [ ]
k19:p2 role c29:agent:1 0 [ ]
k19:p2 role c30:theme:-1 0 [ ]
k20:p3 binary c41:or 0 [ ]
k20:p3 binary c48:or 0 [ ]
k20:p3 concept c37:thing:12 0 [ ]
k20:p3 concept c46:thing:12 0 [ ]
k20:p3 event c39:grow:0 0 [ ]
k20:p3 referent k20:p3:e7 0 [ ]
k20:p3 referent k20:p3:x14 0 [ ]
k20:p3 referent k20:p3:x17 0 [ ]
k20:p3 relation c38:equality 0 [ ]
k20:p3 relation c44:on:0 0 [ ]
k20:p3 relation c47:equality 0 [ ]
k20:p3 role c40:agent:-1 0 [ ]
k24:p4 event c63:eat:0 0 [ ]
k24:p4 referent k24:p4:e12 0 [ ]
k24:p4 relation c62:equality 0 [ ]
k24:p4 role c64:agent:1 0 [ ]
k24:p4 role c65:theme:-1 0 [ ]
c16:agent:-1 ext k18:e2 0 [ ]
c21:theme:-1 ext k19:e3 0 [ ]
c30:theme:-1 ext k19:p2:e6 0 [ ]
c33:agent:-1 ext k19:e5 0 [ ]
c40:agent:-1 ext k20:p3:e7 0 [ ]
c5:agent:-1 ext k15:p1:e1 0 [ ]
c51:agent:-1 ext k23:e8 0 [ ]
c56:theme:-1 ext k24:e9 0 [ ]
c65:theme:-1 ext k24:p4:e12 0 [ ]
c68:agent:-1 ext k24:e11 0 [ ]
c1:fruit:nam instance k15:x1 1 [ Fruit ]
k20:p3 surface k20:p3:e7 1 [ or ]
c40:agent:-1 int k20:p3:x15 1 [ ]
k20 referent k20:x13 1 [ a ]
c36:fruit:0 instance k20:x13 2 [ fruit ]
k15:p1 relation c10:equality 1 [ is ]
k15:p1 relation c35:equality 1 [ ]
k20:p3 relation c45:equality 1 [ ]
k20:p3 relation c70:equality 1 [ ]
c11:thing:12 instance k15:p1:x5 1 [ ]
c2:thing:12 instance k15:p1:x2 1 [ something ]
c37:thing:12 instance k20:p3:x14 1 [ ]
c46:thing:12 instance k20:p3:x17 1 [ ]
c10:equality int k15:x1 2 [ ]
c35:equality int k15:x1 3 [ ]
c45:equality int k20:x13 3 [ ]
c70:equality int k20:x13 4 [ ]
k15:p1 referent k15:p1:x3 1 [ which ]
c3:equality int k15:p1:x2 2 [ ]
c38:equality int k20:p3:x14 2 [ ]
k20:p3 referent k20:p3:x15 2 [ ]
c4:grow:0 instance k15:p1:e1 1 [ grows ]
c39:grow:0 instance k20:p3:e7 2 [ ]
c5:agent:-1 int k15:p1:x3 2 [ ]
c44:on:0 ext k20:p3:x16 1 [ ]
c9:on:0 ext k15:p1:x4 1 [ on ]
c9:on:0 int k15:p1:e1 2 [ ]
k15:p1 referent k15:p1:x4 2 [ a ]
k20:p3 referent k20:p3:x16 2 [ ]
c44:on:0 int k20:p3:e7 3 [ ]
c42:tree:0 instance k20:p3:x16 3 [ ]
c7:tree:0 instance k15:p1:x4 3 [ tree ]
k15:p1 function k15:p1:x4 4 [ or ]
k20:p3 function k20:p3:x16 4 [ ]
c43:bush:0 instance k20:p3:x16 5 [ ]
c8:bush:0 instance k15:p1:x4 5 [ bush ]
k24 surface k24:e11 1 [ and ]
c68:agent:-1 int k20:p3:x18 1 [ ]
k15:p1 referent k15:p1:x6 1 [ which ]
c12:equality int k15:p1:x5 2 [ ]
c47:equality int k20:p3:x17 2 [ ]
k20:p3 referent k20:p3:x18 2 [ ]
c15:contain:0 instance k18:e2 1 [ contains ]
c32:contain:0 instance k19:e5 1 [ ]
c50:contain:0 instance k23:e8 1 [ ]
c67:contain:0 instance k24:e11 2 [ ]
c16:agent:-1 int k15:p1:x6 2 [ ]
c33:agent:-1 int k15:p1:x6 3 [ ]
c51:agent:-1 int k20:p3:x18 3 [ ]
c14:seed:0 instance k18:x7 1 [ seeds ]
c49:seed:0 instance k23:x19 1 [ ]
c17:theme:1 int k18:e2 2 [ ]
c52:theme:1 int k23:e8 2 [ ]
k24 surface k24:e11 3 [ or ]
k19 referent k19:x8 1 [ a ]
k24 referent k24:x20 1 [ ]
c34:theme:1 int k19:e5 2 [ ]
c69:theme:1 int k24:e11 4 [ ]
c18:stone:0 instance k19:x8 2 [ stone ]
c53:stone:0 instance k24:x20 2 [ ]
c20:cover:0 instance k19:e3 1 [ covered ]
c55:cover:0 instance k24:e9 1 [ ]
c21:theme:-1 int k19:x9 1 [ ]
c56:theme:-1 int k24:x21 1 [ ]
c19:equality int k19:x8 3 [ ]
c54:equality int k24:x20 3 [ ]
c31:agent:1 ext k19:x10 1 [ by ]
c66:agent:1 ext k24:x22 1 [ ]
k19 referent k19:x10 2 [ a ]
k24 referent k24:x22 2 [ ]
c31:agent:1 int k19:e3 2 [ ]
c66:agent:1 int k24:e9 2 [ ]
c22:substance:0 instance k19:x10 3 [ substance ]
c57:substance:0 instance k24:x22 3 [ ]
c26:topic:1 int k19:e4 1 [ ]
c61:topic:1 int k24:e10 1 [ ]
k19:p2 referent k19:p2:x12 1 [ that ]
k24:p4 referent k24:p4:x24 1 [ ]
c27:equality int k19:x10 4 [ ]
c62:equality int k24:x22 4 [ ]
c23:person:1 instance k19:x11 1 [ you ]
c29:agent:1 int k19:p2:e6 1 [ ]
c58:person:1 instance k24:x23 1 [ ]
c64:agent:1 int k24:p4:e12 1 [ ]
c25:agent:1 int k19:e4 2 [ ]
c60:agent:1 int k24:e10 2 [ ]
k19:e4 main k15:p1 1 [ ]
k24:e10 main k20:p3 1 [ ]
c24:can:0 instance k19:e4 3 [ can ]
c59:can:0 instance k24:e10 3 [ ]
c28:eat:0 instance k19:p2:e6 2 [ eat ]
c63:eat:0 instance k24:p4:e12 2 [ ]
c30:theme:-1 int k19:p2:x12 2 [ ]
c65:theme:-1 int k24:p4:x24 2 [ ]
k24:p4 punctuation k24:p4:e12 3 [ . ]


!.
0.0050
0.01456
An asylum is a psychiatric hospital.
asylum NN psychiatric JJ hospital NN 
sem(1,[1001:[tok:'An',pos:'DT',lemma:an,namex:'O'],1002:[tok:asylum,pos:'NN',lemma:asylum,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:psychiatric,pos:'JJ',lemma:psychiatric,namex:'O'],1006:[tok:hospital,pos:'NN',lemma:hospital,namex:'O'],1007:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[1004]:E],[[1003]:eq(C,E),[1006]:pred(E,hospital,n,0),[1005]:pred(D,psychiatric,a,0),[]:rel(D,E,experiencer,0)])),[1002]:pred(C,asylum,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% An asylum is a psychiatric hospital . 
k2 concept c0:asylum:0 0 [ ]
k2 referent k2:p1 0 [ ]
c1:experiencer:-1 ext k2:p1:s1 0 [ ]
c4:equality ext k2:p1:x2 0 [ ]
k2:p1 attribute c2:psychiatric:0 0 [ ]
k2:p1 concept c3:hospital:0 0 [ ]
k2:p1 referent k2:p1:s1 0 [ ]
k2:p1 role c1:experiencer:-1 0 [ ]
k2 referent k2:x1 1 [ An ]
c0:asylum:0 instance k2:x1 2 [ asylum ]
k2:p1 relation c4:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ a ]
c2:psychiatric:0 arg k2:p1:s1 1 [ psychiatric ]
c1:experiencer:-1 int k2:p1:x2 2 [ ]
c3:hospital:0 instance k2:p1:x2 3 [ hospital ]
c4:equality int k2:x1 3 [ ]
k2:p1 punctuation k2:p1:x2 4 [ . ]


!.
A monk is a member of a male religious community that is usually separated from the outside world.
monk NN member NN male JJ religious JJ community NN that WDT usually RB separated VBN outside JJ world NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:monk,pos:'NN',lemma:monk,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:member,pos:'NN',lemma:member,namex:'O'],1006:[tok:of,pos:'IN',lemma:of,namex:'O'],1007:[tok:a,pos:'DT',lemma:a,namex:'O'],1008:[tok:male,pos:'JJ',lemma:male,namex:'O'],1009:[tok:religious,pos:'JJ',lemma:religious,namex:'O'],1010:[tok:community,pos:'NN',lemma:community,namex:'O'],1011:[tok:that,pos:'WDT',lemma:that,namex:'O'],1012:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1013:[tok:usually,pos:'RB',lemma:usually,namex:'O'],1014:[tok:separated,pos:'VBN',lemma:separate,namex:'O'],1015:[tok:from,pos:'IN',lemma:from,namex:'O'],1016:[tok:the,pos:'DT',lemma:the,namex:'O'],1017:[tok:outside,pos:'JJ',lemma:outside,namex:'O'],1018:[tok:world,pos:'NN',lemma:world,namex:'O'],1019:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[1016]:C],[[1018]:pred(C,world,n,0),[1017]:pred(B,outside,a,0),[]:rel(B,C,experiencer,0)]),drs([[]:D,[1001]:E],[[]:prop(D,drs([[]:F,[1011]:G,[]:H,[]:I,[1007]:J,[1004]:K],[[1003]:eq(E,K),[1006]:rel(K,J,of,0),[1013]:pred(F,usually,r,0),[1015]:rel(F,C,from,0),[]:rel(F,G,theme,0),[1014]:pred(F,separate,v,0),[]:eq(J,G),[1010]:pred(J,community,n,0),[1009]:pred(H,religious,a,0),[]:rel(H,J,experiencer,0),[1008]:pred(I,male,a,0),[]:rel(I,J,experiencer,0),[1005]:pred(K,member,n,0)])),[1002]:pred(E,monk,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A monk is a member of a male religious community that is usually separated from the outside world . 
k3 concept c0:monk:0 0 [ ]
k3 referent k3:p1 0 [ ]
c10:experiencer:-1 ext k3:p1:s3 0 [ ]
c16:equality ext k3:p1:x2 0 [ ]
c2:experiencer:-1 ext k3:p1:s1 0 [ ]
c4:experiencer:-1 ext k3:p1:s2 0 [ ]
c7:equality ext k3:p1:x4 0 [ ]
k3:p1 attribute c11:outside:0 0 [ ]
k3:p1 attribute c14:usually:0 0 [ ]
k3:p1 attribute c3:male:0 0 [ ]
k3:p1 attribute c5:religious:0 0 [ ]
k3:p1 concept c1:member:0 0 [ ]
k3:p1 concept c12:world:0 0 [ ]
k3:p1 concept c6:community:0 0 [ ]
k3:p1 event c8:separate:0 0 [ ]
k3:p1 referent k3:p1:e1 0 [ ]
k3:p1 referent k3:p1:s1 0 [ ]
k3:p1 referent k3:p1:s2 0 [ ]
k3:p1 referent k3:p1:s3 0 [ ]
k3:p1 relation c13:from:0 0 [ ]
k3:p1 relation c15:of:0 0 [ ]
k3:p1 relation c7:equality 0 [ ]
k3:p1 role c10:experiencer:-1 0 [ ]
k3:p1 role c2:experiencer:-1 0 [ ]
k3:p1 role c4:experiencer:-1 0 [ ]
k3:p1 role c9:theme:-1 0 [ ]
c9:theme:-1 ext k3:p1:e1 0 [ ]
k3 referent k3:x1 1 [ A ]
c0:monk:0 instance k3:x1 2 [ monk ]
k3:p1 relation c16:equality 1 [ is ]
k3:p1 referent k3:p1:x2 1 [ a ]
c16:equality int k3:x1 3 [ ]
c1:member:0 instance k3:p1:x2 2 [ member ]
c15:of:0 ext k3:p1:x3 1 [ of ]
k3:p1 referent k3:p1:x3 2 [ a ]
c15:of:0 int k3:p1:x2 3 [ ]
c3:male:0 arg k3:p1:s1 1 [ male ]
c2:experiencer:-1 int k3:p1:x3 3 [ ]
c5:religious:0 arg k3:p1:s2 1 [ religious ]
c4:experiencer:-1 int k3:p1:x3 4 [ ]
c6:community:0 instance k3:p1:x3 5 [ community ]
k3:p1 referent k3:p1:x4 1 [ that ]
c7:equality int k3:p1:x3 6 [ ]
k3:p1 surface k3:p1:e1 1 [ is ]
c9:theme:-1 int k3:p1:x4 2 [ ]
c14:usually:0 arg k3:p1:e1 2 [ usually ]
c8:separate:0 instance k3:p1:e1 3 [ separated ]
c13:from:0 ext k3:p1:x5 1 [ from ]
k3:p1 referent k3:p1:x5 2 [ the ]
c11:outside:0 arg k3:p1:s3 1 [ outside ]
c10:experiencer:-1 int k3:p1:x5 3 [ ]
c12:world:0 instance k3:p1:x5 4 [ world ]
c13:from:0 int k3:p1:e1 4 [ ]
k3:p1 punctuation k3:p1:x5 5 [ . ]


!.
0.0375
0.0175
A graveyard is an area of land, sometimes near a church, where dead people are buried.
graveyard NN area NN land NN sometimes RB church NN where WRB dead JJ people NNS are VBP buried VBN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:graveyard,pos:'NN',lemma:graveyard,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:an,pos:'DT',lemma:an,namex:'O'],1005:[tok:area,pos:'NN',lemma:area,namex:'O'],1006:[tok:of,pos:'IN',lemma:of,namex:'O'],1007:[tok:land,pos:'NN',lemma:land,namex:'O'],1008:[tok: (','),pos: (','),lemma: (','),namex:'O'],1009:[tok:sometimes,pos:'RB',lemma:sometimes,namex:'O'],1010:[tok:near,pos:'IN',lemma:near,namex:'O'],1011:[tok:a,pos:'DT',lemma:a,namex:'O'],1012:[tok:church,pos:'NN',lemma:church,namex:'O'],1013:[tok: (','),pos: (','),lemma: (','),namex:'O'],1014:[tok:where,pos:'WRB',lemma:where,namex:'O'],1015:[tok:dead,pos:'JJ',lemma:dead,namex:'O'],1016:[tok:people,pos:'NNS',lemma:people,namex:'O'],1017:[tok:are,pos:'VBP',lemma:be,namex:'O'],1018:[tok:buried,pos:'VBN',lemma:bury,namex:'O'],1019:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1011]:C,[]:D,[1001]:E],[[1010]:rel(D,C,near,0),[]:prop(B,drs([[]:F,[]:G,[]:H],[[]:rel(F,H,theme,0),[1018]:pred(F,bury,v,0),[1016]:pred(H,people,n,0),[1015]:pred(G,dead,a,0),[]:rel(G,H,experiencer,0)])),[1014]:rel(C,B,where,0),[1012]:pred(C,church,n,0),[1009]:pred(D,sometimes,r,0),[]:prop(D,drs([[]:I,[1004]:J],[[1003]:eq(E,J),[1006]:rel(J,I,of,0),[1007]:pred(I,land,n,0),[1005]:pred(J,area,n,0)])),[1002]:pred(E,graveyard,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A graveyard is an area of land , sometimes near a church , where dead people are buried . 
k3 attribute c5:sometimes:0 0 [ ]
k3 concept c0:graveyard:0 0 [ ]
k3 concept c6:church:0 0 [ ]
k3 referent k3:p1 0 [ ]
k3 referent k3:p2 0 [ ]
k3 relation c13:near:0 0 [ ]
k3 relation c7:where:0 0 [ ]
c12:theme:1 ext k3:p2:x5 0 [ ]
c4:equality ext k3:p1:x3 0 [ ]
c8:experiencer:-1 ext k3:p2:s1 0 [ ]
k3:p1 concept c1:area:0 0 [ ]
k3:p1 concept c2:land:0 0 [ ]
k3:p1 referent k3:p1:x4 0 [ ]
k3:p1 relation c3:of:0 0 [ ]
k3:p2 attribute c9:dead:0 0 [ ]
k3:p2 concept c10:people:0 0 [ ]
k3:p2 event c11:bury:0 0 [ ]
k3:p2 referent k3:p2:e1 0 [ ]
k3:p2 referent k3:p2:s1 0 [ ]
k3:p2 referent k3:p2:x5 0 [ ]
k3:p2 role c12:theme:1 0 [ ]
k3:p2 role c8:experiencer:-1 0 [ ]
k3 referent k3:x1 1 [ A ]
c0:graveyard:0 instance k3:x1 2 [ graveyard ]
k3:p1 relation c4:equality 1 [ is ]
k3:p1 referent k3:p1:x3 1 [ an ]
c4:equality int k3:x1 3 [ ]
c1:area:0 instance k3:p1:x3 2 [ area ]
c3:of:0 ext k3:p1:x4 1 [ of ]
c2:land:0 instance k3:p1:x4 2 [ land ]
c3:of:0 int k3:p1:x3 3 [ ]
k3:p1 punctuation k3:p1:x4 3 [ , ]
c5:sometimes:0 arg k3:p1 1 [ sometimes ]
c13:near:0 ext k3:x2 1 [ near ]
k3 referent k3:x2 2 [ a ]
c6:church:0 instance k3:x2 3 [ church ]
c13:near:0 int k3:p1 2 [ ]
k3 punctuation k3:x2 4 [ , ]
c7:where:0 ext k3:p2 1 [ where ]
c8:experiencer:-1 int k3:p2:x5 1 [ ]
c9:dead:0 arg k3:p2:s1 1 [ dead ]
c12:theme:1 int k3:p2:e1 1 [ ]
c10:people:0 instance k3:p2:x5 2 [ people ]
k3:p2 surface k3:p2:e1 2 [ are ]
k3:p2:e1 main k3:p2 2 [ ]
c11:bury:0 instance k3:p2:e1 3 [ buried ]
k3 punctuation k3:p2 3 [ . ]
c7:where:0 int k3:x2 5 [ ]


!.
If you describe a place or situation as a madhouse,you mean that it is full of confusion and noise.
you PRP describe VBP place NN situation NN madhouse NN mean VBP it PRP full JJ confusion NN noise NN 
sem(1,[1001:[tok:'If',pos:'IN',lemma:if,namex:'O'],1002:[tok:you,pos:'PRP',lemma:you,namex:'O'],1003:[tok:describe,pos:'VBP',lemma:describe,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:place,pos:'NN',lemma:place,namex:'O'],1007:[tok:situation,pos:'NN',lemma:situation,namex:'O'],1008:[tok: (as),pos:'IN',lemma: (as),namex:'O'],1009:[tok:a,pos:'DT',lemma:a,namex:'O'],1010:[tok:madhouse,pos:'NN',lemma:madhouse,namex:'O'],1011:[tok:',you',pos:'NN',lemma:',you',namex:'O'],1012:[tok:mean,pos:'VBP',lemma:mean,namex:'O'],1013:[tok:that,pos:'IN',lemma:that,namex:'O'],1014:[tok:it,pos:'PRP',lemma:it,namex:'O'],1015:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1016:[tok:full,pos:'JJ',lemma:full,namex:'O'],1017:[tok:of,pos:'IN',lemma:of,namex:'O'],1018:[tok:confusion,pos:'NN',lemma:confusion,namex:'O'],1019:[tok:and,pos:'CC',lemma:and,namex:'O'],1020:[tok:noise,pos:'NN',lemma:noise,namex:'O'],1021:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[]:C],[[1014]:pred(B,thing,n,12),[1002]:pred(C,person,n,1)]),drs([],[[1001]:imp(drs([[]:D,[1004]:E],[[]:rel(D,E,theme,0),[]:rel(D,C,agent,0),[1003]:pred(D,describe,v,0),[1005]:pred(E,place,n,0)]),drs([[]:F,[1013]:G,[]:H,[1009]:I,[]:J],[[]:rel(F,G,topic,0),[]:rel(F,J,agent,0),[1012]:pred(F,mean,v,0),[]:prop(G,drs([[]:K,[]:L,[1019]:M,[]:N],[[1017]:rel(N,M,of,0),[]:rel(K,M,subset_of,1),[1020]:pred(K,noise,n,0),[]:rel(L,M,subset_of,1),[1018]:pred(L,confusion,n,0),[]:rel(N,B,experiencer,0),[1016]:pred(N,full,a,0)])),[1008]:rel(J,I,as,0),[1011]:pred(I,',you',n,0),[]:rel(I,H,of,0),[1010]:pred(H,madhouse,n,0),[1007]:pred(J,situation,n,0)]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% If you describe a place situation as a madhouse ,you mean that it is full of confusion and noise . 
k4 binary c0:imp 0 [ ]
k5 concept c1:person:1 0 [ ]
k5 concept c2:place:0 0 [ ]
k5 event c3:describe:0 0 [ ]
k5 referent k5:e1 0 [ ]
k5 referent k5:x1 0 [ ]
k5 role c4:agent:1 0 [ ]
k5 role c5:theme:1 0 [ ]
k6 concept c6:situation:0 0 [ ]
k6 concept c7:madhouse:0 0 [ ]
k6 concept c9:,you:0 0 [ ]
k6 event c19:mean:0 0 [ ]
k6 referent k6:e2 0 [ ]
k6 referent k6:x3 0 [ ]
k6 referent k6:x5 0 [ ]
k6 relation c10:as:0 0 [ ]
k6 relation c8:of:0 0 [ ]
k6 role c20:agent:1 0 [ ]
k6 role c21:topic:1 0 [ ]
c0:imp antecedent k5 0 [ ]
c0:imp consequent k6 0 [ ]
c13:experiencer:1 ext k6:p1:x6 0 [ ]
c15:superset_of:1 ext k6:p1:x8 0 [ ]
c17:superset_of:1 ext k6:p1:x9 0 [ ]
c20:agent:1 ext k6:x3 0 [ ]
c21:topic:1 ext k6:p1 0 [ ]
c4:agent:1 ext k5:x1 0 [ ]
c5:theme:1 ext k5:x2 0 [ ]
c8:of:0 ext k6:x5 0 [ ]
k6:p1 attribute c12:full:0 0 [ ]
k6:p1 concept c11:thing:12 0 [ ]
k6:p1 concept c14:confusion:0 0 [ ]
k6:p1 concept c16:noise:0 0 [ ]
k6:p1 referent k6:p1:s1 0 [ ]
k6:p1 referent k6:p1:x6 0 [ ]
k6:p1 referent k6:p1:x8 0 [ ]
k6:p1 referent k6:p1:x9 0 [ ]
k6:p1 relation c15:superset_of:1 0 [ ]
k6:p1 relation c17:superset_of:1 0 [ ]
k6:p1 relation c18:of:0 0 [ ]
k6:p1 role c13:experiencer:1 0 [ ]
k5 surface k5:e1 1 [ If ]
c1:person:1 instance k5:x1 1 [ you ]
c4:agent:1 int k5:e1 2 [ ]
k5:e1 main k4 1 [ ]
c3:describe:0 instance k5:e1 3 [ describe ]
k5 referent k5:x2 1 [ a ]
c5:theme:1 int k5:e1 4 [ ]
c2:place:0 instance k5:x2 2 [ place ]
c20:agent:1 int k6:e2 1 [ ]
c6:situation:0 instance k6:x3 1 [ situation ]
c10:as:0 ext k6:x4 1 [ as ]
k6 referent k6:x4 2 [ a ]
c10:as:0 int k6:x3 2 [ ]
c7:madhouse:0 instance k6:x5 1 [ madhouse ]
c8:of:0 int k6:x4 3 [ ]
c9:,you:0 instance k6:x4 4 [ ,you ]
c19:mean:0 instance k6:e2 2 [ mean ]
k6:e2 main k4 2 [ ]
k6 referent k6:p1 1 [ that ]
c21:topic:1 int k6:e2 3 [ ]
c11:thing:12 instance k6:p1:x6 1 [ it ]
c13:experiencer:1 int k6:p1:s1 1 [ ]
k6:p1 surface k6:p1:s1 2 [ is ]
k6:p1:s1 main k6:p1 2 [ ]
c12:full:0 arg k6:p1:s1 3 [ full ]
c18:of:0 ext k6:p1:x7 1 [ of ]
c14:confusion:0 instance k6:p1:x8 1 [ confusion ]
c15:superset_of:1 int k6:p1:x7 2 [ ]
k6:p1 referent k6:p1:x7 3 [ and ]
c18:of:0 int k6:p1:s1 4 [ ]
c16:noise:0 instance k6:p1:x9 1 [ noise ]
k6:p1 punctuation k6:p1:x9 2 [ . ]
c17:superset_of:1 int k6:p1:x7 4 [ ]


!.
0.0225
0.1339
Glass is a hard transparent substance that is used to make things such as windows and bottles.
'Glass' NNP hard JJ transparent NN substance NN that WDT used VBN make VB things NNS such JJ windows NNS bottles NNS 
sem(1,[1001:[tok:'Glass',pos:'NNP',lemma:'Glass',namex:'O'],1002:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1003:[tok:a,pos:'DT',lemma:a,namex:'O'],1004:[tok:hard,pos:'JJ',lemma:hard,namex:'O'],1005:[tok:transparent,pos:'NN',lemma:transparent,namex:'O'],1006:[tok:substance,pos:'NN',lemma:substance,namex:'O'],1007:[tok:that,pos:'WDT',lemma:that,namex:'O'],1008:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1009:[tok:used,pos:'VBN',lemma:use,namex:'O'],1010:[tok:to,pos:'TO',lemma:to,namex:'O'],1011:[tok:make,pos:'VB',lemma:make,namex:'O'],1012:[tok:things,pos:'NNS',lemma:thing,namex:'O'],1013:[tok:such,pos:'JJ',lemma:such,namex:'O'],1014:[tok: (as),pos:'IN',lemma: (as),namex:'O'],1015:[tok:windows,pos:'NNS',lemma:window,namex:'O'],1016:[tok:and,pos:'CC',lemma:and,namex:'O'],1017:[tok:bottles,pos:'NNS',lemma:bottle,namex:'O'],1018:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B],[[1001]:named(B,glass,nam,nam)]),drs([[]:C],[[]:prop(C,drs([[]:D,[1010]:E,[1007]:F,[]:G,[]:H,[1003]:I],[[1002]:eq(B,I),[]:rel(D,E,recipient,0),[]:rel(D,F,topic,0),[1009]:pred(D,use,v,0),[]:prop(E,drs([[]:J,[]:K,[]:L,[1016]:M,[]:N],[[]:rel(J,N,theme,0),[]:rel(J,F,agent,0),[1011]:pred(J,make,v,0),[1013]:pred(N,such,n,0),[1014]:rel(N,M,as,0),[]:rel(K,M,subset_of,1),[1017]:pred(K,bottle,n,0),[]:rel(L,M,subset_of,1),[1015]:pred(L,window,n,0),[1012]:pred(N,thing,n,0)])),[]:eq(I,F),[1006]:pred(I,substance,n,0),[]:rel(I,G,of,0),[1005]:pred(G,transparent,n,0),[1004]:pred(H,hard,a,0),[]:rel(H,I,experiencer,0)]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% Glass is a hard transparent substance that is used to make things such as windows and bottles . 
k4 named c0:glass:nam 0 [ ]
k4 referent k4:p1 0 [ ]
k4 referent k4:x1 0 [ ]
c1:experiencer:-1 ext k4:p1:s1 0 [ ]
c11:superset_of:1 ext (k4:p1):p2:x8 0 [ ]
c16:theme:1 ext (k4:p1):p2:x5 0 [ ]
c19:recipient:1 ext k4:p1:p2 0 [ ]
c20:equality ext k4:p1:x2 0 [ ]
c4:of:0 ext k4:p1:x3 0 [ ]
c6:equality ext k4:p1:x4 0 [ ]
c9:superset_of:1 ext (k4:p1):p2:x7 0 [ ]
k4:p1 attribute c2:hard:0 0 [ ]
k4:p1 concept c3:transparent:0 0 [ ]
k4:p1 concept c5:substance:0 0 [ ]
k4:p1 event c17:use:0 0 [ ]
k4:p1 referent k4:p1:e1 0 [ ]
k4:p1 referent k4:p1:s1 0 [ ]
k4:p1 referent k4:p1:x3 0 [ ]
k4:p1 relation c4:of:0 0 [ ]
k4:p1 relation c6:equality 0 [ ]
k4:p1 role c1:experiencer:-1 0 [ ]
k4:p1 role c19:recipient:1 0 [ ]
k4:p1 role c18:topic:-1 0 [ ]
k4:p1:p2 concept c10:bottle:0 0 [ ]
k4:p1:p2 concept c13:such:0 0 [ ]
k4:p1:p2 concept c7:thing:0 0 [ ]
k4:p1:p2 concept c8:window:0 0 [ ]
k4:p1:p2 event c14:make:0 0 [ ]
k4:p1:p2 referent (k4:p1):p2:e2 0 [ ]
k4:p1:p2 referent (k4:p1):p2:x5 0 [ ]
k4:p1:p2 referent (k4:p1):p2:x7 0 [ ]
k4:p1:p2 referent (k4:p1):p2:x8 0 [ ]
k4:p1:p2 relation c11:superset_of:1 0 [ ]
k4:p1:p2 relation c12:as:0 0 [ ]
k4:p1:p2 relation c9:superset_of:1 0 [ ]
k4:p1:p2 role c16:theme:1 0 [ ]
k4:p1:p2 role c15:agent:-1 0 [ ]
c15:agent:-1 ext (k4:p1):p2:e2 0 [ ]
c18:topic:-1 ext k4:p1:e1 0 [ ]
c0:glass:nam instance k4:x1 1 [ Glass ]
k4:p1 relation c20:equality 1 [ is ]
k4:p1 referent k4:p1:x2 1 [ a ]
c20:equality int k4:x1 2 [ ]
c2:hard:0 arg k4:p1:s1 1 [ hard ]
c1:experiencer:-1 int k4:p1:x2 2 [ ]
c3:transparent:0 instance k4:p1:x3 1 [ transparent ]
c4:of:0 int k4:p1:x2 3 [ ]
c5:substance:0 instance k4:p1:x2 4 [ substance ]
k4:p1 referent k4:p1:x4 1 [ that ]
c6:equality int k4:p1:x2 5 [ ]
k4:p1 surface k4:p1:e1 1 [ is ]
c18:topic:-1 int k4:p1:x4 2 [ ]
c17:use:0 instance k4:p1:e1 2 [ used ]
k4:p1 referent k4:p1:p2 1 [ to ]
c19:recipient:1 int k4:p1:e1 3 [ ]
c14:make:0 instance (k4:p1):p2:e2 1 [ make ]
c15:agent:-1 int k4:p1:x4 3 [ ]
c7:thing:0 instance (k4:p1):p2:x5 1 [ things ]
c16:theme:1 int (k4:p1):p2:e2 2 [ ]
c13:such:0 instance (k4:p1):p2:x5 2 [ such ]
c12:as:0 ext (k4:p1):p2:x6 1 [ as ]
c8:window:0 instance (k4:p1):p2:x7 1 [ windows ]
c9:superset_of:1 int (k4:p1):p2:x6 2 [ ]
c12:as:0 int (k4:p1):p2:x5 3 [ ]
k4:p1:p2 referent (k4:p1):p2:x6 3 [ and ]
c10:bottle:0 instance (k4:p1):p2:x8 1 [ bottles ]
k4:p1:p2 punctuation (k4:p1):p2:x8 2 [ . ]
c11:superset_of:1 int (k4:p1):p2:x6 4 [ ]


!.
A magician is a person who entertains people by doing magic tricks.
magician NN person NN who WP people NNS doing VBG magic JJ tricks NNS 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:magician,pos:'NN',lemma:magician,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:person,pos:'NN',lemma:person,namex:'O'],1006:[tok:who,pos:'WP',lemma:who,namex:'O'],1007:[tok:entertains,pos:'VBZ',lemma:entertain,namex:'O'],1008:[tok:people,pos:'NNS',lemma:people,namex:'O'],1009:[tok:by,pos:'IN',lemma:by,namex:'O'],1010:[tok:doing,pos:'VBG',lemma:do,namex:'O'],1011:[tok:magic,pos:'JJ',lemma:magic,namex:'O'],1012:[tok:tricks,pos:'NNS',lemma:trick,namex:'O'],1013:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[]:E,[]:F,[]:G,[]:H,[1006]:I,[1004]:J],[[1003]:eq(C,J),[1009]:rel(G,D,by,0),[]:rel(D,F,theme,0),[]:rel(D,I,agent,0),[1010]:pred(D,do,v,0),[1012]:pred(F,trick,n,0),[1011]:pred(E,magic,a,0),[]:rel(E,F,experiencer,0),[]:rel(G,H,theme,0),[]:rel(G,I,agent,0),[1007]:pred(G,entertain,v,0),[1008]:pred(H,people,n,0),[]:eq(J,I),[1005]:pred(J,person,n,0)])),[1002]:pred(C,magician,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A magician is a person who entertains people by doing magic tricks . 
k4 concept c0:magician:0 0 [ ]
k4 referent k4:p1 0 [ ]
c12:theme:1 ext k4:p1:x5 0 [ ]
c14:equality ext k4:p1:x2 0 [ ]
c2:equality ext k4:p1:x3 0 [ ]
c6:theme:1 ext k4:p1:x4 0 [ ]
c7:experiencer:-1 ext k4:p1:s1 0 [ ]
k4:p1 attribute c8:magic:0 0 [ ]
k4:p1 concept c1:person:0 0 [ ]
k4:p1 concept c3:people:0 0 [ ]
k4:p1 concept c9:trick:0 0 [ ]
k4:p1 event c10:do:0 0 [ ]
k4:p1 event c4:entertain:0 0 [ ]
k4:p1 referent k4:p1:e1 0 [ ]
k4:p1 referent k4:p1:e2 0 [ ]
k4:p1 referent k4:p1:s1 0 [ ]
k4:p1 referent k4:p1:x4 0 [ ]
k4:p1 referent k4:p1:x5 0 [ ]
k4:p1 relation c13:by:0 0 [ ]
k4:p1 relation c2:equality 0 [ ]
k4:p1 role c12:theme:1 0 [ ]
k4:p1 role c6:theme:1 0 [ ]
k4:p1 role c7:experiencer:-1 0 [ ]
k4:p1 role c11:agent:-1 0 [ ]
k4:p1 role c5:agent:-1 0 [ ]
c11:agent:-1 ext k4:p1:e2 0 [ ]
c5:agent:-1 ext k4:p1:e1 0 [ ]
k4 referent k4:x1 1 [ A ]
c0:magician:0 instance k4:x1 2 [ magician ]
k4:p1 relation c14:equality 1 [ is ]
k4:p1 referent k4:p1:x2 1 [ a ]
c14:equality int k4:x1 3 [ ]
c1:person:0 instance k4:p1:x2 2 [ person ]
k4:p1 referent k4:p1:x3 1 [ who ]
c2:equality int k4:p1:x2 3 [ ]
c4:entertain:0 instance k4:p1:e1 1 [ entertains ]
c5:agent:-1 int k4:p1:x3 2 [ ]
c3:people:0 instance k4:p1:x4 1 [ people ]
c6:theme:1 int k4:p1:e1 2 [ ]
c13:by:0 ext k4:p1:e2 1 [ by ]
c10:do:0 instance k4:p1:e2 2 [ doing ]
c13:by:0 int k4:p1:e1 3 [ ]
c11:agent:-1 int k4:p1:x3 3 [ ]
c7:experiencer:-1 int k4:p1:x5 1 [ ]
c8:magic:0 arg k4:p1:s1 1 [ magic ]
c9:trick:0 instance k4:p1:x5 2 [ tricks ]
c12:theme:1 int k4:p1:e2 3 [ ]
k4:p1 punctuation k4:p1:x5 3 [ . ]


!.
0.0075
0.0911
A boy is a child who will grow up to be a man.
boy NN child NN who WP grow VB up RP be VB man NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:boy,pos:'NN',lemma:boy,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:child,pos:'NN',lemma:child,namex:'O'],1006:[tok:who,pos:'WP',lemma:who,namex:'O'],1007:[tok:will,pos:'MD',lemma:will,namex:'O'],1008:[tok:grow,pos:'VB',lemma:grow,namex:'O'],1009:[tok:up,pos:'RP',lemma:up,namex:'O'],1010:[tok:to,pos:'TO',lemma:to,namex:'O'],1011:[tok:be,pos:'VB',lemma:be,namex:'O'],1012:[tok:a,pos:'DT',lemma:a,namex:'O'],1013:[tok:man,pos:'NN',lemma:man,namex:'O'],1014:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[]:E,[1006]:F,[1004]:G],[[1003]:eq(C,G),[]:prop(D,drs([[]:H,[1010]:I],[[1009]:pred(H,up,r,0),[]:rel(H,I,topic,0),[]:rel(H,F,agent,0),[1008]:pred(H,grow,v,0),[]:prop(I,drs([[]:J],[[]:prop(J,drs([[1012]:K],[[1011]:eq(F,K),[1013]:pred(K,man,n,0)]))]))])),[]:rel(E,D,topic,0),[]:rel(E,F,agent,0),[1007]:pred(E,will,v,0),[]:eq(G,F),[1005]:pred(G,child,n,0)])),[1002]:pred(C,boy,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A boy is a child who will grow up to be a man . 
k4 concept c0:boy:0 0 [ ]
k4 referent k4:p1 0 [ ]
c10:topic:1 ext (k4:p1):p2:p3 0 [ ]
c12:equality ext k4:p1:x2 0 [ ]
c2:equality ext k4:p1:x3 0 [ ]
c5:topic:1 ext k4:p1:p2 0 [ ]
c7:equality ext (((k4:p1):p2):p3):p4:x4 0 [ ]
k4:p1 concept c1:child:0 0 [ ]
k4:p1 event c3:will:0 0 [ ]
k4:p1 referent k4:p1:e1 0 [ ]
k4:p1 referent k4:p1:p2 0 [ ]
k4:p1 relation c2:equality 0 [ ]
k4:p1 role c5:topic:1 0 [ ]
k4:p1 role c4:agent:-1 0 [ ]
k4:p1:p2 attribute c11:up:0 0 [ ]
k4:p1:p2 event c8:grow:0 0 [ ]
k4:p1:p2 referent (k4:p1):p2:e2 0 [ ]
k4:p1:p2 role c10:topic:1 0 [ ]
k4:p1:p2 role c9:agent:-1 0 [ ]
(k4:p1):p2:p3 referent ((k4:p1):p2):p3:p4 0 [ ]
((k4:p1):p2):p3:p4 concept c6:man:0 0 [ ]
c4:agent:-1 ext k4:p1:e1 0 [ ]
c9:agent:-1 ext (k4:p1):p2:e2 0 [ ]
k4 referent k4:x1 1 [ A ]
c0:boy:0 instance k4:x1 2 [ boy ]
k4:p1 relation c12:equality 1 [ is ]
k4:p1 referent k4:p1:x2 1 [ a ]
c12:equality int k4:x1 3 [ ]
c1:child:0 instance k4:p1:x2 2 [ child ]
k4:p1 referent k4:p1:x3 1 [ who ]
c2:equality int k4:p1:x2 3 [ ]
c3:will:0 instance k4:p1:e1 1 [ will ]
c4:agent:-1 int k4:p1:x3 2 [ ]
c8:grow:0 instance (k4:p1):p2:e2 1 [ grow ]
c9:agent:-1 int k4:p1:x3 3 [ ]
c11:up:0 arg (k4:p1):p2:e2 2 [ up ]
k4:p1:p2 referent (k4:p1):p2:p3 1 [ to ]
c5:topic:1 int k4:p1:e1 2 [ ]
c10:topic:1 int (k4:p1):p2:e2 3 [ ]
((k4:p1):p2):p3:p4 relation c7:equality 1 [ be ]
((k4:p1):p2):p3:p4 referent (((k4:p1):p2):p3):p4:x4 1 [ a ]
c6:man:0 instance (((k4:p1):p2):p3):p4:x4 2 [ man ]
((k4:p1):p2):p3:p4 punctuation (((k4:p1):p2):p3):p4:x4 3 [ . ]
c7:equality int k4:p1:x3 4 [ ]


!.
A rooster is an adult male chicken.
rooster NN adult NN male NN chicken NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:rooster,pos:'NN',lemma:rooster,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:an,pos:'DT',lemma:an,namex:'O'],1005:[tok:adult,pos:'NN',lemma:adult,namex:'O'],1006:[tok:male,pos:'NN',lemma:male,namex:'O'],1007:[tok:chicken,pos:'NN',lemma:chicken,namex:'O'],1008:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[]:E,[1004]:F],[[1003]:eq(C,F),[1007]:pred(F,chicken,n,0),[]:rel(F,D,of,0),[1006]:pred(D,male,n,0),[]:rel(F,E,of,0),[1005]:pred(E,adult,n,0)])),[1002]:pred(C,rooster,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A rooster is an adult male chicken . 
k2 concept c0:rooster:0 0 [ ]
k2 referent k2:p1 0 [ ]
c2:of:0 ext k2:p1:x3 0 [ ]
c4:of:0 ext k2:p1:x4 0 [ ]
c6:equality ext k2:p1:x2 0 [ ]
k2:p1 concept c1:adult:0 0 [ ]
k2:p1 concept c3:male:0 0 [ ]
k2:p1 concept c5:chicken:0 0 [ ]
k2:p1 referent k2:p1:x3 0 [ ]
k2:p1 referent k2:p1:x4 0 [ ]
k2:p1 relation c2:of:0 0 [ ]
k2:p1 relation c4:of:0 0 [ ]
k2 referent k2:x1 1 [ A ]
c0:rooster:0 instance k2:x1 2 [ rooster ]
k2:p1 relation c6:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ an ]
c1:adult:0 instance k2:p1:x3 1 [ adult ]
c2:of:0 int k2:p1:x2 2 [ ]
c3:male:0 instance k2:p1:x4 1 [ male ]
c4:of:0 int k2:p1:x2 3 [ ]
c5:chicken:0 instance k2:p1:x2 4 [ chicken ]
c6:equality int k2:x1 3 [ ]
k2:p1 punctuation k2:p1:x2 5 [ . ]


!.
0.1075
0.2921
A cushion is a fabric case filled with soft material, which you put on a seat to make it more comfortable.
cushion NN fabric NN case NN filled VBN soft JJ material NN which WDT you PRP put VBP seat NN make VB it PRP more RBR comfortable JJ 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:cushion,pos:'NN',lemma:cushion,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:fabric,pos:'NN',lemma:fabric,namex:'O'],1006:[tok:case,pos:'NN',lemma:case,namex:'O'],1007:[tok:filled,pos:'VBN',lemma:fill,namex:'O'],1008:[tok:with,pos:'IN',lemma:with,namex:'O'],1009:[tok:soft,pos:'JJ',lemma:soft,namex:'O'],1010:[tok:material,pos:'NN',lemma:material,namex:'O'],1011:[tok: (','),pos: (','),lemma: (','),namex:'O'],1012:[tok:which,pos:'WDT',lemma:which,namex:'O'],1013:[tok:you,pos:'PRP',lemma:you,namex:'O'],1014:[tok:put,pos:'VBP',lemma:put,namex:'O'],1015:[tok:on,pos:'IN',lemma:on,namex:'O'],1016:[tok:a,pos:'DT',lemma:a,namex:'O'],1017:[tok:seat,pos:'NN',lemma:seat,namex:'O'],1018:[tok:to,pos:'TO',lemma:to,namex:'O'],1019:[tok:make,pos:'VB',lemma:make,namex:'O'],1020:[tok:it,pos:'PRP',lemma:it,namex:'O'],1021:[tok:more,pos:'RBR',lemma:more,namex:'O'],1022:[tok:comfortable,pos:'JJ',lemma:comfortable,namex:'O'],1023:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[]:C],[[1020]:pred(B,thing,n,12),[1013]:pred(C,person,n,1)]),drs([[]:D,[1001]:E],[[]:prop(D,drs([[1018]:F,[1016]:G,[]:H,[1012]:I,[]:J,[]:K,[]:L,[]:M,[]:N,[1004]:O],[[1003]:eq(E,O),[]:rel(H,F,for,0),[]:prop(F,drs([[]:P,[]:Q,[]:R],[[]:prop(P,drs([[]:S],[[1021]:pred(S,more,r,0),[]:rel(S,B,experiencer,0),[1022]:pred(S,comfortable,a,0)])),[]:rel(Q,P,recipient,0),[]:rel(Q,R,agent,0),[]:rel(Q,B,topic,0),[1019]:pred(Q,make,v,0)])),[1015]:rel(H,G,on,0),[1017]:pred(G,seat,n,0),[]:rel(H,I,theme,0),[]:rel(H,C,agent,0),[1014]:pred(H,put,v,0),[]:eq(O,I),[1008]:rel(L,K,with,0),[1010]:pred(K,material,n,0),[1009]:pred(J,soft,a,0),[]:rel(J,K,experiencer,0),[]:rel(L,M,theme,0),[1007]:pred(L,fill,v,0),[]:eq(O,M),[1006]:pred(O,case,n,0),[]:rel(O,N,of,0),[1005]:pred(N,fabric,n,0)])),[1002]:pred(E,cushion,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A cushion is a fabric case filled with soft material , which you put on a seat to make it more comfortable . 
k5 concept c0:cushion:0 0 [ ]
k5 referent k5:p1 0 [ ]
c12:equality ext k5:p1:x7 0 [ ]
c14:agent:1 ext k5:p1:x6 0 [ ]
c2:of:0 ext k5:p1:x3 0 [ ]
c20:topic:1 ext (k5:p1):p2:x10 0 [ ]
c21:agent:1 ext (k5:p1):p2:x9 0 [ ]
c21:agent:1 int (k5:p1):p2:e3 0 [ ]
c22:recipient:1 ext (k5:p1):p2:p3 0 [ ]
c24:experiencer:1 ext (k5:p1):p2:x10 0 [ ]
c26:for:0 ext k5:p1:p2 0 [ ]
c27:equality ext k5:p1:x2 0 [ ]
c4:equality ext k5:p1:x4 0 [ ]
c7:experiencer:-1 ext k5:p1:s1 0 [ ]
k5:p1 attribute c8:soft:0 0 [ ]
k5:p1 concept c1:fabric:0 0 [ ]
k5:p1 concept c11:person:1 0 [ ]
k5:p1 concept c16:seat:0 0 [ ]
k5:p1 concept c3:case:0 0 [ ]
k5:p1 concept c9:material:0 0 [ ]
k5:p1 event c13:put:0 0 [ ]
k5:p1 event c5:fill:0 0 [ ]
k5:p1 referent k5:p1:e1 0 [ ]
k5:p1 referent k5:p1:e2 0 [ ]
k5:p1 referent k5:p1:s1 0 [ ]
k5:p1 referent k5:p1:x3 0 [ ]
k5:p1 referent k5:p1:x4 0 [ ]
k5:p1 referent k5:p1:x5 0 [ ]
k5:p1 referent k5:p1:x6 0 [ ]
k5:p1 relation c10:with:0 0 [ ]
k5:p1 relation c12:equality 0 [ ]
k5:p1 relation c17:on:0 0 [ ]
k5:p1 relation c2:of:0 0 [ ]
k5:p1 relation c26:for:0 0 [ ]
k5:p1 relation c4:equality 0 [ ]
k5:p1 role c14:agent:1 0 [ ]
k5:p1 role c7:experiencer:-1 0 [ ]
k5:p1 role c15:theme:-1 0 [ ]
k5:p1 role c6:theme:-1 0 [ ]
k5:p1:p2 concept c18:thing:12 0 [ ]
k5:p1:p2 event c19:make:0 0 [ ]
k5:p1:p2 referent (k5:p1):p2:e3 0 [ ]
k5:p1:p2 referent (k5:p1):p2:p3 0 [ ]
k5:p1:p2 referent (k5:p1):p2:x10 0 [ ]
k5:p1:p2 referent (k5:p1):p2:x9 0 [ ]
k5:p1:p2 role c20:topic:1 0 [ ]
k5:p1:p2 role c21:agent:1 0 [ ]
k5:p1:p2 role c22:recipient:1 0 [ ]
(k5:p1):p2:p3 attribute c23:comfortable:0 0 [ ]
(k5:p1):p2:p3 attribute c25:more:0 0 [ ]
(k5:p1):p2:p3 referent ((k5:p1):p2):p3:s2 0 [ ]
(k5:p1):p2:p3 role c24:experiencer:1 0 [ ]
c15:theme:-1 ext k5:p1:e2 0 [ ]
c6:theme:-1 ext k5:p1:e1 0 [ ]
k5 referent k5:x1 1 [ A ]
c0:cushion:0 instance k5:x1 2 [ cushion ]
k5:p1 relation c27:equality 1 [ is ]
k5:p1 referent k5:p1:x2 1 [ a ]
c27:equality int k5:x1 3 [ ]
c1:fabric:0 instance k5:p1:x3 1 [ fabric ]
c2:of:0 int k5:p1:x2 2 [ ]
c3:case:0 instance k5:p1:x2 3 [ case ]
c5:fill:0 instance k5:p1:e1 1 [ filled ]
c6:theme:-1 int k5:p1:x4 1 [ ]
c4:equality int k5:p1:x2 4 [ ]
c10:with:0 ext k5:p1:x5 1 [ with ]
c8:soft:0 arg k5:p1:s1 1 [ soft ]
c7:experiencer:-1 int k5:p1:x5 2 [ ]
c9:material:0 instance k5:p1:x5 3 [ material ]
c10:with:0 int k5:p1:e1 2 [ ]
k5:p1 punctuation k5:p1:x5 4 [ , ]
k5:p1 referent k5:p1:x7 1 [ which ]
c12:equality int k5:p1:x2 5 [ ]
c11:person:1 instance k5:p1:x6 1 [ you ]
c14:agent:1 int k5:p1:e2 1 [ ]
c13:put:0 instance k5:p1:e2 2 [ put ]
c15:theme:-1 int k5:p1:x7 2 [ ]
c17:on:0 ext k5:p1:x8 1 [ on ]
k5:p1 referent k5:p1:x8 2 [ a ]
c17:on:0 int k5:p1:e2 3 [ ]
c16:seat:0 instance k5:p1:x8 3 [ seat ]
k5:p1 referent k5:p1:p2 1 [ to ]
c26:for:0 int k5:p1:e2 4 [ ]
c19:make:0 instance (k5:p1):p2:e3 1 [ make ]
(k5:p1):p2:e3 main k5:p1:p2 2 [ ]
c18:thing:12 instance (k5:p1):p2:x10 1 [ it ]
c24:experiencer:1 int ((k5:p1):p2):p3:s2 1 [ ]
c20:topic:1 int (k5:p1):p2:e3 2 [ ]
c25:more:0 arg ((k5:p1):p2):p3:s2 2 [ more ]
((k5:p1):p2):p3:s2 main (k5:p1):p2:p3 1 [ ]
c23:comfortable:0 arg ((k5:p1):p2):p3:s2 3 [ comfortable ]
k5:p1:p2 punctuation (k5:p1):p2:p3 2 [ . ]
c22:recipient:1 int (k5:p1):p2:e3 3 [ ]


!.
A jewel is a precious stone used to decorate valuable things that you wear, such as rings or necklaces.
jewel NN precious JJ stone NN used VBN decorate VB valuable JJ things NNS you PRP wear VBP such JJ rings NNS necklaces NNS 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:jewel,pos:'NN',lemma:jewel,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:precious,pos:'JJ',lemma:precious,namex:'O'],1006:[tok:stone,pos:'NN',lemma:stone,namex:'O'],1007:[tok:used,pos:'VBN',lemma:use,namex:'O'],1008:[tok:to,pos:'TO',lemma:to,namex:'O'],1009:[tok:decorate,pos:'VB',lemma:decorate,namex:'O'],1010:[tok:valuable,pos:'JJ',lemma:valuable,namex:'O'],1011:[tok:things,pos:'NNS',lemma:thing,namex:'O'],1012:[tok:that,pos:'IN',lemma:that,namex:'O'],1013:[tok:you,pos:'PRP',lemma:you,namex:'O'],1014:[tok:wear,pos:'VBP',lemma:wear,namex:'O'],1015:[tok: (','),pos: (','),lemma: (','),namex:'O'],1016:[tok:such,pos:'JJ',lemma:such,namex:'O'],1017:[tok: (as),pos:'IN',lemma: (as),namex:'O'],1018:[tok:rings,pos:'NNS',lemma:ring,namex:'O'],1019:[tok:or,pos:'CC',lemma:or,namex:'O'],1020:[tok:necklaces,pos:'NNS',lemma:necklace,namex:'O'],1021:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B],[[1013]:pred(B,person,n,1)]),drs([[]:C,[1001]:D],[[]:prop(C,drs([[]:E,[1008]:F,[]:G,[]:H,[1004]:I],[[1019]:or(drs([[]:J],[[1003]:eq(D,I),[1016]:pred(I,such,n,0),[1017]:rel(I,J,as,0),[1018]:pred(J,ring,n,0)]),drs([[]:K],[[1003]:eq(D,I),[1016]:pred(I,such,n,0),[1017]:rel(I,K,as,0),[1020]:pred(K,necklace,n,0)])),[]:rel(E,F,recipient,0),[]:rel(E,G,topic,0),[1007]:pred(E,use,v,0),[]:prop(F,drs([[]:L,[]:M,[1012]:N,[]:O,[]:P],[[]:rel(L,P,theme,0),[]:rel(L,G,agent,0),[1009]:pred(L,decorate,v,0),[]:rel(M,N,theme,0),[]:rel(M,B,agent,0),[1014]:pred(M,wear,v,0),[]:eq(P,N),[1011]:pred(P,thing,n,0),[1010]:pred(O,valuable,a,0),[]:rel(O,P,experiencer,0)])),[]:eq(I,G),[1006]:pred(I,stone,n,0),[1005]:pred(H,precious,a,0),[]:rel(H,I,experiencer,0)])),[1002]:pred(D,jewel,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A jewel is a precious stone used to decorate valuable things that you wear , such as rings or necklaces . 
k5 concept c0:jewel:0 0 [ ]
k5 referent k5:p1 0 [ ]
k6 concept c20:ring:0 0 [ ]
k6 concept c22:such:0 0 [ ]
k6 referent k6:x7 0 [ ]
k6 relation c21:as:0 0 [ ]
k7 concept c24:necklace:0 0 [ ]
k7 concept c26:such:0 0 [ ]
k7 referent k7:x8 0 [ ]
k7 relation c25:as:0 0 [ ]
c1:experiencer:-1 ext k5:p1:s1 0 [ ]
c11:agent:1 ext (k5:p1):p2:x5 0 [ ]
c15:theme:1 ext (k5:p1):p2:x4 0 [ ]
c18:recipient:1 ext k5:p1:p2 0 [ ]
c19:or antecedent k6 0 [ ]
c19:or consequent k7 0 [ ]
c23:equality ext k5:p1:x2 0 [ ]
c27:equality ext k5:p1:x2 0 [ ]
c4:equality ext k5:p1:x3 0 [ ]
c5:experiencer:-1 ext (k5:p1):p2:s2 0 [ ]
c9:equality ext (k5:p1):p2:x6 0 [ ]
k5:p1 attribute c2:precious:0 0 [ ]
k5:p1 binary c19:or 0 [ ]
k5:p1 concept c3:stone:0 0 [ ]
k5:p1 event c16:use:0 0 [ ]
k5:p1 referent k5:p1:e1 0 [ ]
k5:p1 referent k5:p1:s1 0 [ ]
k5:p1 referent k5:p1:x3 0 [ ]
k5:p1 relation c4:equality 0 [ ]
k5:p1 role c1:experiencer:-1 0 [ ]
k5:p1 role c18:recipient:1 0 [ ]
k5:p1 role c17:topic:-1 0 [ ]
k5:p1:p2 attribute c6:valuable:0 0 [ ]
k5:p1:p2 concept c7:thing:0 0 [ ]
k5:p1:p2 concept c8:person:1 0 [ ]
k5:p1:p2 event c10:wear:0 0 [ ]
k5:p1:p2 event c13:decorate:0 0 [ ]
k5:p1:p2 referent (k5:p1):p2:e2 0 [ ]
k5:p1:p2 referent (k5:p1):p2:e3 0 [ ]
k5:p1:p2 referent (k5:p1):p2:s2 0 [ ]
k5:p1:p2 referent (k5:p1):p2:x4 0 [ ]
k5:p1:p2 referent (k5:p1):p2:x5 0 [ ]
k5:p1:p2 relation c9:equality 0 [ ]
k5:p1:p2 role c11:agent:1 0 [ ]
k5:p1:p2 role c15:theme:1 0 [ ]
k5:p1:p2 role c5:experiencer:-1 0 [ ]
k5:p1:p2 role c12:theme:-1 0 [ ]
k5:p1:p2 role c14:agent:-1 0 [ ]
c12:theme:-1 ext (k5:p1):p2:e2 0 [ ]
c14:agent:-1 ext (k5:p1):p2:e3 0 [ ]
c17:topic:-1 ext k5:p1:e1 0 [ ]
k5 referent k5:x1 1 [ A ]
c0:jewel:0 instance k5:x1 2 [ jewel ]
k6 relation c23:equality 1 [ is ]
k7 relation c27:equality 1 [ ]
k5:p1 referent k5:p1:x2 1 [ a ]
c23:equality int k5:x1 3 [ ]
c27:equality int k5:x1 4 [ ]
c2:precious:0 arg k5:p1:s1 1 [ precious ]
c1:experiencer:-1 int k5:p1:x2 2 [ ]
c3:stone:0 instance k5:p1:x2 3 [ stone ]
c16:use:0 instance k5:p1:e1 1 [ used ]
c17:topic:-1 int k5:p1:x3 1 [ ]
k5:p1 referent k5:p1:p2 1 [ to ]
c18:recipient:1 int k5:p1:e1 2 [ ]
c13:decorate:0 instance (k5:p1):p2:e3 1 [ decorate ]
c14:agent:-1 int k5:p1:x3 2 [ ]
c4:equality int k5:p1:x2 4 [ ]
c5:experiencer:-1 int (k5:p1):p2:x4 1 [ ]
c6:valuable:0 arg (k5:p1):p2:s2 1 [ valuable ]
c15:theme:1 int (k5:p1):p2:e3 2 [ ]
c7:thing:0 instance (k5:p1):p2:x4 2 [ things ]
k5:p1:p2 referent (k5:p1):p2:x6 1 [ that ]
c9:equality int (k5:p1):p2:x4 3 [ ]
c11:agent:1 int (k5:p1):p2:e2 1 [ ]
c8:person:1 instance (k5:p1):p2:x5 1 [ you ]
c10:wear:0 instance (k5:p1):p2:e2 2 [ wear ]
c12:theme:-1 int (k5:p1):p2:x6 2 [ ]
k5:p1:p2 punctuation (k5:p1):p2:e2 3 [ , ]
c22:such:0 instance k5:p1:x2 5 [ such ]
c26:such:0 instance k5:p1:x2 6 [ ]
c21:as:0 ext k6:x7 1 [ as ]
c25:as:0 ext k7:x8 1 [ ]
c20:ring:0 instance k6:x7 2 [ rings ]
c21:as:0 int k5:p1:x2 7 [ ]
k5:p1:p2 surface (k5:p1):p2:e2 4 [ or ]
c24:necklace:0 instance k7:x8 2 [ necklaces ]
k7 punctuation k7:x8 3 [ . ]
c25:as:0 int k5:p1:x2 8 [ ]


!.
0.0525
0.1745
A monk is a member of a male religious community that is usually separated from the outside world.
monk NN member NN male JJ religious JJ community NN that WDT usually RB separated VBN outside JJ world NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:monk,pos:'NN',lemma:monk,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:member,pos:'NN',lemma:member,namex:'O'],1006:[tok:of,pos:'IN',lemma:of,namex:'O'],1007:[tok:a,pos:'DT',lemma:a,namex:'O'],1008:[tok:male,pos:'JJ',lemma:male,namex:'O'],1009:[tok:religious,pos:'JJ',lemma:religious,namex:'O'],1010:[tok:community,pos:'NN',lemma:community,namex:'O'],1011:[tok:that,pos:'WDT',lemma:that,namex:'O'],1012:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1013:[tok:usually,pos:'RB',lemma:usually,namex:'O'],1014:[tok:separated,pos:'VBN',lemma:separate,namex:'O'],1015:[tok:from,pos:'IN',lemma:from,namex:'O'],1016:[tok:the,pos:'DT',lemma:the,namex:'O'],1017:[tok:outside,pos:'JJ',lemma:outside,namex:'O'],1018:[tok:world,pos:'NN',lemma:world,namex:'O'],1019:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[1016]:C],[[1018]:pred(C,world,n,0),[1017]:pred(B,outside,a,0),[]:rel(B,C,experiencer,0)]),drs([[]:D,[1001]:E],[[]:prop(D,drs([[]:F,[1011]:G,[]:H,[]:I,[1007]:J,[1004]:K],[[1003]:eq(E,K),[1006]:rel(K,J,of,0),[1013]:pred(F,usually,r,0),[1015]:rel(F,C,from,0),[]:rel(F,G,theme,0),[1014]:pred(F,separate,v,0),[]:eq(J,G),[1010]:pred(J,community,n,0),[1009]:pred(H,religious,a,0),[]:rel(H,J,experiencer,0),[1008]:pred(I,male,a,0),[]:rel(I,J,experiencer,0),[1005]:pred(K,member,n,0)])),[1002]:pred(E,monk,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A monk is a member of a male religious community that is usually separated from the outside world . 
k3 concept c0:monk:0 0 [ ]
k3 referent k3:p1 0 [ ]
c10:experiencer:-1 ext k3:p1:s3 0 [ ]
c16:equality ext k3:p1:x2 0 [ ]
c2:experiencer:-1 ext k3:p1:s1 0 [ ]
c4:experiencer:-1 ext k3:p1:s2 0 [ ]
c7:equality ext k3:p1:x4 0 [ ]
k3:p1 attribute c11:outside:0 0 [ ]
k3:p1 attribute c14:usually:0 0 [ ]
k3:p1 attribute c3:male:0 0 [ ]
k3:p1 attribute c5:religious:0 0 [ ]
k3:p1 concept c1:member:0 0 [ ]
k3:p1 concept c12:world:0 0 [ ]
k3:p1 concept c6:community:0 0 [ ]
k3:p1 event c8:separate:0 0 [ ]
k3:p1 referent k3:p1:e1 0 [ ]
k3:p1 referent k3:p1:s1 0 [ ]
k3:p1 referent k3:p1:s2 0 [ ]
k3:p1 referent k3:p1:s3 0 [ ]
k3:p1 relation c13:from:0 0 [ ]
k3:p1 relation c15:of:0 0 [ ]
k3:p1 relation c7:equality 0 [ ]
k3:p1 role c10:experiencer:-1 0 [ ]
k3:p1 role c2:experiencer:-1 0 [ ]
k3:p1 role c4:experiencer:-1 0 [ ]
k3:p1 role c9:theme:-1 0 [ ]
c9:theme:-1 ext k3:p1:e1 0 [ ]
k3 referent k3:x1 1 [ A ]
c0:monk:0 instance k3:x1 2 [ monk ]
k3:p1 relation c16:equality 1 [ is ]
k3:p1 referent k3:p1:x2 1 [ a ]
c16:equality int k3:x1 3 [ ]
c1:member:0 instance k3:p1:x2 2 [ member ]
c15:of:0 ext k3:p1:x3 1 [ of ]
k3:p1 referent k3:p1:x3 2 [ a ]
c15:of:0 int k3:p1:x2 3 [ ]
c3:male:0 arg k3:p1:s1 1 [ male ]
c2:experiencer:-1 int k3:p1:x3 3 [ ]
c5:religious:0 arg k3:p1:s2 1 [ religious ]
c4:experiencer:-1 int k3:p1:x3 4 [ ]
c6:community:0 instance k3:p1:x3 5 [ community ]
k3:p1 referent k3:p1:x4 1 [ that ]
c7:equality int k3:p1:x3 6 [ ]
k3:p1 surface k3:p1:e1 1 [ is ]
c9:theme:-1 int k3:p1:x4 2 [ ]
c14:usually:0 arg k3:p1:e1 2 [ usually ]
c8:separate:0 instance k3:p1:e1 3 [ separated ]
c13:from:0 ext k3:p1:x5 1 [ from ]
k3:p1 referent k3:p1:x5 2 [ the ]
c11:outside:0 arg k3:p1:s3 1 [ outside ]
c10:experiencer:-1 int k3:p1:x5 3 [ ]
c12:world:0 instance k3:p1:x5 4 [ world ]
c13:from:0 int k3:p1:e1 4 [ ]
k3:p1 punctuation k3:p1:x5 5 [ . ]


!.
A slave is someone who is the property of another person and has to work for that person.
slave NN who WP property NN person NN work VB person NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:slave,pos:'NN',lemma:slave,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:someone,pos:'DT',lemma:someone,namex:'O'],1005:[tok:who,pos:'WP',lemma:who,namex:'O'],1006:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1007:[tok:the,pos:'DT',lemma:the,namex:'O'],1008:[tok:property,pos:'NN',lemma:property,namex:'O'],1009:[tok:of,pos:'IN',lemma:of,namex:'O'],1010:[tok:another,pos:'DT',lemma:another,namex:'O'],1011:[tok:person,pos:'NN',lemma:person,namex:'O'],1012:[tok:and,pos:'CC',lemma:and,namex:'O'],1013:[tok:has,pos:'VBZ',lemma:have,namex:'O'],1014:[tok:to,pos:'TO',lemma:to,namex:'O'],1015:[tok:work,pos:'VB',lemma:work,namex:'O'],1016:[tok:for,pos:'IN',lemma:for,namex:'O'],1017:[tok:that,pos:'DT',lemma:that,namex:'O'],1018:[tok:person,pos:'NN',lemma:person,namex:'O'],1019:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[1017]:B,[]:C,[1007]:D],[[1018]:pred(B,person,n,0),[1011]:pred(C,person,n,0),[1008]:pred(D,property,n,0)]),drs([[]:E,[1001]:F],[[]:prop(E,drs([[]:G,[1014]:H,[1005]:I,[]:J,[1005]:K,[]:L],[[1003]:eq(F,L),[]:rel(G,H,topic,0),[]:rel(G,I,agent,0),[1013]:pred(G,have,v,0),[]:prop(H,drs([[]:M],[[1016]:rel(M,B,for,0),[]:rel(M,I,agent,0),[1015]:pred(M,work,v,0)])),[]:eq(L,I),[]:prop(J,drs([[1010]:N],[[1006]:eq(K,D),[1009]:rel(D,N,of,0),[1011]:pred(N,person,n,0),[]:not(drs([],[[]:eq(N,C)]))])),[]:eq(L,K),[1004]:pred(L,person,n,1)])),[1002]:pred(F,slave,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A slave is someone who is the property of another person and has to work for that person . 
k4 concept c0:slave:0 0 [ ]
k4 referent k4:p1 0 [ ]
k5 relation c6:equality 0 [ ]
c10:equality ext k4:p1:x4 0 [ ]
c17:topic:1 ext k4:p1:p3 0 [ ]
c18:equality ext k4:p1:x2 0 [ ]
c2:equality ext k4:p1:x3 0 [ ]
c5:not scope k5 0 [ ]
c6:equality ext (k4:p1):p2:x6 0 [ ]
c9:equality ext (k4:p1):p2:x5 0 [ ]
k4:p1 concept c1:person:1 0 [ ]
k4:p1 event c15:have:0 0 [ ]
k4:p1 referent k4:p1:e1 0 [ ]
k4:p1 referent k4:p1:p2 0 [ ]
k4:p1 referent k4:p1:x2 0 [ ]
k4:p1 relation c10:equality 0 [ ]
k4:p1 relation c2:equality 0 [ ]
k4:p1 role c17:topic:1 0 [ ]
k4:p1 role c16:agent:-1 0 [ ]
k4:p1:p2 concept c3:property:0 0 [ ]
k4:p1:p2 concept c4:person:0 0 [ ]
k4:p1:p2 concept c7:person:0 0 [ ]
k4:p1:p2 referent (k4:p1):p2:x6 0 [ ]
k4:p1:p2 relation c8:of:0 0 [ ]
k4:p1:p2 unary c5:not 0 [ ]
k4:p1:p3 concept c13:person:0 0 [ ]
k4:p1:p3 event c11:work:0 0 [ ]
k4:p1:p3 referent (k4:p1):p3:e2 0 [ ]
k4:p1:p3 relation c14:for:0 0 [ ]
k4:p1:p3 role c12:agent:-1 0 [ ]
c12:agent:-1 ext (k4:p1):p3:e2 0 [ ]
c16:agent:-1 ext k4:p1:e1 0 [ ]
k4 referent k4:x1 1 [ A ]
c0:slave:0 instance k4:x1 2 [ slave ]
k4:p1 relation c18:equality 1 [ is ]
c1:person:1 instance k4:p1:x2 1 [ someone ]
c18:equality int k4:x1 3 [ ]
k4:p1 referent k4:p1:x3 1 [ who ]
k4:p1 referent k4:p1:x4 1 [ ]
c10:equality int k4:p1:x2 2 [ ]
c2:equality int k4:p1:x2 3 [ ]
k4:p1:p2 relation c9:equality 1 [ is ]
k4:p1:p2 referent (k4:p1):p2:x5 1 [ the ]
c9:equality int k4:p1:x3 2 [ ]
c3:property:0 instance (k4:p1):p2:x5 2 [ property ]
c8:of:0 ext (k4:p1):p2:x7 1 [ of ]
k4:p1:p2 referent (k4:p1):p2:x7 2 [ another ]
c8:of:0 int (k4:p1):p2:x5 3 [ ]
c4:person:0 instance (k4:p1):p2:x6 1 [ person ]
c6:equality int (k4:p1):p2:x7 3 [ ]
c7:person:0 instance (k4:p1):p2:x7 4 [ ]
k4:p1 surface k4:p1:e1 1 [ and ]
c16:agent:-1 int k4:p1:x4 2 [ ]
c15:have:0 instance k4:p1:e1 2 [ has ]
k4:p1 referent k4:p1:p3 1 [ to ]
c17:topic:1 int k4:p1:e1 3 [ ]
c11:work:0 instance (k4:p1):p3:e2 1 [ work ]
c12:agent:-1 int k4:p1:x4 3 [ ]
c14:for:0 ext (k4:p1):p3:x8 1 [ for ]
k4:p1:p3 referent (k4:p1):p3:x8 2 [ that ]
c13:person:0 instance (k4:p1):p3:x8 3 [ person ]
c14:for:0 int (k4:p1):p3:e2 2 [ ]
k4:p1:p3 punctuation (k4:p1):p3:x8 4 [ . ]


!.
0.0450
0.1394
An asylum is a psychiatric hospital.
asylum NN psychiatric JJ hospital NN 
sem(1,[1001:[tok:'An',pos:'DT',lemma:an,namex:'O'],1002:[tok:asylum,pos:'NN',lemma:asylum,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:psychiatric,pos:'JJ',lemma:psychiatric,namex:'O'],1006:[tok:hospital,pos:'NN',lemma:hospital,namex:'O'],1007:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[1004]:E],[[1003]:eq(C,E),[1006]:pred(E,hospital,n,0),[1005]:pred(D,psychiatric,a,0),[]:rel(D,E,experiencer,0)])),[1002]:pred(C,asylum,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% An asylum is a psychiatric hospital . 
k2 concept c0:asylum:0 0 [ ]
k2 referent k2:p1 0 [ ]
c1:experiencer:-1 ext k2:p1:s1 0 [ ]
c4:equality ext k2:p1:x2 0 [ ]
k2:p1 attribute c2:psychiatric:0 0 [ ]
k2:p1 concept c3:hospital:0 0 [ ]
k2:p1 referent k2:p1:s1 0 [ ]
k2:p1 role c1:experiencer:-1 0 [ ]
k2 referent k2:x1 1 [ An ]
c0:asylum:0 instance k2:x1 2 [ asylum ]
k2:p1 relation c4:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ a ]
c2:psychiatric:0 arg k2:p1:s1 1 [ psychiatric ]
c1:experiencer:-1 int k2:p1:x2 2 [ ]
c3:hospital:0 instance k2:p1:x2 3 [ hospital ]
c4:equality int k2:x1 3 [ ]
k2:p1 punctuation k2:p1:x2 4 [ . ]


!.
A cemetery is a place where dead peoples bodies or their ashes are buried.
cemetery NN place NN where WRB dead JJ peoples NNS bodies NNS their PRP$ ashes NNS are VBP buried VBN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:cemetery,pos:'NN',lemma:cemetery,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:place,pos:'NN',lemma:place,namex:'O'],1006:[tok:where,pos:'WRB',lemma:where,namex:'O'],1007:[tok:dead,pos:'JJ',lemma:dead,namex:'O'],1008:[tok:peoples,pos:'NNS',lemma:people,namex:'O'],1009:[tok:bodies,pos:'NNS',lemma:body,namex:'O'],1010:[tok:or,pos:'CC',lemma:or,namex:'O'],1011:[tok:their,pos:'PRP$',lemma:their,namex:'O'],1012:[tok:ashes,pos:'NNS',lemma:ash,namex:'O'],1013:[tok:are,pos:'VBP',lemma:be,namex:'O'],1014:[tok:buried,pos:'VBN',lemma:bury,namex:'O'],1015:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[]:C],[[1012]:pred(B,ash,n,0),[]:rel(B,C,of,1),[1011]:pred(C,thing,n,12)]),drs([[]:D,[1001]:E],[[]:prop(D,drs([[]:F,[1004]:G],[[1003]:eq(E,G),[]:prop(F,drs([],[[1010]:or(drs([[]:H,[]:I,[]:J,[]:K],[[]:rel(H,K,theme,0),[1014]:pred(H,bury,v,0),[1009]:pred(K,body,n,0),[]:rel(K,I,of,0),[1008]:pred(I,people,n,0),[1007]:pred(J,dead,a,0),[]:rel(J,K,experiencer,0)]),drs([[]:L],[[]:rel(L,B,theme,0),[1014]:pred(L,bury,v,0)]))])),[1006]:rel(G,F,where,0),[1005]:pred(G,place,n,0)])),[1002]:pred(E,cemetery,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A cemetery is a place where dead peoples bodies or their ashes are buried . 
k4 concept c0:cemetery:0 0 [ ]
k4 referent k4:p1 0 [ ]
k5 attribute c5:dead:0 0 [ ]
k5 concept c6:people:0 0 [ ]
k5 concept c8:body:0 0 [ ]
k5 event c9:bury:0 0 [ ]
k5 referent k5:e1 0 [ ]
k5 referent k5:s1 0 [ ]
k5 referent k5:x3 0 [ ]
k5 referent k5:x4 0 [ ]
k5 relation c7:of:0 0 [ ]
k5 role c10:theme:1 0 [ ]
k5 role c4:experiencer:-1 0 [ ]
k6 concept c11:thing:12 0 [ ]
k6 concept c13:ash:0 0 [ ]
k6 event c14:bury:0 0 [ ]
k6 referent k6:e2 0 [ ]
k6 referent k6:x5 0 [ ]
k6 referent k6:x6 0 [ ]
k6 relation c12:of:1 0 [ ]
k6 role c15:theme:1 0 [ ]
c10:theme:1 ext k5:x3 0 [ ]
c12:of:1 ext k6:x5 0 [ ]
c15:theme:1 ext k6:x6 0 [ ]
c16:equality ext k4:p1:x2 0 [ ]
c3:or antecedent k5 0 [ ]
c3:or consequent k6 0 [ ]
c4:experiencer:-1 ext k5:s1 0 [ ]
c7:of:0 ext k5:x4 0 [ ]
k4:p1 concept c1:place:0 0 [ ]
k4:p1 referent k4:p1:p2 0 [ ]
k4:p1 relation c2:where:0 0 [ ]
k4:p1:p2 binary c3:or 0 [ ]
k4 referent k4:x1 1 [ A ]
c0:cemetery:0 instance k4:x1 2 [ cemetery ]
k4:p1 relation c16:equality 1 [ is ]
k4:p1 referent k4:p1:x2 1 [ a ]
c16:equality int k4:x1 3 [ ]
c1:place:0 instance k4:p1:x2 2 [ place ]
c2:where:0 ext k4:p1:p2 1 [ where ]
c5:dead:0 arg k5:s1 1 [ dead ]
c6:people:0 instance k5:x4 1 [ peoples ]
c7:of:0 int k5:x3 1 [ ]
c10:theme:1 int k5:e1 1 [ ]
c8:body:0 instance k5:x3 2 [ bodies ]
k5 surface k5:s1 2 [ or ]
c4:experiencer:-1 int k5:x3 3 [ ]
c11:thing:12 instance k6:x5 1 [ their ]
c12:of:1 int k6:x6 1 [ ]
c15:theme:1 int k6:e2 1 [ ]
c13:ash:0 instance k6:x6 2 [ ashes ]
k6 surface k6:e2 2 [ are ]
c9:bury:0 instance k5:e1 2 [ buried ]
k5:e1 main k4:p1:p2 2 [ ]
c14:bury:0 instance k6:e2 3 [ ]
k6:e2 main k4:p1:p2 3 [ ]
c2:where:0 int k4:p1:x2 3 [ ]
k4:p1 punctuation k4:p1:p2 4 [ . ]


!.
0.375
0.03398
The coast is an area of land that is next to the sea.
coast NN area NN land NN that WDT next JJ sea NN 
sem(1,[1001:[tok:'The',pos:'DT',lemma:the,namex:'O'],1002:[tok:coast,pos:'NN',lemma:coast,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:an,pos:'DT',lemma:an,namex:'O'],1005:[tok:area,pos:'NN',lemma:area,namex:'O'],1006:[tok:of,pos:'IN',lemma:of,namex:'O'],1007:[tok:land,pos:'NN',lemma:land,namex:'O'],1008:[tok:that,pos:'WDT',lemma:that,namex:'O'],1009:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1010:[tok:next,pos:'JJ',lemma:next,namex:'O'],1011:[tok:to,pos:'TO',lemma:to,namex:'O'],1012:[tok:the,pos:'DT',lemma:the,namex:'O'],1013:[tok:sea,pos:'NN',lemma:sea,namex:'O'],1014:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[1012]:B,[1001]:C],[[1013]:pred(B,sea,n,0),[1002]:pred(C,coast,n,0)]),drs([[]:D],[[]:prop(D,drs([[]:E,[1008]:F,[]:G,[1004]:H],[[1003]:eq(C,H),[1006]:rel(H,G,of,0),[1011]:rel(E,B,to,0),[]:rel(E,F,experiencer,0),[1010]:pred(E,next,a,0),[]:eq(G,F),[1007]:pred(G,land,n,0),[1005]:pred(H,area,n,0)]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% The coast is an area of land that is next to the sea . 
k2 concept c0:coast:0 0 [ ]
k2 referent k2:p1 0 [ ]
c3:equality ext k2:p1:x4 0 [ ]
c9:equality ext k2:p1:x2 0 [ ]
k2:p1 attribute c4:next:0 0 [ ]
k2:p1 concept c1:area:0 0 [ ]
k2:p1 concept c2:land:0 0 [ ]
k2:p1 concept c6:sea:0 0 [ ]
k2:p1 referent k2:p1:s1 0 [ ]
k2:p1 referent k2:p1:x3 0 [ ]
k2:p1 relation c3:equality 0 [ ]
k2:p1 relation c7:to:0 0 [ ]
k2:p1 relation c8:of:0 0 [ ]
k2:p1 role c5:experiencer:-1 0 [ ]
c5:experiencer:-1 ext k2:p1:s1 0 [ ]
k2 referent k2:x1 1 [ The ]
c0:coast:0 instance k2:x1 2 [ coast ]
k2:p1 relation c9:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ an ]
c9:equality int k2:x1 3 [ ]
c1:area:0 instance k2:p1:x2 2 [ area ]
c8:of:0 ext k2:p1:x3 1 [ of ]
c2:land:0 instance k2:p1:x3 2 [ land ]
c8:of:0 int k2:p1:x2 3 [ ]
k2:p1 referent k2:p1:x4 1 [ that ]
c3:equality int k2:p1:x3 3 [ ]
k2:p1 surface k2:p1:s1 1 [ is ]
c5:experiencer:-1 int k2:p1:x4 2 [ ]
c4:next:0 arg k2:p1:s1 2 [ next ]
c7:to:0 ext k2:p1:x5 1 [ to ]
k2:p1 referent k2:p1:x5 2 [ the ]
c6:sea:0 instance k2:p1:x5 3 [ sea ]
c7:to:0 int k2:p1:s1 3 [ ]
k2:p1 punctuation k2:p1:x5 4 [ . ]


!.
A forest is a large area where trees grow close together.
forest NN large JJ area NN where WRB trees NNS grow VBP close RB together RB 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:forest,pos:'NN',lemma:forest,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:large,pos:'JJ',lemma:large,namex:'O'],1006:[tok:area,pos:'NN',lemma:area,namex:'O'],1007:[tok:where,pos:'WRB',lemma:where,namex:'O'],1008:[tok:trees,pos:'NNS',lemma:tree,namex:'O'],1009:[tok:grow,pos:'VBP',lemma:grow,namex:'O'],1010:[tok:close,pos:'RB',lemma:close,namex:'O'],1011:[tok:together,pos:'RB',lemma:together,namex:'O'],1012:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[]:E,[1004]:F],[[1003]:eq(C,F),[]:prop(D,drs([[]:G,[]:H],[[1010]:pred(G,close,r,0),[1011]:pred(G,together,r,0),[]:rel(G,H,agent,0),[1009]:pred(G,grow,v,0),[1008]:pred(H,tree,n,0)])),[1007]:rel(F,D,where,0),[1006]:pred(F,area,n,0),[1005]:pred(E,large,a,0),[]:rel(E,F,experiencer,0)])),[1002]:pred(C,forest,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A forest is a large area where trees grow close together . 
k3 concept c0:forest:0 0 [ ]
k3 referent k3:p1 0 [ ]
c1:experiencer:-1 ext k3:p1:s1 0 [ ]
c10:equality ext k3:p1:x2 0 [ ]
c7:agent:1 ext (k3:p1):p2:x3 0 [ ]
k3:p1 attribute c2:large:0 0 [ ]
k3:p1 concept c3:area:0 0 [ ]
k3:p1 referent k3:p1:p2 0 [ ]
k3:p1 referent k3:p1:s1 0 [ ]
k3:p1 relation c4:where:0 0 [ ]
k3:p1 role c1:experiencer:-1 0 [ ]
k3:p1:p2 attribute c8:together:0 0 [ ]
k3:p1:p2 attribute c9:close:0 0 [ ]
k3:p1:p2 concept c5:tree:0 0 [ ]
k3:p1:p2 event c6:grow:0 0 [ ]
k3:p1:p2 referent (k3:p1):p2:e1 0 [ ]
k3:p1:p2 referent (k3:p1):p2:x3 0 [ ]
k3:p1:p2 role c7:agent:1 0 [ ]
k3 referent k3:x1 1 [ A ]
c0:forest:0 instance k3:x1 2 [ forest ]
k3:p1 relation c10:equality 1 [ is ]
k3:p1 referent k3:p1:x2 1 [ a ]
c10:equality int k3:x1 3 [ ]
c2:large:0 arg k3:p1:s1 1 [ large ]
c1:experiencer:-1 int k3:p1:x2 2 [ ]
c3:area:0 instance k3:p1:x2 3 [ area ]
c4:where:0 ext k3:p1:p2 1 [ where ]
c4:where:0 int k3:p1:x2 4 [ ]
c5:tree:0 instance (k3:p1):p2:x3 1 [ trees ]
c7:agent:1 int (k3:p1):p2:e1 1 [ ]
c6:grow:0 instance (k3:p1):p2:e1 2 [ grow ]
(k3:p1):p2:e1 main k3:p1:p2 2 [ ]
c9:close:0 arg (k3:p1):p2:e1 3 [ close ]
c8:together:0 arg (k3:p1):p2:e1 4 [ together ]
k3:p1:p2 punctuation (k3:p1):p2:e1 5 [ . ]


!.
0.0475
0.3658
A grin is a broad smile.
grin NN broad JJ smile NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:grin,pos:'NN',lemma:grin,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:broad,pos:'JJ',lemma:broad,namex:'O'],1006:[tok:smile,pos:'NN',lemma:smile,namex:'O'],1007:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[1004]:E],[[1003]:eq(C,E),[1006]:pred(E,smile,n,0),[1005]:pred(D,broad,a,0),[]:rel(D,E,experiencer,0)])),[1002]:pred(C,grin,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A grin is a broad smile . 
k2 concept c0:grin:0 0 [ ]
k2 referent k2:p1 0 [ ]
c1:experiencer:-1 ext k2:p1:s1 0 [ ]
c4:equality ext k2:p1:x2 0 [ ]
k2:p1 attribute c2:broad:0 0 [ ]
k2:p1 concept c3:smile:0 0 [ ]
k2:p1 referent k2:p1:s1 0 [ ]
k2:p1 role c1:experiencer:-1 0 [ ]
k2 referent k2:x1 1 [ A ]
c0:grin:0 instance k2:x1 2 [ grin ]
k2:p1 relation c4:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ a ]
c2:broad:0 arg k2:p1:s1 1 [ broad ]
c1:experiencer:-1 int k2:p1:x2 2 [ ]
c3:smile:0 instance k2:p1:x2 3 [ smile ]
c4:equality int k2:x1 3 [ ]
k2:p1 punctuation k2:p1:x2 4 [ . ]


!.
A lad is a young man or boy.
lad NN young JJ man NN boy NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:lad,pos:'NN',lemma:lad,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:young,pos:'JJ',lemma:young,namex:'O'],1006:[tok:man,pos:'NN',lemma:man,namex:'O'],1007:[tok:or,pos:'CC',lemma:or,namex:'O'],1008:[tok:boy,pos:'NN',lemma:boy,namex:'O'],1009:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[1004]:E],[[1003]:eq(C,E),[1007]:or(drs([],[[1006]:pred(E,man,n,0)]),drs([],[[1008]:pred(E,boy,n,0)])),[1005]:pred(D,young,a,0),[]:rel(D,E,experiencer,0)])),[1002]:pred(C,lad,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A lad is a young man or boy . 
k2 concept c0:lad:0 0 [ ]
k2 referent k2:p1 0 [ ]
k3 concept c4:man:0 0 [ ]
k4 concept c5:boy:0 0 [ ]
c1:experiencer:-1 ext k2:p1:s1 0 [ ]
c3:or antecedent k3 0 [ ]
c3:or consequent k4 0 [ ]
c6:equality ext k2:p1:x2 0 [ ]
k2:p1 attribute c2:young:0 0 [ ]
k2:p1 binary c3:or 0 [ ]
k2:p1 referent k2:p1:s1 0 [ ]
k2:p1 role c1:experiencer:-1 0 [ ]
k2 referent k2:x1 1 [ A ]
c0:lad:0 instance k2:x1 2 [ lad ]
k2:p1 relation c6:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ a ]
c2:young:0 arg k2:p1:s1 1 [ young ]
c1:experiencer:-1 int k2:p1:x2 2 [ ]
c4:man:0 instance k2:p1:x2 3 [ man ]
k2:p1 function k2:p1:x2 4 [ or ]
c5:boy:0 instance k2:p1:x2 5 [ boy ]
c6:equality int k2:x1 3 [ ]
k2:p1 punctuation k2:p1:x2 6 [ . ]


!.
0.0125
0.0281
The shores or shore of a sea, lake, or wide river is the land along the edge of it.
shores NNS shore NN sea NN lake NN wide JJ river NN land NN edge NN it PRP 
sem(1,[1001:[tok:'The',pos:'DT',lemma:the,namex:'O'],1002:[tok:shores,pos:'NNS',lemma:shore,namex:'O'],1003:[tok:or,pos:'CC',lemma:or,namex:'O'],1004:[tok:shore,pos:'NN',lemma:shore,namex:'O'],1005:[tok:of,pos:'IN',lemma:of,namex:'O'],1006:[tok:a,pos:'DT',lemma:a,namex:'O'],1007:[tok:sea,pos:'NN',lemma:sea,namex:'O'],1008:[tok: (','),pos: (','),lemma: (','),namex:'O'],1009:[tok:lake,pos:'NN',lemma:lake,namex:'O'],1010:[tok: (','),pos: (','),lemma: (','),namex:'O'],1011:[tok:or,pos:'CC',lemma:or,namex:'O'],1012:[tok:wide,pos:'JJ',lemma:wide,namex:'O'],1013:[tok:river,pos:'NN',lemma:river,namex:'O'],1014:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1015:[tok:the,pos:'DT',lemma:the,namex:'O'],1016:[tok:land,pos:'NN',lemma:land,namex:'O'],1017:[tok:along,pos:'IN',lemma:along,namex:'O'],1018:[tok:the,pos:'DT',lemma:the,namex:'O'],1019:[tok:edge,pos:'NN',lemma:edge,namex:'O'],1020:[tok:of,pos:'IN',lemma:of,namex:'O'],1021:[tok:it,pos:'PRP',lemma:it,namex:'O'],1022:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[1018]:C,[1015]:D,[]:E,[1018]:F,[1015]:G,[1001]:H],[[1021]:pred(B,thing,n,12),[1019]:pred(C,edge,n,0),[1016]:pred(D,land,n,0),[1021]:pred(E,thing,n,12),[1019]:pred(F,edge,n,0),[1016]:pred(G,land,n,0),[1003]:or(drs([],[[1002]:pred(H,shore,n,0)]),drs([],[[1004]:pred(H,shore,n,0)]))]),drs([],[[1011]:or(drs([[]:I,[]:J,[1006]:K],[[]:prop(I,drs([],[[1014]:eq(H,G),[1017]:rel(G,F,along,0),[1020]:rel(F,E,of,0)])),[1005]:rel(H,K,of,0),[1008]:rel(K,J,rel,2),[1009]:pred(J,lake,n,0),[1007]:pred(K,sea,n,0)]),drs([[]:L,[]:M,[]:N],[[]:prop(L,drs([],[[1014]:eq(N,D),[1017]:rel(D,C,along,0),[1020]:rel(C,B,of,0)])),[1013]:pred(N,river,n,0),[1012]:pred(M,wide,a,0),[]:rel(M,N,experiencer,0)]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% The shores or shore of a sea , lake , or wide river is the land along the edge of it . 
k2 binary c0:or 0 [ ]
k3 binary c1:or 0 [ ]
k3 concept c4:sea:0 0 [ ]
k3 concept c5:lake:0 0 [ ]
k3 referent k3:p1 0 [ ]
k3 referent k3:x3 0 [ ]
k3 relation c6:rel:2 0 [ ]
k3 relation c7:of:0 0 [ ]
k4 concept c2:shore:0 0 [ ]
k5 concept c3:shore:0 0 [ ]
k6 attribute c15:wide:0 0 [ ]
k6 concept c16:river:0 0 [ ]
k6 referent k6:p2 0 [ ]
k6 referent k6:s1 0 [ ]
k6 referent k6:x7 0 [ ]
k6 role c14:experiencer:-1 0 [ ]
c0:or antecedent k3 0 [ ]
c0:or consequent k6 0 [ ]
c1:or antecedent k4 0 [ ]
c1:or consequent k5 0 [ ]
c13:equality ext k3:p1:x4 0 [ ]
c14:experiencer:-1 ext k6:s1 0 [ ]
c22:equality ext k6:p2:x8 0 [ ]
k3:p1 concept c10:thing:12 0 [ ]
k3:p1 concept c8:land:0 0 [ ]
k3:p1 concept c9:edge:0 0 [ ]
k3:p1 referent k3:p1:x6 0 [ ]
k3:p1 relation c11:of:0 0 [ ]
k3:p1 relation c12:along:0 0 [ ]
k6:p2 concept c17:land:0 0 [ ]
k6:p2 concept c18:edge:0 0 [ ]
k6:p2 concept c19:thing:12 0 [ ]
k6:p2 referent k6:p2:x10 0 [ ]
k6:p2 relation c20:of:0 0 [ ]
k6:p2 relation c21:along:0 0 [ ]
k3 referent k3:x1 1 [ The ]
c2:shore:0 instance k3:x1 2 [ shores ]
k3 function k3:x1 3 [ or ]
c3:shore:0 instance k3:x1 4 [ shore ]
c7:of:0 ext k3:x2 1 [ of ]
k3 referent k3:x2 2 [ a ]
c7:of:0 int k3:x1 5 [ ]
c4:sea:0 instance k3:x2 3 [ sea ]
c6:rel:2 ext k3:x3 1 [ , ]
c5:lake:0 instance k3:x3 2 [ lake ]
k3 punctuation k3:x3 3 [ , ]
c6:rel:2 int k3:x2 4 [ ]
k6 surface k6:s1 1 [ or ]
c14:experiencer:-1 int k6:x7 1 [ ]
c15:wide:0 arg k6:s1 2 [ wide ]
c16:river:0 instance k6:x7 2 [ river ]
k3:p1 relation c13:equality 1 [ is ]
k6:p2 relation c22:equality 1 [ ]
k3:p1 referent k3:p1:x4 1 [ the ]
k6:p2 referent k6:p2:x8 1 [ ]
c22:equality int k6:x7 3 [ ]
c13:equality int k3:x1 6 [ ]
c17:land:0 instance k6:p2:x8 2 [ ]
c8:land:0 instance k3:p1:x4 2 [ land ]
c12:along:0 ext k3:p1:x5 1 [ along ]
c21:along:0 ext k6:p2:x9 1 [ ]
k3:p1 referent k3:p1:x5 2 [ the ]
k6:p2 referent k6:p2:x9 2 [ ]
c12:along:0 int k3:p1:x4 3 [ ]
c21:along:0 int k6:p2:x8 3 [ ]
c18:edge:0 instance k6:p2:x9 3 [ ]
c9:edge:0 instance k3:p1:x5 3 [ edge ]
c11:of:0 ext k3:p1:x6 1 [ of ]
c20:of:0 ext k6:p2:x10 1 [ ]
c10:thing:12 instance k3:p1:x6 2 [ it ]
c19:thing:12 instance k6:p2:x10 2 [ ]
c11:of:0 int k3:p1:x5 4 [ ]
k6:p2 punctuation k6:p2:x10 3 [ . ]
c20:of:0 int k6:p2:x9 4 [ ]


!.
Woodland is land with a lot of trees.
'Woodland' NNP land NN lot NN trees NNS 
sem(1,[1001:[tok:'Woodland',pos:'NNP',lemma:'Woodland',namex:'I-PER'],1002:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1003:[tok:land,pos:'NN',lemma:land,namex:'O'],1004:[tok:with,pos:'IN',lemma:with,namex:'O'],1005:[tok:a,pos:'DT',lemma:a,namex:'O'],1006:[tok:lot,pos:'NN',lemma:lot,namex:'O'],1007:[tok:of,pos:'IN',lemma:of,namex:'O'],1008:[tok:trees,pos:'NNS',lemma:tree,namex:'O'],1009:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B],[[1001]:named(B,woodland,per,nam)]),drs([[]:C],[[]:prop(C,drs([[]:D,[1005]:E,[]:F],[[1002]:eq(B,F),[1004]:rel(F,E,with,0),[1007]:rel(E,D,of,0),[1008]:pred(D,tree,n,0),[1006]:pred(E,lot,n,0),[1003]:pred(F,land,n,0)]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% Woodland is land with a lot of trees . 
k2 named c0:woodland:per 0 [ ]
k2 referent k2:p1 0 [ ]
k2 referent k2:x1 0 [ ]
c6:equality ext k2:p1:x2 0 [ ]
k2:p1 concept c1:land:0 0 [ ]
k2:p1 concept c2:lot:0 0 [ ]
k2:p1 concept c3:tree:0 0 [ ]
k2:p1 referent k2:p1:x2 0 [ ]
k2:p1 referent k2:p1:x4 0 [ ]
k2:p1 relation c4:of:0 0 [ ]
k2:p1 relation c5:with:0 0 [ ]
c0:woodland:per instance k2:x1 1 [ Woodland ]
k2:p1 relation c6:equality 1 [ is ]
c1:land:0 instance k2:p1:x2 1 [ land ]
c6:equality int k2:x1 2 [ ]
c5:with:0 ext k2:p1:x3 1 [ with ]
c5:with:0 int k2:p1:x2 2 [ ]
k2:p1 referent k2:p1:x3 2 [ a ]
c2:lot:0 instance k2:p1:x3 3 [ lot ]
c4:of:0 ext k2:p1:x4 1 [ of ]
c3:tree:0 instance k2:p1:x4 2 [ trees ]
k2:p1 punctuation k2:p1:x4 3 [ . ]
c4:of:0 int k2:p1:x3 4 [ ]


!.
0.0825
0.3192
A monk is a member of a male religious community that is usually separated from the outside world.
monk NN member NN male JJ religious JJ community NN that WDT usually RB separated VBN outside JJ world NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:monk,pos:'NN',lemma:monk,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:member,pos:'NN',lemma:member,namex:'O'],1006:[tok:of,pos:'IN',lemma:of,namex:'O'],1007:[tok:a,pos:'DT',lemma:a,namex:'O'],1008:[tok:male,pos:'JJ',lemma:male,namex:'O'],1009:[tok:religious,pos:'JJ',lemma:religious,namex:'O'],1010:[tok:community,pos:'NN',lemma:community,namex:'O'],1011:[tok:that,pos:'WDT',lemma:that,namex:'O'],1012:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1013:[tok:usually,pos:'RB',lemma:usually,namex:'O'],1014:[tok:separated,pos:'VBN',lemma:separate,namex:'O'],1015:[tok:from,pos:'IN',lemma:from,namex:'O'],1016:[tok:the,pos:'DT',lemma:the,namex:'O'],1017:[tok:outside,pos:'JJ',lemma:outside,namex:'O'],1018:[tok:world,pos:'NN',lemma:world,namex:'O'],1019:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[1016]:C],[[1018]:pred(C,world,n,0),[1017]:pred(B,outside,a,0),[]:rel(B,C,experiencer,0)]),drs([[]:D,[1001]:E],[[]:prop(D,drs([[]:F,[1011]:G,[]:H,[]:I,[1007]:J,[1004]:K],[[1003]:eq(E,K),[1006]:rel(K,J,of,0),[1013]:pred(F,usually,r,0),[1015]:rel(F,C,from,0),[]:rel(F,G,theme,0),[1014]:pred(F,separate,v,0),[]:eq(J,G),[1010]:pred(J,community,n,0),[1009]:pred(H,religious,a,0),[]:rel(H,J,experiencer,0),[1008]:pred(I,male,a,0),[]:rel(I,J,experiencer,0),[1005]:pred(K,member,n,0)])),[1002]:pred(E,monk,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A monk is a member of a male religious community that is usually separated from the outside world . 
k3 concept c0:monk:0 0 [ ]
k3 referent k3:p1 0 [ ]
c10:experiencer:-1 ext k3:p1:s3 0 [ ]
c16:equality ext k3:p1:x2 0 [ ]
c2:experiencer:-1 ext k3:p1:s1 0 [ ]
c4:experiencer:-1 ext k3:p1:s2 0 [ ]
c7:equality ext k3:p1:x4 0 [ ]
k3:p1 attribute c11:outside:0 0 [ ]
k3:p1 attribute c14:usually:0 0 [ ]
k3:p1 attribute c3:male:0 0 [ ]
k3:p1 attribute c5:religious:0 0 [ ]
k3:p1 concept c1:member:0 0 [ ]
k3:p1 concept c12:world:0 0 [ ]
k3:p1 concept c6:community:0 0 [ ]
k3:p1 event c8:separate:0 0 [ ]
k3:p1 referent k3:p1:e1 0 [ ]
k3:p1 referent k3:p1:s1 0 [ ]
k3:p1 referent k3:p1:s2 0 [ ]
k3:p1 referent k3:p1:s3 0 [ ]
k3:p1 relation c13:from:0 0 [ ]
k3:p1 relation c15:of:0 0 [ ]
k3:p1 relation c7:equality 0 [ ]
k3:p1 role c10:experiencer:-1 0 [ ]
k3:p1 role c2:experiencer:-1 0 [ ]
k3:p1 role c4:experiencer:-1 0 [ ]
k3:p1 role c9:theme:-1 0 [ ]
c9:theme:-1 ext k3:p1:e1 0 [ ]
k3 referent k3:x1 1 [ A ]
c0:monk:0 instance k3:x1 2 [ monk ]
k3:p1 relation c16:equality 1 [ is ]
k3:p1 referent k3:p1:x2 1 [ a ]
c16:equality int k3:x1 3 [ ]
c1:member:0 instance k3:p1:x2 2 [ member ]
c15:of:0 ext k3:p1:x3 1 [ of ]
k3:p1 referent k3:p1:x3 2 [ a ]
c15:of:0 int k3:p1:x2 3 [ ]
c3:male:0 arg k3:p1:s1 1 [ male ]
c2:experiencer:-1 int k3:p1:x3 3 [ ]
c5:religious:0 arg k3:p1:s2 1 [ religious ]
c4:experiencer:-1 int k3:p1:x3 4 [ ]
c6:community:0 instance k3:p1:x3 5 [ community ]
k3:p1 referent k3:p1:x4 1 [ that ]
c7:equality int k3:p1:x3 6 [ ]
k3:p1 surface k3:p1:e1 1 [ is ]
c9:theme:-1 int k3:p1:x4 2 [ ]
c14:usually:0 arg k3:p1:e1 2 [ usually ]
c8:separate:0 instance k3:p1:e1 3 [ separated ]
c13:from:0 ext k3:p1:x5 1 [ from ]
k3:p1 referent k3:p1:x5 2 [ the ]
c11:outside:0 arg k3:p1:s3 1 [ outside ]
c10:experiencer:-1 int k3:p1:x5 3 [ ]
c12:world:0 instance k3:p1:x5 4 [ world ]
c13:from:0 int k3:p1:e1 4 [ ]
k3:p1 punctuation k3:p1:x5 5 [ . ]


!.
In ancient times, an oracle was a priest or priestess who made statements about future events or about the truth.
ancient JJ times NNS oracle NN was VBD priest NN priestess NN who WP made VBD statements NNS future JJ events NNS truth NN 
sem(1,[1001:[tok:'In',pos:'IN',lemma:in,namex:'O'],1002:[tok:ancient,pos:'JJ',lemma:ancient,namex:'O'],1003:[tok:times,pos:'NNS',lemma:time,namex:'O'],1004:[tok: (','),pos: (','),lemma: (','),namex:'O'],1005:[tok:an,pos:'DT',lemma:an,namex:'O'],1006:[tok:oracle,pos:'NN',lemma:oracle,namex:'O'],1007:[tok:was,pos:'VBD',lemma:be,namex:'O'],1008:[tok:a,pos:'DT',lemma:a,namex:'O'],1009:[tok:priest,pos:'NN',lemma:priest,namex:'O'],1010:[tok:or,pos:'CC',lemma:or,namex:'O'],1011:[tok:priestess,pos:'NN',lemma:priestess,namex:'O'],1012:[tok:who,pos:'WP',lemma:who,namex:'O'],1013:[tok:made,pos:'VBD',lemma:make,namex:'O'],1014:[tok:statements,pos:'NNS',lemma:statement,namex:'O'],1015:[tok:about,pos:'IN',lemma:about,namex:'O'],1016:[tok:future,pos:'JJ',lemma:future,namex:'O'],1017:[tok:events,pos:'NNS',lemma:event,namex:'O'],1018:[tok:or,pos:'CC',lemma:or,namex:'O'],1019:[tok:about,pos:'IN',lemma:about,namex:'O'],1020:[tok:the,pos:'DT',lemma:the,namex:'O'],1021:[tok:truth,pos:'NN',lemma:truth,namex:'O'],1022:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[1020]:B],[[1021]:pred(B,truth,n,0)]),drs([[]:C,[]:D,[]:E,[1005]:F],[[1001]:rel(E,D,in,0),[1003]:pred(D,time,n,0),[1002]:pred(C,ancient,a,0),[]:rel(C,D,experiencer,0),[]:prop(E,drs([[1012]:G,[1008]:H],[[1007]:eq(F,H),[1018]:or(drs([[]:I,[]:J,[]:K,[]:L],[[]:rel(I,L,theme,0),[]:rel(I,G,agent,0),[1013]:pred(I,make,v,0),[1015]:rel(L,K,about,0),[1017]:pred(K,event,n,0),[1016]:pred(J,future,a,0),[]:rel(J,K,experiencer,0),[1014]:pred(L,statement,n,0)]),drs([[]:M,[]:N],[[]:rel(M,N,theme,0),[]:rel(M,G,agent,0),[1013]:pred(M,make,v,0),[1019]:rel(N,B,about,0),[1014]:pred(N,statement,n,0)])),[]:eq(H,G),[1010]:or(drs([],[[1009]:pred(H,priest,n,0)]),drs([],[[1011]:pred(H,priestess,n,0)]))])),[1006]:pred(F,oracle,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% In ancient times , an oracle was a priest or priestess who made statements about future events or about the truth . 
k4 attribute c22:ancient:0 0 [ ]
k4 concept c0:oracle:0 0 [ ]
k4 concept c23:time:0 0 [ ]
k4 referent k4:p1 0 [ ]
k4 referent k4:s1 0 [ ]
k4 referent k4:x2 0 [ ]
k4 relation c24:in:0 0 [ ]
k4 role c21:experiencer:-1 0 [ ]
k5 concept c2:priest:0 0 [ ]
k6 concept c3:priestess:0 0 [ ]
k7 attribute c8:future:0 0 [ ]
k7 concept c6:statement:0 0 [ ]
k7 concept c9:event:0 0 [ ]
k7 event c11:make:0 0 [ ]
k7 referent k7:e1 0 [ ]
k7 referent k7:s2 0 [ ]
k7 referent k7:x5 0 [ ]
k7 referent k7:x6 0 [ ]
k7 relation c10:about:0 0 [ ]
k7 role c13:theme:1 0 [ ]
k7 role c7:experiencer:-1 0 [ ]
k7 role c12:agent:-1 0 [ ]
k8 concept c14:statement:0 0 [ ]
k8 concept c15:truth:0 0 [ ]
k8 event c17:make:0 0 [ ]
k8 referent k8:e2 0 [ ]
k8 referent k8:x7 0 [ ]
k8 relation c16:about:0 0 [ ]
k8 role c19:theme:1 0 [ ]
k8 role c18:agent:-1 0 [ ]
c1:or antecedent k5 0 [ ]
c1:or consequent k6 0 [ ]
c13:theme:1 ext k7:x5 0 [ ]
c19:theme:1 ext k8:x7 0 [ ]
c20:equality ext k4:p1:x3 0 [ ]
c21:experiencer:-1 ext k4:s1 0 [ ]
c4:equality ext k4:p1:x4 0 [ ]
c5:or antecedent k7 0 [ ]
c5:or consequent k8 0 [ ]
c7:experiencer:-1 ext k7:s2 0 [ ]
k4:p1 binary c1:or 0 [ ]
k4:p1 binary c5:or 0 [ ]
k4:p1 relation c4:equality 0 [ ]
c12:agent:-1 ext k7:e1 0 [ ]
c18:agent:-1 ext k8:e2 0 [ ]
c24:in:0 ext k4:x2 1 [ In ]
c22:ancient:0 arg k4:s1 1 [ ancient ]
c21:experiencer:-1 int k4:x2 2 [ ]
c23:time:0 instance k4:x2 3 [ times ]
c24:in:0 int k4:p1 1 [ ]
k4 punctuation k4:x2 4 [ , ]
k4 referent k4:x1 1 [ an ]
c0:oracle:0 instance k4:x1 2 [ oracle ]
k4:p1 relation c20:equality 1 [ was ]
k4:p1 referent k4:p1:x3 1 [ a ]
c20:equality int k4:x1 3 [ ]
c2:priest:0 instance k4:p1:x3 2 [ priest ]
k4:p1 function k4:p1:x3 3 [ or ]
c3:priestess:0 instance k4:p1:x3 4 [ priestess ]
k4:p1 referent k4:p1:x4 1 [ who ]
c4:equality int k4:p1:x3 5 [ ]
c11:make:0 instance k7:e1 1 [ made ]
c17:make:0 instance k8:e2 1 [ ]
c12:agent:-1 int k4:p1:x4 2 [ ]
c18:agent:-1 int k4:p1:x4 3 [ ]
c14:statement:0 instance k8:x7 1 [ ]
c6:statement:0 instance k7:x5 1 [ statements ]
c13:theme:1 int k7:e1 2 [ ]
c19:theme:1 int k8:e2 2 [ ]
c10:about:0 ext k7:x6 1 [ about ]
c8:future:0 arg k7:s2 1 [ future ]
c10:about:0 int k7:x5 2 [ ]
c9:event:0 instance k7:x6 2 [ events ]
k7 surface k7:s2 2 [ or ]
c7:experiencer:-1 int k7:x6 3 [ ]
c16:about:0 ext k8:x8 1 [ about ]
k8 referent k8:x8 2 [ the ]
c15:truth:0 instance k8:x8 3 [ truth ]
c16:about:0 int k8:x7 2 [ ]
k8 punctuation k8:x8 4 [ . ]


!.
0.1125
0.1011
A boy is a child who will grow up to be a man.
boy NN child NN who WP grow VB up RP be VB man NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:boy,pos:'NN',lemma:boy,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:child,pos:'NN',lemma:child,namex:'O'],1006:[tok:who,pos:'WP',lemma:who,namex:'O'],1007:[tok:will,pos:'MD',lemma:will,namex:'O'],1008:[tok:grow,pos:'VB',lemma:grow,namex:'O'],1009:[tok:up,pos:'RP',lemma:up,namex:'O'],1010:[tok:to,pos:'TO',lemma:to,namex:'O'],1011:[tok:be,pos:'VB',lemma:be,namex:'O'],1012:[tok:a,pos:'DT',lemma:a,namex:'O'],1013:[tok:man,pos:'NN',lemma:man,namex:'O'],1014:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[]:E,[1006]:F,[1004]:G],[[1003]:eq(C,G),[]:prop(D,drs([[]:H,[1010]:I],[[1009]:pred(H,up,r,0),[]:rel(H,I,topic,0),[]:rel(H,F,agent,0),[1008]:pred(H,grow,v,0),[]:prop(I,drs([[]:J],[[]:prop(J,drs([[1012]:K],[[1011]:eq(F,K),[1013]:pred(K,man,n,0)]))]))])),[]:rel(E,D,topic,0),[]:rel(E,F,agent,0),[1007]:pred(E,will,v,0),[]:eq(G,F),[1005]:pred(G,child,n,0)])),[1002]:pred(C,boy,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A boy is a child who will grow up to be a man . 
k4 concept c0:boy:0 0 [ ]
k4 referent k4:p1 0 [ ]
c10:topic:1 ext (k4:p1):p2:p3 0 [ ]
c12:equality ext k4:p1:x2 0 [ ]
c2:equality ext k4:p1:x3 0 [ ]
c5:topic:1 ext k4:p1:p2 0 [ ]
c7:equality ext (((k4:p1):p2):p3):p4:x4 0 [ ]
k4:p1 concept c1:child:0 0 [ ]
k4:p1 event c3:will:0 0 [ ]
k4:p1 referent k4:p1:e1 0 [ ]
k4:p1 referent k4:p1:p2 0 [ ]
k4:p1 relation c2:equality 0 [ ]
k4:p1 role c5:topic:1 0 [ ]
k4:p1 role c4:agent:-1 0 [ ]
k4:p1:p2 attribute c11:up:0 0 [ ]
k4:p1:p2 event c8:grow:0 0 [ ]
k4:p1:p2 referent (k4:p1):p2:e2 0 [ ]
k4:p1:p2 role c10:topic:1 0 [ ]
k4:p1:p2 role c9:agent:-1 0 [ ]
(k4:p1):p2:p3 referent ((k4:p1):p2):p3:p4 0 [ ]
((k4:p1):p2):p3:p4 concept c6:man:0 0 [ ]
c4:agent:-1 ext k4:p1:e1 0 [ ]
c9:agent:-1 ext (k4:p1):p2:e2 0 [ ]
k4 referent k4:x1 1 [ A ]
c0:boy:0 instance k4:x1 2 [ boy ]
k4:p1 relation c12:equality 1 [ is ]
k4:p1 referent k4:p1:x2 1 [ a ]
c12:equality int k4:x1 3 [ ]
c1:child:0 instance k4:p1:x2 2 [ child ]
k4:p1 referent k4:p1:x3 1 [ who ]
c2:equality int k4:p1:x2 3 [ ]
c3:will:0 instance k4:p1:e1 1 [ will ]
c4:agent:-1 int k4:p1:x3 2 [ ]
c8:grow:0 instance (k4:p1):p2:e2 1 [ grow ]
c9:agent:-1 int k4:p1:x3 3 [ ]
c11:up:0 arg (k4:p1):p2:e2 2 [ up ]
k4:p1:p2 referent (k4:p1):p2:p3 1 [ to ]
c5:topic:1 int k4:p1:e1 2 [ ]
c10:topic:1 int (k4:p1):p2:e2 3 [ ]
((k4:p1):p2):p3:p4 relation c7:equality 1 [ be ]
((k4:p1):p2):p3:p4 referent (((k4:p1):p2):p3):p4:x4 1 [ a ]
c6:man:0 instance (((k4:p1):p2):p3):p4:x4 2 [ man ]
((k4:p1):p2):p3:p4 punctuation (((k4:p1):p2):p3):p4:x4 3 [ . ]
c7:equality int k4:p1:x3 4 [ ]


!.
A sage is a person who is regarded as being very wise.
sage NN person NN who WP regarded VBN being VBG very RB wise JJ 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:sage,pos:'NN',lemma:sage,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:person,pos:'NN',lemma:person,namex:'O'],1006:[tok:who,pos:'WP',lemma:who,namex:'O'],1007:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1008:[tok:regarded,pos:'VBN',lemma:regard,namex:'O'],1009:[tok: (as),pos:'IN',lemma: (as),namex:'O'],1010:[tok:being,pos:'VBG',lemma:be,namex:'O'],1011:[tok:very,pos:'RB',lemma:very,namex:'O'],1012:[tok:wise,pos:'JJ',lemma:wise,namex:'O'],1013:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[]:E,[]:F,[1006]:G,[1004]:H],[[1003]:eq(C,H),[1009]:rel(F,D,as,0),[1011]:pred(D,very,r,0),[]:rel(D,E,experiencer,0),[1012]:pred(D,wise,a,0),[]:rel(F,G,theme,0),[1008]:pred(F,regard,v,0),[]:eq(H,G),[1005]:pred(H,person,n,0)])),[1002]:pred(C,sage,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A sage is a person who is regarded as being very wise . 
k3 concept c0:sage:0 0 [ ]
k3 referent k3:p1 0 [ ]
c2:equality ext k3:p1:x3 0 [ ]
c6:experiencer:1 ext k3:p1:x4 0 [ ]
c6:experiencer:1 int k3:p1:s1 0 [ ]
c9:equality ext k3:p1:x2 0 [ ]
k3:p1 attribute c5:wise:0 0 [ ]
k3:p1 attribute c7:very:0 0 [ ]
k3:p1 concept c1:person:0 0 [ ]
k3:p1 event c3:regard:0 0 [ ]
k3:p1 referent k3:p1:e1 0 [ ]
k3:p1 referent k3:p1:s1 0 [ ]
k3:p1 referent k3:p1:x4 0 [ ]
k3:p1 relation c2:equality 0 [ ]
k3:p1 relation c8:as:0 0 [ ]
k3:p1 role c6:experiencer:1 0 [ ]
k3:p1 role c4:theme:-1 0 [ ]
c4:theme:-1 ext k3:p1:e1 0 [ ]
k3 referent k3:x1 1 [ A ]
c0:sage:0 instance k3:x1 2 [ sage ]
k3:p1 relation c9:equality 1 [ is ]
k3:p1 referent k3:p1:x2 1 [ a ]
c9:equality int k3:x1 3 [ ]
c1:person:0 instance k3:p1:x2 2 [ person ]
k3:p1 referent k3:p1:x3 1 [ who ]
c2:equality int k3:p1:x2 3 [ ]
k3:p1 surface k3:p1:e1 1 [ is ]
c4:theme:-1 int k3:p1:x3 2 [ ]
c3:regard:0 instance k3:p1:e1 2 [ regarded ]
c8:as:0 ext k3:p1:s1 1 [ as ]
k3:p1 surface k3:p1:s1 2 [ being ]
c8:as:0 int k3:p1:e1 3 [ ]
c7:very:0 arg k3:p1:s1 3 [ very ]
k3:p1:s1 main k3:p1 1 [ ]
c5:wise:0 arg k3:p1:s1 4 [ wise ]
k3 punctuation k3:p1 2 [ . ]


!.
0.0425
0.2305
An automobile is a car.
automobile NN car NN 
sem(1,[1001:[tok:'An',pos:'DT',lemma:an,namex:'O'],1002:[tok:automobile,pos:'NN',lemma:automobile,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:car,pos:'NN',lemma:car,namex:'O'],1006:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[1004]:D],[[1003]:eq(C,D),[1005]:pred(D,car,n,0)])),[1002]:pred(C,automobile,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% An automobile is a car . 
k2 concept c0:automobile:0 0 [ ]
k2 referent k2:p1 0 [ ]
c2:equality ext k2:p1:x2 0 [ ]
k2:p1 concept c1:car:0 0 [ ]
k2 referent k2:x1 1 [ An ]
c0:automobile:0 instance k2:x1 2 [ automobile ]
k2:p1 relation c2:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ a ]
c1:car:0 instance k2:p1:x2 2 [ car ]
c2:equality int k2:x1 3 [ ]
k2:p1 punctuation k2:p1:x2 3 [ . ]


!.
A cushion is a fabric case filled with soft material, which you put on a seat to make it more comfortable.
cushion NN fabric NN case NN filled VBN soft JJ material NN which WDT you PRP put VBP seat NN make VB it PRP more RBR comfortable JJ 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:cushion,pos:'NN',lemma:cushion,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:fabric,pos:'NN',lemma:fabric,namex:'O'],1006:[tok:case,pos:'NN',lemma:case,namex:'O'],1007:[tok:filled,pos:'VBN',lemma:fill,namex:'O'],1008:[tok:with,pos:'IN',lemma:with,namex:'O'],1009:[tok:soft,pos:'JJ',lemma:soft,namex:'O'],1010:[tok:material,pos:'NN',lemma:material,namex:'O'],1011:[tok: (','),pos: (','),lemma: (','),namex:'O'],1012:[tok:which,pos:'WDT',lemma:which,namex:'O'],1013:[tok:you,pos:'PRP',lemma:you,namex:'O'],1014:[tok:put,pos:'VBP',lemma:put,namex:'O'],1015:[tok:on,pos:'IN',lemma:on,namex:'O'],1016:[tok:a,pos:'DT',lemma:a,namex:'O'],1017:[tok:seat,pos:'NN',lemma:seat,namex:'O'],1018:[tok:to,pos:'TO',lemma:to,namex:'O'],1019:[tok:make,pos:'VB',lemma:make,namex:'O'],1020:[tok:it,pos:'PRP',lemma:it,namex:'O'],1021:[tok:more,pos:'RBR',lemma:more,namex:'O'],1022:[tok:comfortable,pos:'JJ',lemma:comfortable,namex:'O'],1023:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[]:C],[[1020]:pred(B,thing,n,12),[1013]:pred(C,person,n,1)]),drs([[]:D,[1001]:E],[[]:prop(D,drs([[1018]:F,[1016]:G,[]:H,[1012]:I,[]:J,[]:K,[]:L,[]:M,[]:N,[1004]:O],[[1003]:eq(E,O),[]:rel(H,F,for,0),[]:prop(F,drs([[]:P,[]:Q,[]:R],[[]:prop(P,drs([[]:S],[[1021]:pred(S,more,r,0),[]:rel(S,B,experiencer,0),[1022]:pred(S,comfortable,a,0)])),[]:rel(Q,P,recipient,0),[]:rel(Q,R,agent,0),[]:rel(Q,B,topic,0),[1019]:pred(Q,make,v,0)])),[1015]:rel(H,G,on,0),[1017]:pred(G,seat,n,0),[]:rel(H,I,theme,0),[]:rel(H,C,agent,0),[1014]:pred(H,put,v,0),[]:eq(O,I),[1008]:rel(L,K,with,0),[1010]:pred(K,material,n,0),[1009]:pred(J,soft,a,0),[]:rel(J,K,experiencer,0),[]:rel(L,M,theme,0),[1007]:pred(L,fill,v,0),[]:eq(O,M),[1006]:pred(O,case,n,0),[]:rel(O,N,of,0),[1005]:pred(N,fabric,n,0)])),[1002]:pred(E,cushion,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A cushion is a fabric case filled with soft material , which you put on a seat to make it more comfortable . 
k5 concept c0:cushion:0 0 [ ]
k5 referent k5:p1 0 [ ]
c12:equality ext k5:p1:x7 0 [ ]
c14:agent:1 ext k5:p1:x6 0 [ ]
c2:of:0 ext k5:p1:x3 0 [ ]
c20:topic:1 ext (k5:p1):p2:x10 0 [ ]
c21:agent:1 ext (k5:p1):p2:x9 0 [ ]
c21:agent:1 int (k5:p1):p2:e3 0 [ ]
c22:recipient:1 ext (k5:p1):p2:p3 0 [ ]
c24:experiencer:1 ext (k5:p1):p2:x10 0 [ ]
c26:for:0 ext k5:p1:p2 0 [ ]
c27:equality ext k5:p1:x2 0 [ ]
c4:equality ext k5:p1:x4 0 [ ]
c7:experiencer:-1 ext k5:p1:s1 0 [ ]
k5:p1 attribute c8:soft:0 0 [ ]
k5:p1 concept c1:fabric:0 0 [ ]
k5:p1 concept c11:person:1 0 [ ]
k5:p1 concept c16:seat:0 0 [ ]
k5:p1 concept c3:case:0 0 [ ]
k5:p1 concept c9:material:0 0 [ ]
k5:p1 event c13:put:0 0 [ ]
k5:p1 event c5:fill:0 0 [ ]
k5:p1 referent k5:p1:e1 0 [ ]
k5:p1 referent k5:p1:e2 0 [ ]
k5:p1 referent k5:p1:s1 0 [ ]
k5:p1 referent k5:p1:x3 0 [ ]
k5:p1 referent k5:p1:x4 0 [ ]
k5:p1 referent k5:p1:x5 0 [ ]
k5:p1 referent k5:p1:x6 0 [ ]
k5:p1 relation c10:with:0 0 [ ]
k5:p1 relation c12:equality 0 [ ]
k5:p1 relation c17:on:0 0 [ ]
k5:p1 relation c2:of:0 0 [ ]
k5:p1 relation c26:for:0 0 [ ]
k5:p1 relation c4:equality 0 [ ]
k5:p1 role c14:agent:1 0 [ ]
k5:p1 role c7:experiencer:-1 0 [ ]
k5:p1 role c15:theme:-1 0 [ ]
k5:p1 role c6:theme:-1 0 [ ]
k5:p1:p2 concept c18:thing:12 0 [ ]
k5:p1:p2 event c19:make:0 0 [ ]
k5:p1:p2 referent (k5:p1):p2:e3 0 [ ]
k5:p1:p2 referent (k5:p1):p2:p3 0 [ ]
k5:p1:p2 referent (k5:p1):p2:x10 0 [ ]
k5:p1:p2 referent (k5:p1):p2:x9 0 [ ]
k5:p1:p2 role c20:topic:1 0 [ ]
k5:p1:p2 role c21:agent:1 0 [ ]
k5:p1:p2 role c22:recipient:1 0 [ ]
(k5:p1):p2:p3 attribute c23:comfortable:0 0 [ ]
(k5:p1):p2:p3 attribute c25:more:0 0 [ ]
(k5:p1):p2:p3 referent ((k5:p1):p2):p3:s2 0 [ ]
(k5:p1):p2:p3 role c24:experiencer:1 0 [ ]
c15:theme:-1 ext k5:p1:e2 0 [ ]
c6:theme:-1 ext k5:p1:e1 0 [ ]
k5 referent k5:x1 1 [ A ]
c0:cushion:0 instance k5:x1 2 [ cushion ]
k5:p1 relation c27:equality 1 [ is ]
k5:p1 referent k5:p1:x2 1 [ a ]
c27:equality int k5:x1 3 [ ]
c1:fabric:0 instance k5:p1:x3 1 [ fabric ]
c2:of:0 int k5:p1:x2 2 [ ]
c3:case:0 instance k5:p1:x2 3 [ case ]
c5:fill:0 instance k5:p1:e1 1 [ filled ]
c6:theme:-1 int k5:p1:x4 1 [ ]
c4:equality int k5:p1:x2 4 [ ]
c10:with:0 ext k5:p1:x5 1 [ with ]
c8:soft:0 arg k5:p1:s1 1 [ soft ]
c7:experiencer:-1 int k5:p1:x5 2 [ ]
c9:material:0 instance k5:p1:x5 3 [ material ]
c10:with:0 int k5:p1:e1 2 [ ]
k5:p1 punctuation k5:p1:x5 4 [ , ]
k5:p1 referent k5:p1:x7 1 [ which ]
c12:equality int k5:p1:x2 5 [ ]
c11:person:1 instance k5:p1:x6 1 [ you ]
c14:agent:1 int k5:p1:e2 1 [ ]
c13:put:0 instance k5:p1:e2 2 [ put ]
c15:theme:-1 int k5:p1:x7 2 [ ]
c17:on:0 ext k5:p1:x8 1 [ on ]
k5:p1 referent k5:p1:x8 2 [ a ]
c17:on:0 int k5:p1:e2 3 [ ]
c16:seat:0 instance k5:p1:x8 3 [ seat ]
k5:p1 referent k5:p1:p2 1 [ to ]
c26:for:0 int k5:p1:e2 4 [ ]
c19:make:0 instance (k5:p1):p2:e3 1 [ make ]
(k5:p1):p2:e3 main k5:p1:p2 2 [ ]
c18:thing:12 instance (k5:p1):p2:x10 1 [ it ]
c24:experiencer:1 int ((k5:p1):p2):p3:s2 1 [ ]
c20:topic:1 int (k5:p1):p2:e3 2 [ ]
c25:more:0 arg ((k5:p1):p2):p3:s2 2 [ more ]
((k5:p1):p2):p3:s2 main (k5:p1):p2:p3 1 [ ]
c23:comfortable:0 arg ((k5:p1):p2):p3:s2 3 [ comfortable ]
k5:p1:p2 punctuation (k5:p1):p2:p3 2 [ . ]
c22:recipient:1 int (k5:p1):p2:e3 3 [ ]


!.
0.0200
0.0330
A mound of something is a large rounded pile of it.
mound NN large JJ rounded JJ pile NN it PRP 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:mound,pos:'NN',lemma:mound,namex:'O'],1003:[tok:of,pos:'IN',lemma:of,namex:'O'],1004:[tok:something,pos:'DT',lemma:something,namex:'O'],1005:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1006:[tok:a,pos:'DT',lemma:a,namex:'O'],1007:[tok:large,pos:'JJ',lemma:large,namex:'O'],1008:[tok:rounded,pos:'JJ',lemma:rounded,namex:'O'],1009:[tok:pile,pos:'NN',lemma:pile,namex:'O'],1010:[tok:of,pos:'IN',lemma:of,namex:'O'],1011:[tok:it,pos:'PRP',lemma:it,namex:'O'],1012:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B],[[1011]:pred(B,thing,n,12)]),drs([[]:C,[]:D,[1001]:E],[[]:prop(C,drs([[]:F,[]:G,[1006]:H],[[1005]:eq(E,H),[1010]:rel(H,B,of,0),[1009]:pred(H,pile,n,0),[1008]:pred(F,rounded,a,0),[]:rel(F,H,experiencer,0),[1007]:pred(G,large,a,0),[]:rel(G,H,experiencer,0)])),[1003]:rel(E,D,of,0),[1004]:pred(D,thing,n,12),[1002]:pred(E,mound,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A mound of something is a large rounded pile of it . 
k2 concept c0:mound:0 0 [ ]
k2 concept c1:thing:12 0 [ ]
k2 referent k2:p1 0 [ ]
k2 referent k2:x2 0 [ ]
k2 relation c2:of:0 0 [ ]
c10:equality ext k2:p1:x3 0 [ ]
c3:experiencer:-1 ext k2:p1:s1 0 [ ]
c5:experiencer:-1 ext k2:p1:s2 0 [ ]
k2:p1 attribute c4:large:0 0 [ ]
k2:p1 attribute c6:rounded:0 0 [ ]
k2:p1 concept c7:pile:0 0 [ ]
k2:p1 concept c8:thing:12 0 [ ]
k2:p1 referent k2:p1:s1 0 [ ]
k2:p1 referent k2:p1:s2 0 [ ]
k2:p1 referent k2:p1:x4 0 [ ]
k2:p1 relation c9:of:0 0 [ ]
k2:p1 role c3:experiencer:-1 0 [ ]
k2:p1 role c5:experiencer:-1 0 [ ]
k2 referent k2:x1 1 [ A ]
c0:mound:0 instance k2:x1 2 [ mound ]
c2:of:0 ext k2:x2 1 [ of ]
c1:thing:12 instance k2:x2 2 [ something ]
c2:of:0 int k2:x1 3 [ ]
k2:p1 relation c10:equality 1 [ is ]
k2:p1 referent k2:p1:x3 1 [ a ]
c10:equality int k2:x1 4 [ ]
c4:large:0 arg k2:p1:s1 1 [ large ]
c3:experiencer:-1 int k2:p1:x3 2 [ ]
c6:rounded:0 arg k2:p1:s2 1 [ rounded ]
c5:experiencer:-1 int k2:p1:x3 3 [ ]
c7:pile:0 instance k2:p1:x3 4 [ pile ]
c9:of:0 ext k2:p1:x4 1 [ of ]
c8:thing:12 instance k2:p1:x4 2 [ it ]
k2:p1 punctuation k2:p1:x4 3 [ . ]
c9:of:0 int k2:p1:x3 5 [ ]


!.
The shores or shore of a sea, lake, or wide river is the land along the edge of it.
shores NNS shore NN sea NN lake NN wide JJ river NN land NN edge NN it PRP 
sem(1,[1001:[tok:'The',pos:'DT',lemma:the,namex:'O'],1002:[tok:shores,pos:'NNS',lemma:shore,namex:'O'],1003:[tok:or,pos:'CC',lemma:or,namex:'O'],1004:[tok:shore,pos:'NN',lemma:shore,namex:'O'],1005:[tok:of,pos:'IN',lemma:of,namex:'O'],1006:[tok:a,pos:'DT',lemma:a,namex:'O'],1007:[tok:sea,pos:'NN',lemma:sea,namex:'O'],1008:[tok: (','),pos: (','),lemma: (','),namex:'O'],1009:[tok:lake,pos:'NN',lemma:lake,namex:'O'],1010:[tok: (','),pos: (','),lemma: (','),namex:'O'],1011:[tok:or,pos:'CC',lemma:or,namex:'O'],1012:[tok:wide,pos:'JJ',lemma:wide,namex:'O'],1013:[tok:river,pos:'NN',lemma:river,namex:'O'],1014:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1015:[tok:the,pos:'DT',lemma:the,namex:'O'],1016:[tok:land,pos:'NN',lemma:land,namex:'O'],1017:[tok:along,pos:'IN',lemma:along,namex:'O'],1018:[tok:the,pos:'DT',lemma:the,namex:'O'],1019:[tok:edge,pos:'NN',lemma:edge,namex:'O'],1020:[tok:of,pos:'IN',lemma:of,namex:'O'],1021:[tok:it,pos:'PRP',lemma:it,namex:'O'],1022:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[1018]:C,[1015]:D,[]:E,[1018]:F,[1015]:G,[1001]:H],[[1021]:pred(B,thing,n,12),[1019]:pred(C,edge,n,0),[1016]:pred(D,land,n,0),[1021]:pred(E,thing,n,12),[1019]:pred(F,edge,n,0),[1016]:pred(G,land,n,0),[1003]:or(drs([],[[1002]:pred(H,shore,n,0)]),drs([],[[1004]:pred(H,shore,n,0)]))]),drs([],[[1011]:or(drs([[]:I,[]:J,[1006]:K],[[]:prop(I,drs([],[[1014]:eq(H,G),[1017]:rel(G,F,along,0),[1020]:rel(F,E,of,0)])),[1005]:rel(H,K,of,0),[1008]:rel(K,J,rel,2),[1009]:pred(J,lake,n,0),[1007]:pred(K,sea,n,0)]),drs([[]:L,[]:M,[]:N],[[]:prop(L,drs([],[[1014]:eq(N,D),[1017]:rel(D,C,along,0),[1020]:rel(C,B,of,0)])),[1013]:pred(N,river,n,0),[1012]:pred(M,wide,a,0),[]:rel(M,N,experiencer,0)]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% The shores or shore of a sea , lake , or wide river is the land along the edge of it . 
k2 binary c0:or 0 [ ]
k3 binary c1:or 0 [ ]
k3 concept c4:sea:0 0 [ ]
k3 concept c5:lake:0 0 [ ]
k3 referent k3:p1 0 [ ]
k3 referent k3:x3 0 [ ]
k3 relation c6:rel:2 0 [ ]
k3 relation c7:of:0 0 [ ]
k4 concept c2:shore:0 0 [ ]
k5 concept c3:shore:0 0 [ ]
k6 attribute c15:wide:0 0 [ ]
k6 concept c16:river:0 0 [ ]
k6 referent k6:p2 0 [ ]
k6 referent k6:s1 0 [ ]
k6 referent k6:x7 0 [ ]
k6 role c14:experiencer:-1 0 [ ]
c0:or antecedent k3 0 [ ]
c0:or consequent k6 0 [ ]
c1:or antecedent k4 0 [ ]
c1:or consequent k5 0 [ ]
c13:equality ext k3:p1:x4 0 [ ]
c14:experiencer:-1 ext k6:s1 0 [ ]
c22:equality ext k6:p2:x8 0 [ ]
k3:p1 concept c10:thing:12 0 [ ]
k3:p1 concept c8:land:0 0 [ ]
k3:p1 concept c9:edge:0 0 [ ]
k3:p1 referent k3:p1:x6 0 [ ]
k3:p1 relation c11:of:0 0 [ ]
k3:p1 relation c12:along:0 0 [ ]
k6:p2 concept c17:land:0 0 [ ]
k6:p2 concept c18:edge:0 0 [ ]
k6:p2 concept c19:thing:12 0 [ ]
k6:p2 referent k6:p2:x10 0 [ ]
k6:p2 relation c20:of:0 0 [ ]
k6:p2 relation c21:along:0 0 [ ]
k3 referent k3:x1 1 [ The ]
c2:shore:0 instance k3:x1 2 [ shores ]
k3 function k3:x1 3 [ or ]
c3:shore:0 instance k3:x1 4 [ shore ]
c7:of:0 ext k3:x2 1 [ of ]
k3 referent k3:x2 2 [ a ]
c7:of:0 int k3:x1 5 [ ]
c4:sea:0 instance k3:x2 3 [ sea ]
c6:rel:2 ext k3:x3 1 [ , ]
c5:lake:0 instance k3:x3 2 [ lake ]
k3 punctuation k3:x3 3 [ , ]
c6:rel:2 int k3:x2 4 [ ]
k6 surface k6:s1 1 [ or ]
c14:experiencer:-1 int k6:x7 1 [ ]
c15:wide:0 arg k6:s1 2 [ wide ]
c16:river:0 instance k6:x7 2 [ river ]
k3:p1 relation c13:equality 1 [ is ]
k6:p2 relation c22:equality 1 [ ]
k3:p1 referent k3:p1:x4 1 [ the ]
k6:p2 referent k6:p2:x8 1 [ ]
c22:equality int k6:x7 3 [ ]
c13:equality int k3:x1 6 [ ]
c17:land:0 instance k6:p2:x8 2 [ ]
c8:land:0 instance k3:p1:x4 2 [ land ]
c12:along:0 ext k3:p1:x5 1 [ along ]
c21:along:0 ext k6:p2:x9 1 [ ]
k3:p1 referent k3:p1:x5 2 [ the ]
k6:p2 referent k6:p2:x9 2 [ ]
c12:along:0 int k3:p1:x4 3 [ ]
c21:along:0 int k6:p2:x8 3 [ ]
c18:edge:0 instance k6:p2:x9 3 [ ]
c9:edge:0 instance k3:p1:x5 3 [ edge ]
c11:of:0 ext k3:p1:x6 1 [ of ]
c20:of:0 ext k6:p2:x10 1 [ ]
c10:thing:12 instance k3:p1:x6 2 [ it ]
c19:thing:12 instance k6:p2:x10 2 [ ]
c11:of:0 int k3:p1:x5 4 [ ]
k6:p2 punctuation k6:p2:x10 3 [ . ]
c20:of:0 int k6:p2:x9 4 [ ]


!.
0.0350
0.0386
A lad is a young man or boy.
lad NN young JJ man NN boy NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:lad,pos:'NN',lemma:lad,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:young,pos:'JJ',lemma:young,namex:'O'],1006:[tok:man,pos:'NN',lemma:man,namex:'O'],1007:[tok:or,pos:'CC',lemma:or,namex:'O'],1008:[tok:boy,pos:'NN',lemma:boy,namex:'O'],1009:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[1004]:E],[[1003]:eq(C,E),[1007]:or(drs([],[[1006]:pred(E,man,n,0)]),drs([],[[1008]:pred(E,boy,n,0)])),[1005]:pred(D,young,a,0),[]:rel(D,E,experiencer,0)])),[1002]:pred(C,lad,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A lad is a young man or boy . 
k2 concept c0:lad:0 0 [ ]
k2 referent k2:p1 0 [ ]
k3 concept c4:man:0 0 [ ]
k4 concept c5:boy:0 0 [ ]
c1:experiencer:-1 ext k2:p1:s1 0 [ ]
c3:or antecedent k3 0 [ ]
c3:or consequent k4 0 [ ]
c6:equality ext k2:p1:x2 0 [ ]
k2:p1 attribute c2:young:0 0 [ ]
k2:p1 binary c3:or 0 [ ]
k2:p1 referent k2:p1:s1 0 [ ]
k2:p1 role c1:experiencer:-1 0 [ ]
k2 referent k2:x1 1 [ A ]
c0:lad:0 instance k2:x1 2 [ lad ]
k2:p1 relation c6:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ a ]
c2:young:0 arg k2:p1:s1 1 [ young ]
c1:experiencer:-1 int k2:p1:x2 2 [ ]
c4:man:0 instance k2:p1:x2 3 [ man ]
k2:p1 function k2:p1:x2 4 [ or ]
c5:boy:0 instance k2:p1:x2 5 [ boy ]
c6:equality int k2:x1 3 [ ]
k2:p1 punctuation k2:p1:x2 6 [ . ]


!.
In legends and fairy stories, a wizard is a man who has magic powers.
legends NNS fairy JJ stories NNS wizard NN man NN who WP magic JJ powers NNS 
sem(1,[1001:[tok:'In',pos:'IN',lemma:in,namex:'O'],1002:[tok:legends,pos:'NNS',lemma:legend,namex:'O'],1003:[tok:and,pos:'CC',lemma:and,namex:'O'],1004:[tok:fairy,pos:'JJ',lemma:fairy,namex:'O'],1005:[tok:stories,pos:'NNS',lemma:story,namex:'O'],1006:[tok: (','),pos: (','),lemma: (','),namex:'O'],1007:[tok:a,pos:'DT',lemma:a,namex:'O'],1008:[tok:wizard,pos:'NN',lemma:wizard,namex:'O'],1009:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1010:[tok:a,pos:'DT',lemma:a,namex:'O'],1011:[tok:man,pos:'NN',lemma:man,namex:'O'],1012:[tok:who,pos:'WP',lemma:who,namex:'O'],1013:[tok:has,pos:'VBZ',lemma:have,namex:'O'],1014:[tok:magic,pos:'JJ',lemma:magic,namex:'O'],1015:[tok:powers,pos:'NNS',lemma:power,namex:'O'],1016:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[]:C,[]:D,[1003]:E,[]:F,[1007]:G],[[1001]:rel(F,E,in,0),[]:rel(C,E,subset_of,1),[1005]:pred(C,story,n,0),[1004]:pred(B,fairy,a,0),[]:rel(B,C,experiencer,0),[]:rel(D,E,subset_of,1),[1002]:pred(D,legend,n,0),[]:prop(F,drs([[]:H,[]:I,[]:J,[1012]:K,[1010]:L],[[1009]:eq(G,L),[]:rel(H,J,theme,0),[]:rel(H,K,agent,0),[1013]:pred(H,have,v,0),[1015]:pred(J,power,n,0),[1014]:pred(I,magic,a,0),[]:rel(I,J,experiencer,0),[]:eq(L,K),[1011]:pred(L,man,n,0)])),[1008]:pred(G,wizard,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% In legends and fairy stories , a wizard is a man who has magic powers . 
k3 attribute c13:fairy:0 0 [ ]
k3 concept c0:wizard:0 0 [ ]
k3 concept c10:legend:0 0 [ ]
k3 concept c14:story:0 0 [ ]
k3 referent k3:p1 0 [ ]
k3 referent k3:s1 0 [ ]
k3 referent k3:x3 0 [ ]
k3 referent k3:x4 0 [ ]
k3 relation c11:superset_of:1 0 [ ]
k3 relation c15:superset_of:1 0 [ ]
k3 relation c16:in:0 0 [ ]
k3 role c12:experiencer:-1 0 [ ]
c11:superset_of:1 ext k3:x3 0 [ ]
c12:experiencer:-1 ext k3:s1 0 [ ]
c15:superset_of:1 ext k3:x4 0 [ ]
c2:equality ext k3:p1:x6 0 [ ]
c3:experiencer:-1 ext k3:p1:s2 0 [ ]
c8:theme:1 ext k3:p1:x7 0 [ ]
c9:equality ext k3:p1:x5 0 [ ]
k3:p1 attribute c4:magic:0 0 [ ]
k3:p1 concept c1:man:0 0 [ ]
k3:p1 concept c5:power:0 0 [ ]
k3:p1 event c6:have:0 0 [ ]
k3:p1 referent k3:p1:e1 0 [ ]
k3:p1 referent k3:p1:s2 0 [ ]
k3:p1 referent k3:p1:x7 0 [ ]
k3:p1 relation c2:equality 0 [ ]
k3:p1 role c3:experiencer:-1 0 [ ]
k3:p1 role c8:theme:1 0 [ ]
k3:p1 role c7:agent:-1 0 [ ]
c7:agent:-1 ext k3:p1:e1 0 [ ]
c16:in:0 ext k3:x2 1 [ In ]
c10:legend:0 instance k3:x3 1 [ legends ]
c11:superset_of:1 int k3:x2 2 [ ]
c16:in:0 int k3:p1 1 [ ]
k3 referent k3:x2 3 [ and ]
c12:experiencer:-1 int k3:x4 1 [ ]
c13:fairy:0 arg k3:s1 1 [ fairy ]
c14:story:0 instance k3:x4 2 [ stories ]
k3 punctuation k3:x4 3 [ , ]
c15:superset_of:1 int k3:x2 4 [ ]
k3 referent k3:x1 1 [ a ]
c0:wizard:0 instance k3:x1 2 [ wizard ]
k3:p1 relation c9:equality 1 [ is ]
k3:p1 referent k3:p1:x5 1 [ a ]
c9:equality int k3:x1 3 [ ]
c1:man:0 instance k3:p1:x5 2 [ man ]
k3:p1 referent k3:p1:x6 1 [ who ]
c2:equality int k3:p1:x5 3 [ ]
c6:have:0 instance k3:p1:e1 1 [ has ]
c7:agent:-1 int k3:p1:x6 2 [ ]
c3:experiencer:-1 int k3:p1:x7 1 [ ]
c4:magic:0 arg k3:p1:s2 1 [ magic ]
c5:power:0 instance k3:p1:x7 2 [ powers ]
c8:theme:1 int k3:p1:e1 2 [ ]
k3:p1 punctuation k3:p1:x7 3 [ . ]


!.
0.0325
0.3939
A forest is a large area where trees grow close together.
forest NN large JJ area NN where WRB trees NNS grow VBP close RB together RB 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:forest,pos:'NN',lemma:forest,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:large,pos:'JJ',lemma:large,namex:'O'],1006:[tok:area,pos:'NN',lemma:area,namex:'O'],1007:[tok:where,pos:'WRB',lemma:where,namex:'O'],1008:[tok:trees,pos:'NNS',lemma:tree,namex:'O'],1009:[tok:grow,pos:'VBP',lemma:grow,namex:'O'],1010:[tok:close,pos:'RB',lemma:close,namex:'O'],1011:[tok:together,pos:'RB',lemma:together,namex:'O'],1012:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[]:E,[1004]:F],[[1003]:eq(C,F),[]:prop(D,drs([[]:G,[]:H],[[1010]:pred(G,close,r,0),[1011]:pred(G,together,r,0),[]:rel(G,H,agent,0),[1009]:pred(G,grow,v,0),[1008]:pred(H,tree,n,0)])),[1007]:rel(F,D,where,0),[1006]:pred(F,area,n,0),[1005]:pred(E,large,a,0),[]:rel(E,F,experiencer,0)])),[1002]:pred(C,forest,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A forest is a large area where trees grow close together . 
k3 concept c0:forest:0 0 [ ]
k3 referent k3:p1 0 [ ]
c1:experiencer:-1 ext k3:p1:s1 0 [ ]
c10:equality ext k3:p1:x2 0 [ ]
c7:agent:1 ext (k3:p1):p2:x3 0 [ ]
k3:p1 attribute c2:large:0 0 [ ]
k3:p1 concept c3:area:0 0 [ ]
k3:p1 referent k3:p1:p2 0 [ ]
k3:p1 referent k3:p1:s1 0 [ ]
k3:p1 relation c4:where:0 0 [ ]
k3:p1 role c1:experiencer:-1 0 [ ]
k3:p1:p2 attribute c8:together:0 0 [ ]
k3:p1:p2 attribute c9:close:0 0 [ ]
k3:p1:p2 concept c5:tree:0 0 [ ]
k3:p1:p2 event c6:grow:0 0 [ ]
k3:p1:p2 referent (k3:p1):p2:e1 0 [ ]
k3:p1:p2 referent (k3:p1):p2:x3 0 [ ]
k3:p1:p2 role c7:agent:1 0 [ ]
k3 referent k3:x1 1 [ A ]
c0:forest:0 instance k3:x1 2 [ forest ]
k3:p1 relation c10:equality 1 [ is ]
k3:p1 referent k3:p1:x2 1 [ a ]
c10:equality int k3:x1 3 [ ]
c2:large:0 arg k3:p1:s1 1 [ large ]
c1:experiencer:-1 int k3:p1:x2 2 [ ]
c3:area:0 instance k3:p1:x2 3 [ area ]
c4:where:0 ext k3:p1:p2 1 [ where ]
c4:where:0 int k3:p1:x2 4 [ ]
c5:tree:0 instance (k3:p1):p2:x3 1 [ trees ]
c7:agent:1 int (k3:p1):p2:e1 1 [ ]
c6:grow:0 instance (k3:p1):p2:e1 2 [ grow ]
(k3:p1):p2:e1 main k3:p1:p2 2 [ ]
c9:close:0 arg (k3:p1):p2:e1 3 [ close ]
c8:together:0 arg (k3:p1):p2:e1 4 [ together ]
k3:p1:p2 punctuation (k3:p1):p2:e1 5 [ . ]


!.
A graveyard is an area of land, sometimes near a church, where dead people are buried.
graveyard NN area NN land NN sometimes RB church NN where WRB dead JJ people NNS are VBP buried VBN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:graveyard,pos:'NN',lemma:graveyard,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:an,pos:'DT',lemma:an,namex:'O'],1005:[tok:area,pos:'NN',lemma:area,namex:'O'],1006:[tok:of,pos:'IN',lemma:of,namex:'O'],1007:[tok:land,pos:'NN',lemma:land,namex:'O'],1008:[tok: (','),pos: (','),lemma: (','),namex:'O'],1009:[tok:sometimes,pos:'RB',lemma:sometimes,namex:'O'],1010:[tok:near,pos:'IN',lemma:near,namex:'O'],1011:[tok:a,pos:'DT',lemma:a,namex:'O'],1012:[tok:church,pos:'NN',lemma:church,namex:'O'],1013:[tok: (','),pos: (','),lemma: (','),namex:'O'],1014:[tok:where,pos:'WRB',lemma:where,namex:'O'],1015:[tok:dead,pos:'JJ',lemma:dead,namex:'O'],1016:[tok:people,pos:'NNS',lemma:people,namex:'O'],1017:[tok:are,pos:'VBP',lemma:be,namex:'O'],1018:[tok:buried,pos:'VBN',lemma:bury,namex:'O'],1019:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1011]:C,[]:D,[1001]:E],[[1010]:rel(D,C,near,0),[]:prop(B,drs([[]:F,[]:G,[]:H],[[]:rel(F,H,theme,0),[1018]:pred(F,bury,v,0),[1016]:pred(H,people,n,0),[1015]:pred(G,dead,a,0),[]:rel(G,H,experiencer,0)])),[1014]:rel(C,B,where,0),[1012]:pred(C,church,n,0),[1009]:pred(D,sometimes,r,0),[]:prop(D,drs([[]:I,[1004]:J],[[1003]:eq(E,J),[1006]:rel(J,I,of,0),[1007]:pred(I,land,n,0),[1005]:pred(J,area,n,0)])),[1002]:pred(E,graveyard,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A graveyard is an area of land , sometimes near a church , where dead people are buried . 
k3 attribute c5:sometimes:0 0 [ ]
k3 concept c0:graveyard:0 0 [ ]
k3 concept c6:church:0 0 [ ]
k3 referent k3:p1 0 [ ]
k3 referent k3:p2 0 [ ]
k3 relation c13:near:0 0 [ ]
k3 relation c7:where:0 0 [ ]
c12:theme:1 ext k3:p2:x5 0 [ ]
c4:equality ext k3:p1:x3 0 [ ]
c8:experiencer:-1 ext k3:p2:s1 0 [ ]
k3:p1 concept c1:area:0 0 [ ]
k3:p1 concept c2:land:0 0 [ ]
k3:p1 referent k3:p1:x4 0 [ ]
k3:p1 relation c3:of:0 0 [ ]
k3:p2 attribute c9:dead:0 0 [ ]
k3:p2 concept c10:people:0 0 [ ]
k3:p2 event c11:bury:0 0 [ ]
k3:p2 referent k3:p2:e1 0 [ ]
k3:p2 referent k3:p2:s1 0 [ ]
k3:p2 referent k3:p2:x5 0 [ ]
k3:p2 role c12:theme:1 0 [ ]
k3:p2 role c8:experiencer:-1 0 [ ]
k3 referent k3:x1 1 [ A ]
c0:graveyard:0 instance k3:x1 2 [ graveyard ]
k3:p1 relation c4:equality 1 [ is ]
k3:p1 referent k3:p1:x3 1 [ an ]
c4:equality int k3:x1 3 [ ]
c1:area:0 instance k3:p1:x3 2 [ area ]
c3:of:0 ext k3:p1:x4 1 [ of ]
c2:land:0 instance k3:p1:x4 2 [ land ]
c3:of:0 int k3:p1:x3 3 [ ]
k3:p1 punctuation k3:p1:x4 3 [ , ]
c5:sometimes:0 arg k3:p1 1 [ sometimes ]
c13:near:0 ext k3:x2 1 [ near ]
k3 referent k3:x2 2 [ a ]
c6:church:0 instance k3:x2 3 [ church ]
c13:near:0 int k3:p1 2 [ ]
k3 punctuation k3:x2 4 [ , ]
c7:where:0 ext k3:p2 1 [ where ]
c8:experiencer:-1 int k3:p2:x5 1 [ ]
c9:dead:0 arg k3:p2:s1 1 [ dead ]
c12:theme:1 int k3:p2:e1 1 [ ]
c10:people:0 instance k3:p2:x5 2 [ people ]
k3:p2 surface k3:p2:e1 2 [ are ]
k3:p2:e1 main k3:p2 2 [ ]
c11:bury:0 instance k3:p2:e1 3 [ buried ]
k3 punctuation k3:p2 3 [ . ]
c7:where:0 int k3:x2 5 [ ]


!.
0.0650
0.2787
Food is what people and animals eat.
'Food' NN what WP people NNS animals NNS eat VBP 
sem(1,[1001:[tok:'Food',pos:'NN',lemma:food,namex:'O'],1002:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1003:[tok:what,pos:'WP',lemma:what,namex:'O'],1004:[tok:people,pos:'NNS',lemma:people,namex:'O'],1005:[tok:and,pos:'CC',lemma:and,namex:'O'],1006:[tok:animals,pos:'NNS',lemma:animal,namex:'O'],1007:[tok:eat,pos:'VBP',lemma:eat,namex:'O'],1008:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[]:C],[[]:prop(B,drs([],[[]:duplex(whq,drs([[]:D],[[1003]:pred(D,thing,n,12)]),D,drs([[]:E,[]:F,[]:G,[1005]:H],[[1002]:eq(C,D),[]:rel(E,D,theme,0),[]:rel(E,H,agent,0),[1007]:pred(E,eat,v,0),[]:rel(F,H,subset_of,1),[1006]:pred(F,animal,n,0),[]:rel(G,H,subset_of,1),[1004]:pred(G,people,n,0)]))])),[1001]:pred(C,food,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% Food is what people and animals eat . 
k3 concept c0:food:0 0 [ ]
k3 referent k3:p1 0 [ ]
k3 referent k3:x1 0 [ ]
k4 concept c2:thing:12 0 [ ]
k4 referent k4:x2 0 [ ]
k5 concept c3:people:0 0 [ ]
k5 concept c5:animal:0 0 [ ]
k5 event c7:eat:0 0 [ ]
k5 referent k5:e1 0 [ ]
k5 referent k5:x4 0 [ ]
k5 referent k5:x5 0 [ ]
k5 relation c4:superset_of:1 0 [ ]
k5 relation c6:superset_of:1 0 [ ]
k5 role c8:agent:1 0 [ ]
k5 role c9:theme:-1 0 [ ]
c1:whq antecedent k4 0 [ ]
c1:whq consequent k5 0 [ ]
c10:equality ext k4:x2 0 [ ]
c4:superset_of:1 ext k5:x4 0 [ ]
c6:superset_of:1 ext k5:x5 0 [ ]
c8:agent:1 ext k5:x3 0 [ ]
k3:p1 duplex c1:whq 0 [ ]
c9:theme:-1 ext k5:e1 0 [ ]
c0:food:0 instance k3:x1 1 [ Food ]
k5 relation c10:equality 1 [ is ]
c2:thing:12 instance k4:x2 1 [ what ]
c10:equality int k3:x1 2 [ ]
c3:people:0 instance k5:x4 1 [ people ]
c4:superset_of:1 int k5:x3 1 [ ]
c8:agent:1 int k5:e1 1 [ ]
k5 referent k5:x3 2 [ and ]
c5:animal:0 instance k5:x5 1 [ animals ]
c6:superset_of:1 int k5:x3 3 [ ]
c7:eat:0 instance k5:e1 2 [ eat ]
c9:theme:-1 int k4:x2 2 [ ]
k5 punctuation k5:e1 3 [ . ]


!.
A rooster is an adult male chicken.
rooster NN adult NN male NN chicken NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:rooster,pos:'NN',lemma:rooster,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:an,pos:'DT',lemma:an,namex:'O'],1005:[tok:adult,pos:'NN',lemma:adult,namex:'O'],1006:[tok:male,pos:'NN',lemma:male,namex:'O'],1007:[tok:chicken,pos:'NN',lemma:chicken,namex:'O'],1008:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[]:E,[1004]:F],[[1003]:eq(C,F),[1007]:pred(F,chicken,n,0),[]:rel(F,D,of,0),[1006]:pred(D,male,n,0),[]:rel(F,E,of,0),[1005]:pred(E,adult,n,0)])),[1002]:pred(C,rooster,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A rooster is an adult male chicken . 
k2 concept c0:rooster:0 0 [ ]
k2 referent k2:p1 0 [ ]
c2:of:0 ext k2:p1:x3 0 [ ]
c4:of:0 ext k2:p1:x4 0 [ ]
c6:equality ext k2:p1:x2 0 [ ]
k2:p1 concept c1:adult:0 0 [ ]
k2:p1 concept c3:male:0 0 [ ]
k2:p1 concept c5:chicken:0 0 [ ]
k2:p1 referent k2:p1:x3 0 [ ]
k2:p1 referent k2:p1:x4 0 [ ]
k2:p1 relation c2:of:0 0 [ ]
k2:p1 relation c4:of:0 0 [ ]
k2 referent k2:x1 1 [ A ]
c0:rooster:0 instance k2:x1 2 [ rooster ]
k2:p1 relation c6:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ an ]
c1:adult:0 instance k2:p1:x3 1 [ adult ]
c2:of:0 int k2:p1:x2 2 [ ]
c3:male:0 instance k2:p1:x4 1 [ male ]
c4:of:0 int k2:p1:x2 3 [ ]
c5:chicken:0 instance k2:p1:x2 4 [ chicken ]
c6:equality int k2:x1 3 [ ]
k2:p1 punctuation k2:p1:x2 5 [ . ]


!.
0.0550
0.2972
A cemetery is a place where dead peoples bodies or their ashes are buried.
cemetery NN place NN where WRB dead JJ peoples NNS bodies NNS their PRP$ ashes NNS are VBP buried VBN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:cemetery,pos:'NN',lemma:cemetery,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:place,pos:'NN',lemma:place,namex:'O'],1006:[tok:where,pos:'WRB',lemma:where,namex:'O'],1007:[tok:dead,pos:'JJ',lemma:dead,namex:'O'],1008:[tok:peoples,pos:'NNS',lemma:people,namex:'O'],1009:[tok:bodies,pos:'NNS',lemma:body,namex:'O'],1010:[tok:or,pos:'CC',lemma:or,namex:'O'],1011:[tok:their,pos:'PRP$',lemma:their,namex:'O'],1012:[tok:ashes,pos:'NNS',lemma:ash,namex:'O'],1013:[tok:are,pos:'VBP',lemma:be,namex:'O'],1014:[tok:buried,pos:'VBN',lemma:bury,namex:'O'],1015:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[]:C],[[1012]:pred(B,ash,n,0),[]:rel(B,C,of,1),[1011]:pred(C,thing,n,12)]),drs([[]:D,[1001]:E],[[]:prop(D,drs([[]:F,[1004]:G],[[1003]:eq(E,G),[]:prop(F,drs([],[[1010]:or(drs([[]:H,[]:I,[]:J,[]:K],[[]:rel(H,K,theme,0),[1014]:pred(H,bury,v,0),[1009]:pred(K,body,n,0),[]:rel(K,I,of,0),[1008]:pred(I,people,n,0),[1007]:pred(J,dead,a,0),[]:rel(J,K,experiencer,0)]),drs([[]:L],[[]:rel(L,B,theme,0),[1014]:pred(L,bury,v,0)]))])),[1006]:rel(G,F,where,0),[1005]:pred(G,place,n,0)])),[1002]:pred(E,cemetery,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A cemetery is a place where dead peoples bodies or their ashes are buried . 
k4 concept c0:cemetery:0 0 [ ]
k4 referent k4:p1 0 [ ]
k5 attribute c5:dead:0 0 [ ]
k5 concept c6:people:0 0 [ ]
k5 concept c8:body:0 0 [ ]
k5 event c9:bury:0 0 [ ]
k5 referent k5:e1 0 [ ]
k5 referent k5:s1 0 [ ]
k5 referent k5:x3 0 [ ]
k5 referent k5:x4 0 [ ]
k5 relation c7:of:0 0 [ ]
k5 role c10:theme:1 0 [ ]
k5 role c4:experiencer:-1 0 [ ]
k6 concept c11:thing:12 0 [ ]
k6 concept c13:ash:0 0 [ ]
k6 event c14:bury:0 0 [ ]
k6 referent k6:e2 0 [ ]
k6 referent k6:x5 0 [ ]
k6 referent k6:x6 0 [ ]
k6 relation c12:of:1 0 [ ]
k6 role c15:theme:1 0 [ ]
c10:theme:1 ext k5:x3 0 [ ]
c12:of:1 ext k6:x5 0 [ ]
c15:theme:1 ext k6:x6 0 [ ]
c16:equality ext k4:p1:x2 0 [ ]
c3:or antecedent k5 0 [ ]
c3:or consequent k6 0 [ ]
c4:experiencer:-1 ext k5:s1 0 [ ]
c7:of:0 ext k5:x4 0 [ ]
k4:p1 concept c1:place:0 0 [ ]
k4:p1 referent k4:p1:p2 0 [ ]
k4:p1 relation c2:where:0 0 [ ]
k4:p1:p2 binary c3:or 0 [ ]
k4 referent k4:x1 1 [ A ]
c0:cemetery:0 instance k4:x1 2 [ cemetery ]
k4:p1 relation c16:equality 1 [ is ]
k4:p1 referent k4:p1:x2 1 [ a ]
c16:equality int k4:x1 3 [ ]
c1:place:0 instance k4:p1:x2 2 [ place ]
c2:where:0 ext k4:p1:p2 1 [ where ]
c5:dead:0 arg k5:s1 1 [ dead ]
c6:people:0 instance k5:x4 1 [ peoples ]
c7:of:0 int k5:x3 1 [ ]
c10:theme:1 int k5:e1 1 [ ]
c8:body:0 instance k5:x3 2 [ bodies ]
k5 surface k5:s1 2 [ or ]
c4:experiencer:-1 int k5:x3 3 [ ]
c11:thing:12 instance k6:x5 1 [ their ]
c12:of:1 int k6:x6 1 [ ]
c15:theme:1 int k6:e2 1 [ ]
c13:ash:0 instance k6:x6 2 [ ashes ]
k6 surface k6:e2 2 [ are ]
c9:bury:0 instance k5:e1 2 [ buried ]
k5:e1 main k4:p1:p2 2 [ ]
c14:bury:0 instance k6:e2 3 [ ]
k6:e2 main k4:p1:p2 3 [ ]
c2:where:0 int k4:p1:x2 3 [ ]
k4:p1 punctuation k4:p1:p2 4 [ . ]


!.
Woodland is land with a lot of trees.
'Woodland' NNP land NN lot NN trees NNS 
sem(1,[1001:[tok:'Woodland',pos:'NNP',lemma:'Woodland',namex:'I-PER'],1002:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1003:[tok:land,pos:'NN',lemma:land,namex:'O'],1004:[tok:with,pos:'IN',lemma:with,namex:'O'],1005:[tok:a,pos:'DT',lemma:a,namex:'O'],1006:[tok:lot,pos:'NN',lemma:lot,namex:'O'],1007:[tok:of,pos:'IN',lemma:of,namex:'O'],1008:[tok:trees,pos:'NNS',lemma:tree,namex:'O'],1009:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B],[[1001]:named(B,woodland,per,nam)]),drs([[]:C],[[]:prop(C,drs([[]:D,[1005]:E,[]:F],[[1002]:eq(B,F),[1004]:rel(F,E,with,0),[1007]:rel(E,D,of,0),[1008]:pred(D,tree,n,0),[1006]:pred(E,lot,n,0),[1003]:pred(F,land,n,0)]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% Woodland is land with a lot of trees . 
k2 named c0:woodland:per 0 [ ]
k2 referent k2:p1 0 [ ]
k2 referent k2:x1 0 [ ]
c6:equality ext k2:p1:x2 0 [ ]
k2:p1 concept c1:land:0 0 [ ]
k2:p1 concept c2:lot:0 0 [ ]
k2:p1 concept c3:tree:0 0 [ ]
k2:p1 referent k2:p1:x2 0 [ ]
k2:p1 referent k2:p1:x4 0 [ ]
k2:p1 relation c4:of:0 0 [ ]
k2:p1 relation c5:with:0 0 [ ]
c0:woodland:per instance k2:x1 1 [ Woodland ]
k2:p1 relation c6:equality 1 [ is ]
c1:land:0 instance k2:p1:x2 1 [ land ]
c6:equality int k2:x1 2 [ ]
c5:with:0 ext k2:p1:x3 1 [ with ]
c5:with:0 int k2:p1:x2 2 [ ]
k2:p1 referent k2:p1:x3 2 [ a ]
c2:lot:0 instance k2:p1:x3 3 [ lot ]
c4:of:0 ext k2:p1:x4 1 [ of ]
c3:tree:0 instance k2:p1:x4 2 [ trees ]
k2:p1 punctuation k2:p1:x4 3 [ . ]
c4:of:0 int k2:p1:x3 4 [ ]


!.
0.0375
0.1240
The shores or shore of a sea, lake, or wide river is the land along the edge of it.
shores NNS shore NN sea NN lake NN wide JJ river NN land NN edge NN it PRP 
sem(1,[1001:[tok:'The',pos:'DT',lemma:the,namex:'O'],1002:[tok:shores,pos:'NNS',lemma:shore,namex:'O'],1003:[tok:or,pos:'CC',lemma:or,namex:'O'],1004:[tok:shore,pos:'NN',lemma:shore,namex:'O'],1005:[tok:of,pos:'IN',lemma:of,namex:'O'],1006:[tok:a,pos:'DT',lemma:a,namex:'O'],1007:[tok:sea,pos:'NN',lemma:sea,namex:'O'],1008:[tok: (','),pos: (','),lemma: (','),namex:'O'],1009:[tok:lake,pos:'NN',lemma:lake,namex:'O'],1010:[tok: (','),pos: (','),lemma: (','),namex:'O'],1011:[tok:or,pos:'CC',lemma:or,namex:'O'],1012:[tok:wide,pos:'JJ',lemma:wide,namex:'O'],1013:[tok:river,pos:'NN',lemma:river,namex:'O'],1014:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1015:[tok:the,pos:'DT',lemma:the,namex:'O'],1016:[tok:land,pos:'NN',lemma:land,namex:'O'],1017:[tok:along,pos:'IN',lemma:along,namex:'O'],1018:[tok:the,pos:'DT',lemma:the,namex:'O'],1019:[tok:edge,pos:'NN',lemma:edge,namex:'O'],1020:[tok:of,pos:'IN',lemma:of,namex:'O'],1021:[tok:it,pos:'PRP',lemma:it,namex:'O'],1022:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[1018]:C,[1015]:D,[]:E,[1018]:F,[1015]:G,[1001]:H],[[1021]:pred(B,thing,n,12),[1019]:pred(C,edge,n,0),[1016]:pred(D,land,n,0),[1021]:pred(E,thing,n,12),[1019]:pred(F,edge,n,0),[1016]:pred(G,land,n,0),[1003]:or(drs([],[[1002]:pred(H,shore,n,0)]),drs([],[[1004]:pred(H,shore,n,0)]))]),drs([],[[1011]:or(drs([[]:I,[]:J,[1006]:K],[[]:prop(I,drs([],[[1014]:eq(H,G),[1017]:rel(G,F,along,0),[1020]:rel(F,E,of,0)])),[1005]:rel(H,K,of,0),[1008]:rel(K,J,rel,2),[1009]:pred(J,lake,n,0),[1007]:pred(K,sea,n,0)]),drs([[]:L,[]:M,[]:N],[[]:prop(L,drs([],[[1014]:eq(N,D),[1017]:rel(D,C,along,0),[1020]:rel(C,B,of,0)])),[1013]:pred(N,river,n,0),[1012]:pred(M,wide,a,0),[]:rel(M,N,experiencer,0)]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% The shores or shore of a sea , lake , or wide river is the land along the edge of it . 
k2 binary c0:or 0 [ ]
k3 binary c1:or 0 [ ]
k3 concept c4:sea:0 0 [ ]
k3 concept c5:lake:0 0 [ ]
k3 referent k3:p1 0 [ ]
k3 referent k3:x3 0 [ ]
k3 relation c6:rel:2 0 [ ]
k3 relation c7:of:0 0 [ ]
k4 concept c2:shore:0 0 [ ]
k5 concept c3:shore:0 0 [ ]
k6 attribute c15:wide:0 0 [ ]
k6 concept c16:river:0 0 [ ]
k6 referent k6:p2 0 [ ]
k6 referent k6:s1 0 [ ]
k6 referent k6:x7 0 [ ]
k6 role c14:experiencer:-1 0 [ ]
c0:or antecedent k3 0 [ ]
c0:or consequent k6 0 [ ]
c1:or antecedent k4 0 [ ]
c1:or consequent k5 0 [ ]
c13:equality ext k3:p1:x4 0 [ ]
c14:experiencer:-1 ext k6:s1 0 [ ]
c22:equality ext k6:p2:x8 0 [ ]
k3:p1 concept c10:thing:12 0 [ ]
k3:p1 concept c8:land:0 0 [ ]
k3:p1 concept c9:edge:0 0 [ ]
k3:p1 referent k3:p1:x6 0 [ ]
k3:p1 relation c11:of:0 0 [ ]
k3:p1 relation c12:along:0 0 [ ]
k6:p2 concept c17:land:0 0 [ ]
k6:p2 concept c18:edge:0 0 [ ]
k6:p2 concept c19:thing:12 0 [ ]
k6:p2 referent k6:p2:x10 0 [ ]
k6:p2 relation c20:of:0 0 [ ]
k6:p2 relation c21:along:0 0 [ ]
k3 referent k3:x1 1 [ The ]
c2:shore:0 instance k3:x1 2 [ shores ]
k3 function k3:x1 3 [ or ]
c3:shore:0 instance k3:x1 4 [ shore ]
c7:of:0 ext k3:x2 1 [ of ]
k3 referent k3:x2 2 [ a ]
c7:of:0 int k3:x1 5 [ ]
c4:sea:0 instance k3:x2 3 [ sea ]
c6:rel:2 ext k3:x3 1 [ , ]
c5:lake:0 instance k3:x3 2 [ lake ]
k3 punctuation k3:x3 3 [ , ]
c6:rel:2 int k3:x2 4 [ ]
k6 surface k6:s1 1 [ or ]
c14:experiencer:-1 int k6:x7 1 [ ]
c15:wide:0 arg k6:s1 2 [ wide ]
c16:river:0 instance k6:x7 2 [ river ]
k3:p1 relation c13:equality 1 [ is ]
k6:p2 relation c22:equality 1 [ ]
k3:p1 referent k3:p1:x4 1 [ the ]
k6:p2 referent k6:p2:x8 1 [ ]
c22:equality int k6:x7 3 [ ]
c13:equality int k3:x1 6 [ ]
c17:land:0 instance k6:p2:x8 2 [ ]
c8:land:0 instance k3:p1:x4 2 [ land ]
c12:along:0 ext k3:p1:x5 1 [ along ]
c21:along:0 ext k6:p2:x9 1 [ ]
k3:p1 referent k3:p1:x5 2 [ the ]
k6:p2 referent k6:p2:x9 2 [ ]
c12:along:0 int k3:p1:x4 3 [ ]
c21:along:0 int k6:p2:x8 3 [ ]
c18:edge:0 instance k6:p2:x9 3 [ ]
c9:edge:0 instance k3:p1:x5 3 [ edge ]
c11:of:0 ext k3:p1:x6 1 [ of ]
c20:of:0 ext k6:p2:x10 1 [ ]
c10:thing:12 instance k3:p1:x6 2 [ it ]
c19:thing:12 instance k6:p2:x10 2 [ ]
c11:of:0 int k3:p1:x5 4 [ ]
k6:p2 punctuation k6:p2:x10 3 [ . ]
c20:of:0 int k6:p2:x9 4 [ ]


!.
A voyage is a long journey on a ship or in a spacecraft.
voyage NN long JJ journey NN ship NN spacecraft NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:voyage,pos:'NN',lemma:voyage,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:long,pos:'JJ',lemma:long,namex:'O'],1006:[tok:journey,pos:'NN',lemma:journey,namex:'O'],1007:[tok:on,pos:'IN',lemma:on,namex:'O'],1008:[tok:a,pos:'DT',lemma:a,namex:'O'],1009:[tok:ship,pos:'NN',lemma:ship,namex:'O'],1010:[tok:or,pos:'CC',lemma:or,namex:'O'],1011:[tok:in,pos:'IN',lemma:in,namex:'O'],1012:[tok:a,pos:'DT',lemma:a,namex:'O'],1013:[tok:spacecraft,pos:'NN',lemma:spacecraft,namex:'O'],1014:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([],[[1010]:or(drs([[1008]:B,[]:C,[1001]:D],[[1007]:rel(C,B,on,0),[1009]:pred(B,ship,n,0),[]:prop(C,drs([[]:E,[1004]:F],[[1003]:eq(D,F),[1006]:pred(F,journey,n,0),[1005]:pred(E,long,a,0),[]:rel(E,F,experiencer,0)])),[1002]:pred(D,voyage,n,0)]),drs([[1012]:G,[]:H,[1001]:I],[[1011]:rel(H,G,in,0),[1013]:pred(G,spacecraft,n,0),[]:prop(H,drs([[]:J,[1004]:K],[[1003]:eq(I,K),[1006]:pred(K,journey,n,0),[1005]:pred(J,long,a,0),[]:rel(J,K,experiencer,0)])),[1002]:pred(I,voyage,n,0)]))])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A voyage is a long journey on a ship or in a spacecraft . 
k2 binary c0:or 0 [ ]
k3 concept c1:voyage:0 0 [ ]
k3 concept c6:ship:0 0 [ ]
k3 referent k3:p1 0 [ ]
k3 relation c7:on:0 0 [ ]
k4 concept c13:spacecraft:0 0 [ ]
k4 concept c8:voyage:0 0 [ ]
k4 referent k4:p2 0 [ ]
k4 relation c14:in:0 0 [ ]
c0:or antecedent k3 0 [ ]
c0:or consequent k4 0 [ ]
c12:equality ext k4:p2:x6 0 [ ]
c2:experiencer:-1 ext k3:p1:s1 0 [ ]
c5:equality ext k3:p1:x3 0 [ ]
c9:experiencer:-1 ext k4:p2:s2 0 [ ]
k3:p1 attribute c3:long:0 0 [ ]
k3:p1 concept c4:journey:0 0 [ ]
k3:p1 referent k3:p1:s1 0 [ ]
k3:p1 role c2:experiencer:-1 0 [ ]
k4:p2 attribute c10:long:0 0 [ ]
k4:p2 concept c11:journey:0 0 [ ]
k4:p2 referent k4:p2:s2 0 [ ]
k4:p2 role c9:experiencer:-1 0 [ ]
k3 referent k3:x1 1 [ A ]
k4 referent k4:x4 1 [ ]
c1:voyage:0 instance k3:x1 2 [ voyage ]
c8:voyage:0 instance k4:x4 2 [ ]
k3:p1 relation c5:equality 1 [ is ]
k4:p2 relation c12:equality 1 [ ]
k3:p1 referent k3:p1:x3 1 [ a ]
k4:p2 referent k4:p2:x6 1 [ ]
c12:equality int k4:x4 3 [ ]
c5:equality int k3:x1 3 [ ]
c10:long:0 arg k4:p2:s2 1 [ ]
c3:long:0 arg k3:p1:s1 1 [ long ]
c2:experiencer:-1 int k3:p1:x3 2 [ ]
c11:journey:0 instance k4:p2:x6 2 [ ]
c4:journey:0 instance k3:p1:x3 3 [ journey ]
c7:on:0 ext k3:x2 1 [ on ]
c7:on:0 int k3:p1 1 [ ]
k3 referent k3:x2 2 [ a ]
c6:ship:0 instance k3:x2 3 [ ship ]
k4:p2 surface k4:p2:s2 2 [ or ]
c9:experiencer:-1 int k4:p2:x6 3 [ ]
c14:in:0 ext k4:x5 1 [ in ]
k4 referent k4:x5 2 [ a ]
c13:spacecraft:0 instance k4:x5 3 [ spacecraft ]
c14:in:0 int k4:p2 1 [ ]
k4 punctuation k4:x5 4 [ . ]


!.
0.0200
0.0304
A bird is a creature with feathers and wings, females lay eggs, and most birds can fly.
bird NN creature NN feathers NNS wings NNS females NNS lay VBD eggs NNS most JJS birds NNS fly VB 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:bird,pos:'NN',lemma:bird,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:creature,pos:'NN',lemma:creature,namex:'O'],1006:[tok:with,pos:'IN',lemma:with,namex:'O'],1007:[tok:feathers,pos:'NNS',lemma:feather,namex:'O'],1008:[tok:and,pos:'CC',lemma:and,namex:'O'],1009:[tok:wings,pos:'NNS',lemma:wing,namex:'O'],1010:[tok: (','),pos: (','),lemma: (','),namex:'O'],1011:[tok:females,pos:'NNS',lemma:female,namex:'O'],1012:[tok:lay,pos:'VBD',lemma:lay,namex:'O'],1013:[tok:eggs,pos:'NNS',lemma:egg,namex:'O'],1014:[tok: (','),pos: (','),lemma: (','),namex:'O'],1015:[tok:and,pos:'CC',lemma:and,namex:'O'],1016:[tok:most,pos:'JJS',lemma:most,namex:'O'],1017:[tok:birds,pos:'NNS',lemma:bird,namex:'O'],1018:[tok:can,pos:'MD',lemma:can,namex:'O'],1019:[tok:fly,pos:'VB',lemma:fly,namex:'O'],1020:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[]:C,[]:D,[]:E,[]:F,[]:G,[]:H,[1001]:I],[[]:prop(B,drs([[]:J],[[]:rel(J,D,agent,0),[1019]:pred(J,fly,v,0)])),[]:rel(C,B,topic,0),[]:rel(C,D,agent,0),[1018]:pred(C,can,v,0),[]:imp(drs([[]:K],[[1017]:pred(K,bird,n,0),[]:not(drs([],[[]:eq(D,K)]))]),drs([],[[1016]:rel(D,K,most,0)])),[1017]:pred(D,bird,n,0),[]:rel(E,F,theme,0),[]:rel(E,G,agent,0),[1012]:pred(E,lay,v,0),[1013]:pred(F,egg,n,0),[1011]:pred(G,female,n,0),[]:prop(H,drs([[]:L,[]:M,[1008]:N,[1004]:O],[[1003]:eq(I,O),[1006]:rel(O,N,with,0),[]:rel(L,N,subset_of,1),[1009]:pred(L,wing,n,0),[]:rel(M,N,subset_of,1),[1007]:pred(M,feather,n,0),[1005]:pred(O,creature,n,0)])),[1002]:pred(I,bird,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A bird is a creature with feathers and wings , females lay eggs , and most birds can fly . 
k5 attribute c14:most:0 0 [ ]
k5 concept c0:bird:0 0 [ ]
k5 concept c15:bird:0 0 [ ]
k5 concept c8:female:0 0 [ ]
k5 concept c9:egg:0 0 [ ]
k5 event c10:lay:0 0 [ ]
k5 event c16:can:0 0 [ ]
k5 referent k5:e1 0 [ ]
k5 referent k5:e2 0 [ ]
k5 referent k5:p1 0 [ ]
k5 referent k5:p2 0 [ ]
k5 referent k5:s1 0 [ ]
k5 referent k5:x2 0 [ ]
k5 referent k5:x3 0 [ ]
k5 referent k5:x4 0 [ ]
k5 role c11:agent:1 0 [ ]
k5 role c12:theme:1 0 [ ]
k5 role c13:experiencer:-1 0 [ ]
k5 role c17:agent:1 0 [ ]
k5 role c18:topic:1 0 [ ]
c11:agent:1 ext k5:x2 0 [ ]
c12:theme:1 ext k5:x3 0 [ ]
c13:experiencer:-1 ext k5:s1 0 [ ]
c17:agent:1 ext k5:x4 0 [ ]
c18:topic:1 ext k5:p2 0 [ ]
c20:agent:1 ext k5:x4 0 [ ]
c3:superset_of:1 ext k5:p1:x7 0 [ ]
c5:superset_of:1 ext k5:p1:x8 0 [ ]
c7:equality ext k5:p1:x5 0 [ ]
k5:p1 concept c1:creature:0 0 [ ]
k5:p1 concept c2:feather:0 0 [ ]
k5:p1 concept c4:wing:0 0 [ ]
k5:p1 referent k5:p1:x7 0 [ ]
k5:p1 referent k5:p1:x8 0 [ ]
k5:p1 relation c3:superset_of:1 0 [ ]
k5:p1 relation c5:superset_of:1 0 [ ]
k5:p1 relation c6:with:0 0 [ ]
k5:p2 event c19:fly:0 0 [ ]
k5:p2 referent k5:p2:e3 0 [ ]
k5:p2 role c20:agent:1 0 [ ]
k5 referent k5:x1 1 [ A ]
c0:bird:0 instance k5:x1 2 [ bird ]
k5:p1 relation c7:equality 1 [ is ]
k5:p1 referent k5:p1:x5 1 [ a ]
c7:equality int k5:x1 3 [ ]
c1:creature:0 instance k5:p1:x5 2 [ creature ]
c6:with:0 ext k5:p1:x6 1 [ with ]
c2:feather:0 instance k5:p1:x7 1 [ feathers ]
c3:superset_of:1 int k5:p1:x6 2 [ ]
c6:with:0 int k5:p1:x5 3 [ ]
k5:p1 referent k5:p1:x6 3 [ and ]
c4:wing:0 instance k5:p1:x8 1 [ wings ]
k5:p1 punctuation k5:p1:x8 2 [ , ]
c5:superset_of:1 int k5:p1:x6 4 [ ]
c11:agent:1 int k5:e1 1 [ ]
c8:female:0 instance k5:x2 1 [ females ]
k5:e1 main k5 1 [ ]
c10:lay:0 instance k5:e1 2 [ lay ]
c9:egg:0 instance k5:x3 1 [ eggs ]
k5 punctuation k5:x3 2 [ , ]
c12:theme:1 int k5:e1 3 [ ]
k5 surface k5:s1 1 [ and ]
c13:experiencer:-1 int k5:x4 1 [ ]
c14:most:0 arg k5:s1 2 [ most ]
c17:agent:1 int k5:e2 1 [ ]
c20:agent:1 int k5:p2:e3 1 [ ]
c15:bird:0 instance k5:x4 2 [ birds ]
c16:can:0 instance k5:e2 2 [ can ]
k5:e2 main k5 2 [ ]
k5:p2:e3 main k5:p2 1 [ ]
c19:fly:0 instance k5:p2:e3 2 [ fly ]
k5 punctuation k5:p2 2 [ . ]
c18:topic:1 int k5:e2 3 [ ]


!.
Woodland is land with a lot of trees.
'Woodland' NNP land NN lot NN trees NNS 
sem(1,[1001:[tok:'Woodland',pos:'NNP',lemma:'Woodland',namex:'I-PER'],1002:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1003:[tok:land,pos:'NN',lemma:land,namex:'O'],1004:[tok:with,pos:'IN',lemma:with,namex:'O'],1005:[tok:a,pos:'DT',lemma:a,namex:'O'],1006:[tok:lot,pos:'NN',lemma:lot,namex:'O'],1007:[tok:of,pos:'IN',lemma:of,namex:'O'],1008:[tok:trees,pos:'NNS',lemma:tree,namex:'O'],1009:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B],[[1001]:named(B,woodland,per,nam)]),drs([[]:C],[[]:prop(C,drs([[]:D,[1005]:E,[]:F],[[1002]:eq(B,F),[1004]:rel(F,E,with,0),[1007]:rel(E,D,of,0),[1008]:pred(D,tree,n,0),[1006]:pred(E,lot,n,0),[1003]:pred(F,land,n,0)]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% Woodland is land with a lot of trees . 
k2 named c0:woodland:per 0 [ ]
k2 referent k2:p1 0 [ ]
k2 referent k2:x1 0 [ ]
c6:equality ext k2:p1:x2 0 [ ]
k2:p1 concept c1:land:0 0 [ ]
k2:p1 concept c2:lot:0 0 [ ]
k2:p1 concept c3:tree:0 0 [ ]
k2:p1 referent k2:p1:x2 0 [ ]
k2:p1 referent k2:p1:x4 0 [ ]
k2:p1 relation c4:of:0 0 [ ]
k2:p1 relation c5:with:0 0 [ ]
c0:woodland:per instance k2:x1 1 [ Woodland ]
k2:p1 relation c6:equality 1 [ is ]
c1:land:0 instance k2:p1:x2 1 [ land ]
c6:equality int k2:x1 2 [ ]
c5:with:0 ext k2:p1:x3 1 [ with ]
c5:with:0 int k2:p1:x2 2 [ ]
k2:p1 referent k2:p1:x3 2 [ a ]
c2:lot:0 instance k2:p1:x3 3 [ lot ]
c4:of:0 ext k2:p1:x4 1 [ of ]
c3:tree:0 instance k2:p1:x4 2 [ trees ]
k2:p1 punctuation k2:p1:x4 3 [ . ]
c4:of:0 int k2:p1:x3 4 [ ]


!.
0.0125
0.1334
The coast is an area of land that is next to the sea.
coast NN area NN land NN that WDT next JJ sea NN 
sem(1,[1001:[tok:'The',pos:'DT',lemma:the,namex:'O'],1002:[tok:coast,pos:'NN',lemma:coast,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:an,pos:'DT',lemma:an,namex:'O'],1005:[tok:area,pos:'NN',lemma:area,namex:'O'],1006:[tok:of,pos:'IN',lemma:of,namex:'O'],1007:[tok:land,pos:'NN',lemma:land,namex:'O'],1008:[tok:that,pos:'WDT',lemma:that,namex:'O'],1009:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1010:[tok:next,pos:'JJ',lemma:next,namex:'O'],1011:[tok:to,pos:'TO',lemma:to,namex:'O'],1012:[tok:the,pos:'DT',lemma:the,namex:'O'],1013:[tok:sea,pos:'NN',lemma:sea,namex:'O'],1014:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[1012]:B,[1001]:C],[[1013]:pred(B,sea,n,0),[1002]:pred(C,coast,n,0)]),drs([[]:D],[[]:prop(D,drs([[]:E,[1008]:F,[]:G,[1004]:H],[[1003]:eq(C,H),[1006]:rel(H,G,of,0),[1011]:rel(E,B,to,0),[]:rel(E,F,experiencer,0),[1010]:pred(E,next,a,0),[]:eq(G,F),[1007]:pred(G,land,n,0),[1005]:pred(H,area,n,0)]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% The coast is an area of land that is next to the sea . 
k2 concept c0:coast:0 0 [ ]
k2 referent k2:p1 0 [ ]
c3:equality ext k2:p1:x4 0 [ ]
c9:equality ext k2:p1:x2 0 [ ]
k2:p1 attribute c4:next:0 0 [ ]
k2:p1 concept c1:area:0 0 [ ]
k2:p1 concept c2:land:0 0 [ ]
k2:p1 concept c6:sea:0 0 [ ]
k2:p1 referent k2:p1:s1 0 [ ]
k2:p1 referent k2:p1:x3 0 [ ]
k2:p1 relation c3:equality 0 [ ]
k2:p1 relation c7:to:0 0 [ ]
k2:p1 relation c8:of:0 0 [ ]
k2:p1 role c5:experiencer:-1 0 [ ]
c5:experiencer:-1 ext k2:p1:s1 0 [ ]
k2 referent k2:x1 1 [ The ]
c0:coast:0 instance k2:x1 2 [ coast ]
k2:p1 relation c9:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ an ]
c9:equality int k2:x1 3 [ ]
c1:area:0 instance k2:p1:x2 2 [ area ]
c8:of:0 ext k2:p1:x3 1 [ of ]
c2:land:0 instance k2:p1:x3 2 [ land ]
c8:of:0 int k2:p1:x2 3 [ ]
k2:p1 referent k2:p1:x4 1 [ that ]
c3:equality int k2:p1:x3 3 [ ]
k2:p1 surface k2:p1:s1 1 [ is ]
c5:experiencer:-1 int k2:p1:x4 2 [ ]
c4:next:0 arg k2:p1:s1 2 [ next ]
c7:to:0 ext k2:p1:x5 1 [ to ]
k2:p1 referent k2:p1:x5 2 [ the ]
c6:sea:0 instance k2:p1:x5 3 [ sea ]
c7:to:0 int k2:p1:s1 3 [ ]
k2:p1 punctuation k2:p1:x5 4 [ . ]


!.
A hill is an area of land that is higher than the land that surrounds it.
hill NN area NN land NN that WDT higher JJR land NN that WDT it PRP 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:hill,pos:'NN',lemma:hill,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:an,pos:'DT',lemma:an,namex:'O'],1005:[tok:area,pos:'NN',lemma:area,namex:'O'],1006:[tok:of,pos:'IN',lemma:of,namex:'O'],1007:[tok:land,pos:'NN',lemma:land,namex:'O'],1008:[tok:that,pos:'WDT',lemma:that,namex:'O'],1009:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1010:[tok:higher,pos:'JJR',lemma:higher,namex:'O'],1011:[tok:than,pos:'IN',lemma:than,namex:'O'],1012:[tok:the,pos:'DT',lemma:the,namex:'O'],1013:[tok:land,pos:'NN',lemma:land,namex:'O'],1014:[tok:that,pos:'WDT',lemma:that,namex:'O'],1015:[tok:surrounds,pos:'VBZ',lemma:surround,namex:'O'],1016:[tok:it,pos:'PRP',lemma:it,namex:'O'],1017:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[1012]:C],[[1016]:pred(B,thing,n,12),[1013]:pred(C,land,n,0)]),drs([[]:D,[1001]:E],[[]:prop(D,drs([[]:F,[1014]:G,[]:H,[1008]:I,[]:J,[1004]:K],[[1003]:eq(E,K),[1006]:rel(K,J,of,0),[1011]:rel(H,C,than,0),[]:rel(F,B,theme,0),[]:rel(F,G,agent,0),[1015]:pred(F,surround,v,0),[]:eq(C,G),[]:rel(H,I,experiencer,0),[1010]:pred(H,higher,a,0),[]:eq(J,I),[1007]:pred(J,land,n,0),[1005]:pred(K,area,n,0)])),[1002]:pred(E,hill,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A hill is an area of land that is higher than the land that surrounds it . 
k3 concept c0:hill:0 0 [ ]
k3 referent k3:p1 0 [ ]
c11:theme:1 ext k3:p1:x7 0 [ ]
c14:equality ext k3:p1:x2 0 [ ]
c3:equality ext k3:p1:x4 0 [ ]
c7:equality ext k3:p1:x6 0 [ ]
k3:p1 attribute c4:higher:0 0 [ ]
k3:p1 concept c1:area:0 0 [ ]
k3:p1 concept c2:land:0 0 [ ]
k3:p1 concept c6:land:0 0 [ ]
k3:p1 concept c8:thing:12 0 [ ]
k3:p1 event c9:surround:0 0 [ ]
k3:p1 referent k3:p1:e1 0 [ ]
k3:p1 referent k3:p1:s1 0 [ ]
k3:p1 referent k3:p1:x3 0 [ ]
k3:p1 referent k3:p1:x7 0 [ ]
k3:p1 relation c12:than:0 0 [ ]
k3:p1 relation c13:of:0 0 [ ]
k3:p1 relation c3:equality 0 [ ]
k3:p1 relation c7:equality 0 [ ]
k3:p1 role c11:theme:1 0 [ ]
k3:p1 role c10:agent:-1 0 [ ]
k3:p1 role c5:experiencer:-1 0 [ ]
c10:agent:-1 ext k3:p1:e1 0 [ ]
c5:experiencer:-1 ext k3:p1:s1 0 [ ]
k3 referent k3:x1 1 [ A ]
c0:hill:0 instance k3:x1 2 [ hill ]
k3:p1 relation c14:equality 1 [ is ]
k3:p1 referent k3:p1:x2 1 [ an ]
c14:equality int k3:x1 3 [ ]
c1:area:0 instance k3:p1:x2 2 [ area ]
c13:of:0 ext k3:p1:x3 1 [ of ]
c2:land:0 instance k3:p1:x3 2 [ land ]
c13:of:0 int k3:p1:x2 3 [ ]
k3:p1 referent k3:p1:x4 1 [ that ]
c3:equality int k3:p1:x3 3 [ ]
k3:p1 surface k3:p1:s1 1 [ is ]
c5:experiencer:-1 int k3:p1:x4 2 [ ]
c4:higher:0 arg k3:p1:s1 2 [ higher ]
c12:than:0 ext k3:p1:x5 1 [ than ]
k3:p1 referent k3:p1:x5 2 [ the ]
c12:than:0 int k3:p1:s1 3 [ ]
c6:land:0 instance k3:p1:x5 3 [ land ]
k3:p1 referent k3:p1:x6 1 [ that ]
c7:equality int k3:p1:x5 4 [ ]
c9:surround:0 instance k3:p1:e1 1 [ surrounds ]
c10:agent:-1 int k3:p1:x6 2 [ ]
c8:thing:12 instance k3:p1:x7 1 [ it ]
c11:theme:1 int k3:p1:e1 2 [ ]
k3:p1 punctuation k3:p1:x7 2 [ . ]


!.
0.1000
0.8032
A furnace is a container or enclosed space in which a very hot fire is made, for example to melt metal, burn rubbish or produce steam.
furnace NN container NN enclosed VBN space NN which WDT very RB hot JJ fire NN made VBN example NN melt VB metal NN burn VBP rubbish NN produce VB steam NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:furnace,pos:'NN',lemma:furnace,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:container,pos:'NN',lemma:container,namex:'O'],1006:[tok:or,pos:'CC',lemma:or,namex:'O'],1007:[tok:enclosed,pos:'VBN',lemma:enclose,namex:'O'],1008:[tok:space,pos:'NN',lemma:space,namex:'O'],1009:[tok:in,pos:'IN',lemma:in,namex:'O'],1010:[tok:which,pos:'WDT',lemma:which,namex:'O'],1011:[tok:a,pos:'DT',lemma:a,namex:'O'],1012:[tok:very,pos:'RB',lemma:very,namex:'O'],1013:[tok:hot,pos:'JJ',lemma:hot,namex:'O'],1014:[tok:fire,pos:'NN',lemma:fire,namex:'O'],1015:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1016:[tok:made,pos:'VBN',lemma:make,namex:'O'],1017:[tok: (','),pos: (','),lemma: (','),namex:'O'],1018:[tok:for,pos:'IN',lemma:for,namex:'O'],1019:[tok:example,pos:'NN',lemma:example,namex:'O'],1020:[tok:to,pos:'TO',lemma:to,namex:'O'],1021:[tok:melt,pos:'VB',lemma:melt,namex:'O'],1022:[tok:metal,pos:'NN',lemma:metal,namex:'O'],1023:[tok: (','),pos: (','),lemma: (','),namex:'O'],1024:[tok:burn,pos:'VBP',lemma:burn,namex:'O'],1025:[tok:rubbish,pos:'NN',lemma:rubbish,namex:'O'],1026:[tok:or,pos:'CC',lemma:or,namex:'O'],1027:[tok:produce,pos:'VB',lemma:produce,namex:'O'],1028:[tok:steam,pos:'NN',lemma:steam,namex:'O'],1029:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([],[[1006]:or(drs([[1004]:D],[[1003]:eq(C,D),[1005]:pred(D,container,n,0)]),drs([[]:E,[]:F,[]:G,[]:H,[]:I,[1011]:J],[[1003]:eq(C,G),[]:prop(E,drs([[1020]:K],[[]:prop(K,drs([],[[1026]:or(drs([[]:L,[]:M,[]:N,[]:O,[]:P,[]:Q],[[]:rel(L,P,theme,0),[]:rel(L,Q,agent,0),[1021]:pred(L,melt,v,0),[]:rel(M,N,theme,0),[]:rel(M,O,agent,0),[1024]:pred(M,burn,v,0),[1025]:pred(N,rubbish,n,0),[]:eq(P,O),[1022]:pred(P,metal,n,0),[1019]:pred(Q,example,n,0)]),drs([[]:R,[]:S,[]:T],[[]:rel(R,S,theme,0),[]:rel(R,T,agent,0),[1027]:pred(R,produce,v,0),[1028]:pred(S,steam,n,0),[1019]:pred(T,example,n,0)]))]))])),[1018]:rel(G,E,for,0),[1009]:rel(H,G,in,0),[1008]:pred(G,space,n,0),[]:rel(F,G,theme,0),[1007]:pred(F,enclose,v,0),[]:rel(H,J,theme,0),[1016]:pred(H,make,v,0),[1014]:pred(J,fire,n,0),[1013]:pred(I,hot,a,0),[]:rel(I,J,experiencer,0),[1012]:pred(J,very,a,0)]))])),[1002]:pred(C,furnace,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A furnace is a container or enclosed space in which a very hot fire is made , for example to melt metal , burn rubbish or produce steam . 
k10 concept c16:example:0 0 [ ]
k10 concept c17:metal:0 0 [ ]
k10 concept c19:rubbish:0 0 [ ]
k10 event c20:burn:0 0 [ ]
k10 event c23:melt:0 0 [ ]
k10 referent k10:e3 0 [ ]
k10 referent k10:e4 0 [ ]
k10 referent k10:x5 0 [ ]
k10 referent k10:x6 0 [ ]
k10 referent k10:x7 0 [ ]
k10 referent k10:x8 0 [ ]
k10 relation c18:equality 0 [ ]
k10 role c22:theme:1 0 [ ]
k10 role c24:agent:1 0 [ ]
k10 role c25:theme:1 0 [ ]
k10 role c21:agent:-1 0 [ ]
k11 concept c26:example:0 0 [ ]
k11 concept c27:steam:0 0 [ ]
k11 event c28:produce:0 0 [ ]
k11 referent k11:e5 0 [ ]
k11 referent k11:x10 0 [ ]
k11 referent k11:x9 0 [ ]
k11 role c29:agent:1 0 [ ]
k11 role c30:theme:1 0 [ ]
k7 concept c0:furnace:0 0 [ ]
k7 referent k7:p1 0 [ ]
k8 concept c2:container:0 0 [ ]
k9 attribute c4:very:0 0 [ ]
k9 attribute c6:hot:0 0 [ ]
k9 concept c12:space:0 0 [ ]
k9 concept c7:fire:0 0 [ ]
k9 event c10:enclose:0 0 [ ]
k9 event c8:make:0 0 [ ]
k9 referent k9:e1 0 [ ]
k9 referent k9:e2 0 [ ]
k9 referent k9:p2 0 [ ]
k9 referent k9:s1 0 [ ]
k9 referent k9:x4 0 [ ]
k9 relation c13:in:0 0 [ ]
k9 relation c14:for:0 0 [ ]
k9 role c11:theme:-1 0 [ ]
k9 role c5:experiencer:-1 0 [ ]
k9 role c9:theme:1 0 [ ]
c1:or antecedent k8 0 [ ]
c1:or consequent k9 0 [ ]
c11:theme:-1 ext k9:e2 0 [ ]
c15:or antecedent k10 0 [ ]
c15:or consequent k11 0 [ ]
c18:equality ext k10:x7 0 [ ]
c22:theme:1 ext k10:x8 0 [ ]
c24:agent:1 ext k10:x5 0 [ ]
c25:theme:1 ext k10:x6 0 [ ]
c29:agent:1 ext k11:x9 0 [ ]
c3:equality ext k8:x2 0 [ ]
c30:theme:1 ext k11:x10 0 [ ]
c31:equality ext k9:x4 0 [ ]
c5:experiencer:-1 ext k9:s1 0 [ ]
c9:theme:1 ext k9:x3 0 [ ]
k7:p1 binary c1:or 0 [ ]
k9:p2:p3 binary c15:or 0 [ ]
c21:agent:-1 ext k10:e3 0 [ ]
k7 referent k7:x1 1 [ A ]
c0:furnace:0 instance k7:x1 2 [ furnace ]
k8 relation c3:equality 1 [ is ]
k9 relation c31:equality 1 [ ]
k8 referent k8:x2 1 [ a ]
c3:equality int k7:x1 3 [ ]
c2:container:0 instance k8:x2 2 [ container ]
k9 surface k9:e2 1 [ or ]
c11:theme:-1 int k9:x4 1 [ ]
c10:enclose:0 instance k9:e2 2 [ enclosed ]
c13:in:0 int k9:e1 1 [ ]
c12:space:0 instance k9:x4 2 [ space ]
c31:equality int k7:x1 4 [ ]
c13:in:0 ext k9:x4 3 [ in ]
k9 surface k9:x3 1 [ which ]
c9:theme:1 int k9:e1 2 [ ]
k9 referent k9:x3 2 [ a ]
c4:very:0 arg k9:x3 3 [ very ]
c6:hot:0 arg k9:s1 1 [ hot ]
c5:experiencer:-1 int k9:x3 4 [ ]
c7:fire:0 instance k9:x3 5 [ fire ]
k9 surface k9:e1 3 [ is ]
k9:e1 main k7:p1 1 [ ]
c8:make:0 instance k9:e1 4 [ made ]
k7 punctuation k7:p1 2 [ , ]
c14:for:0 ext k9:p2 1 [ for ]
c14:for:0 int k9:x4 4 [ ]
c16:example:0 instance k10:x5 1 [ example ]
c24:agent:1 int k10:e4 1 [ ]
c26:example:0 instance k11:x9 1 [ ]
c29:agent:1 int k11:e5 1 [ ]
k9:p2 referent k9:p2:p3 1 [ to ]
c23:melt:0 instance k10:e4 2 [ melt ]
k10:e4 main k9:p2:p3 2 [ ]
c17:metal:0 instance k10:x6 1 [ metal ]
k10 punctuation k10:x6 2 [ , ]
c25:theme:1 int k10:e4 3 [ ]
c20:burn:0 instance k10:e3 1 [ burn ]
c21:agent:-1 int k10:x7 1 [ ]
c18:equality int k10:x6 3 [ ]
c19:rubbish:0 instance k10:x8 1 [ rubbish ]
c22:theme:1 int k10:e3 2 [ ]
k11 surface k11:e5 2 [ or ]
c28:produce:0 instance k11:e5 3 [ produce ]
k11:e5 main k9:p2:p3 3 [ ]
c27:steam:0 instance k11:x10 1 [ steam ]
k11 punctuation k11:x10 2 [ . ]
c30:theme:1 int k11:e5 4 [ ]


!.
An implement is a tool or other piece of equipment.
implement VB tool NN other JJ piece NN equipment NN 
sem(1,[1001:[tok:'An',pos:'DT',lemma:an,namex:'O'],1002:[tok:implement,pos:'VB',lemma:implement,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:tool,pos:'NN',lemma:tool,namex:'O'],1006:[tok:or,pos:'CC',lemma:or,namex:'O'],1007:[tok:other,pos:'JJ',lemma:other,namex:'O'],1008:[tok:piece,pos:'NN',lemma:piece,namex:'O'],1009:[tok:of,pos:'IN',lemma:of,namex:'O'],1010:[tok:equipment,pos:'NN',lemma:equipment,namex:'O'],1011:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B],[[1008]:pred(B,piece,n,0)]),drs([[]:C,[1001]:D],[[]:prop(C,drs([[]:E,[1004]:F],[[1003]:eq(D,F),[1009]:rel(F,E,of,0),[1010]:pred(E,equipment,n,0),[1006]:or(drs([],[[1005]:pred(F,tool,n,0)]),drs([],[[]:not(drs([],[[1007]:eq(F,B)])),[1008]:pred(F,piece,n,0)]))])),[1002]:pred(D,implement,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% An implement is a tool or other piece of equipment . 
k2 concept c0:implement:0 0 [ ]
k2 referent k2:p1 0 [ ]
k3 concept c2:tool:0 0 [ ]
k4 attribute c4:other:0 0 [ ]
k4 concept c5:piece:0 0 [ ]
k4 referent k4:s1 0 [ ]
k4 role c3:experiencer:-1 0 [ ]
c1:or antecedent k3 0 [ ]
c1:or consequent k4 0 [ ]
c3:experiencer:-1 ext k4:s1 0 [ ]
c8:equality ext k2:p1:x2 0 [ ]
k2:p1 binary c1:or 0 [ ]
k2:p1 concept c6:equipment:0 0 [ ]
k2:p1 referent k2:p1:x3 0 [ ]
k2:p1 relation c7:of:0 0 [ ]
k2 referent k2:x1 1 [ An ]
c0:implement:0 instance k2:x1 2 [ implement ]
k2:p1 relation c8:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ a ]
c8:equality int k2:x1 3 [ ]
c2:tool:0 instance k2:p1:x2 2 [ tool ]
k2:p1 function k2:p1:x2 3 [ or ]
c4:other:0 arg k4:s1 1 [ other ]
c3:experiencer:-1 int k2:p1:x2 4 [ ]
c5:piece:0 instance k2:p1:x2 5 [ piece ]
c7:of:0 ext k2:p1:x3 1 [ of ]
c6:equipment:0 instance k2:p1:x3 2 [ equipment ]
k2:p1 punctuation k2:p1:x3 3 [ . ]
c7:of:0 int k2:p1:x2 6 [ ]


!.
0.0500
0.1408
A crane is a large machine that moves heavy things by lifting them in the air.
crane NN large JJ machine NN that WDT heavy JJ things NNS lifting VBG them PRP air NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:crane,pos:'NN',lemma:crane,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:large,pos:'JJ',lemma:large,namex:'O'],1006:[tok:machine,pos:'NN',lemma:machine,namex:'O'],1007:[tok:that,pos:'WDT',lemma:that,namex:'O'],1008:[tok:moves,pos:'VBZ',lemma:move,namex:'O'],1009:[tok:heavy,pos:'JJ',lemma:heavy,namex:'O'],1010:[tok:things,pos:'NNS',lemma:thing,namex:'O'],1011:[tok:by,pos:'IN',lemma:by,namex:'O'],1012:[tok:lifting,pos:'VBG',lemma:lift,namex:'O'],1013:[tok:them,pos:'PRP',lemma:they,namex:'O'],1014:[tok:in,pos:'IN',lemma:in,namex:'O'],1015:[tok:the,pos:'DT',lemma:the,namex:'O'],1016:[tok:air,pos:'NN',lemma:air,namex:'O'],1017:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[1015]:B,[]:C],[[1016]:pred(B,air,n,0),[1013]:pred(C,thing,n,12)]),drs([[]:D,[1001]:E],[[]:prop(D,drs([[]:F,[]:G,[]:H,[]:I,[1007]:J,[]:K,[1004]:L],[[1003]:eq(E,L),[1011]:rel(G,F,by,0),[1014]:rel(F,B,in,0),[]:rel(F,C,theme,0),[]:rel(F,J,agent,0),[1012]:pred(F,lift,v,0),[]:rel(G,I,theme,0),[]:rel(G,J,agent,0),[1008]:pred(G,move,v,0),[1010]:pred(I,thing,n,0),[1009]:pred(H,heavy,a,0),[]:rel(H,I,experiencer,0),[]:eq(L,J),[1006]:pred(L,machine,n,0),[1005]:pred(K,large,a,0),[]:rel(K,L,experiencer,0)])),[1002]:pred(E,crane,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A crane is a large machine that moves heavy things by lifting them in the air . 
k4 concept c0:crane:0 0 [ ]
k4 referent k4:p1 0 [ ]
c1:experiencer:-1 ext k4:p1:s1 0 [ ]
c10:theme:1 ext k4:p1:x4 0 [ ]
c14:theme:1 ext k4:p1:x5 0 [ ]
c18:equality ext k4:p1:x2 0 [ ]
c4:equality ext k4:p1:x3 0 [ ]
c5:experiencer:-1 ext k4:p1:s2 0 [ ]
k4:p1 attribute c2:large:0 0 [ ]
k4:p1 attribute c6:heavy:0 0 [ ]
k4:p1 concept c11:thing:12 0 [ ]
k4:p1 concept c15:air:0 0 [ ]
k4:p1 concept c3:machine:0 0 [ ]
k4:p1 concept c7:thing:0 0 [ ]
k4:p1 event c12:lift:0 0 [ ]
k4:p1 event c8:move:0 0 [ ]
k4:p1 referent k4:p1:e1 0 [ ]
k4:p1 referent k4:p1:e2 0 [ ]
k4:p1 referent k4:p1:s1 0 [ ]
k4:p1 referent k4:p1:s2 0 [ ]
k4:p1 referent k4:p1:x4 0 [ ]
k4:p1 referent k4:p1:x5 0 [ ]
k4:p1 relation c16:in:0 0 [ ]
k4:p1 relation c17:by:0 0 [ ]
k4:p1 relation c4:equality 0 [ ]
k4:p1 role c1:experiencer:-1 0 [ ]
k4:p1 role c10:theme:1 0 [ ]
k4:p1 role c14:theme:1 0 [ ]
k4:p1 role c5:experiencer:-1 0 [ ]
k4:p1 role c13:agent:-1 0 [ ]
k4:p1 role c9:agent:-1 0 [ ]
c13:agent:-1 ext k4:p1:e2 0 [ ]
c9:agent:-1 ext k4:p1:e1 0 [ ]
k4 referent k4:x1 1 [ A ]
c0:crane:0 instance k4:x1 2 [ crane ]
k4:p1 relation c18:equality 1 [ is ]
k4:p1 referent k4:p1:x2 1 [ a ]
c18:equality int k4:x1 3 [ ]
c2:large:0 arg k4:p1:s1 1 [ large ]
c1:experiencer:-1 int k4:p1:x2 2 [ ]
c3:machine:0 instance k4:p1:x2 3 [ machine ]
k4:p1 referent k4:p1:x3 1 [ that ]
c4:equality int k4:p1:x2 4 [ ]
c8:move:0 instance k4:p1:e1 1 [ moves ]
c9:agent:-1 int k4:p1:x3 2 [ ]
c5:experiencer:-1 int k4:p1:x4 1 [ ]
c6:heavy:0 arg k4:p1:s2 1 [ heavy ]
c10:theme:1 int k4:p1:e1 2 [ ]
c7:thing:0 instance k4:p1:x4 2 [ things ]
c17:by:0 ext k4:p1:e2 1 [ by ]
c12:lift:0 instance k4:p1:e2 2 [ lifting ]
c17:by:0 int k4:p1:e1 3 [ ]
c13:agent:-1 int k4:p1:x3 3 [ ]
c11:thing:12 instance k4:p1:x5 1 [ them ]
c14:theme:1 int k4:p1:e2 3 [ ]
c16:in:0 ext k4:p1:x6 1 [ in ]
k4:p1 referent k4:p1:x6 2 [ the ]
c15:air:0 instance k4:p1:x6 3 [ air ]
c16:in:0 int k4:p1:e2 4 [ ]
k4:p1 punctuation k4:p1:x6 4 [ . ]


!.
A rooster is an adult male chicken.
rooster NN adult NN male NN chicken NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:rooster,pos:'NN',lemma:rooster,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:an,pos:'DT',lemma:an,namex:'O'],1005:[tok:adult,pos:'NN',lemma:adult,namex:'O'],1006:[tok:male,pos:'NN',lemma:male,namex:'O'],1007:[tok:chicken,pos:'NN',lemma:chicken,namex:'O'],1008:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[]:E,[1004]:F],[[1003]:eq(C,F),[1007]:pred(F,chicken,n,0),[]:rel(F,D,of,0),[1006]:pred(D,male,n,0),[]:rel(F,E,of,0),[1005]:pred(E,adult,n,0)])),[1002]:pred(C,rooster,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A rooster is an adult male chicken . 
k2 concept c0:rooster:0 0 [ ]
k2 referent k2:p1 0 [ ]
c2:of:0 ext k2:p1:x3 0 [ ]
c4:of:0 ext k2:p1:x4 0 [ ]
c6:equality ext k2:p1:x2 0 [ ]
k2:p1 concept c1:adult:0 0 [ ]
k2:p1 concept c3:male:0 0 [ ]
k2:p1 concept c5:chicken:0 0 [ ]
k2:p1 referent k2:p1:x3 0 [ ]
k2:p1 referent k2:p1:x4 0 [ ]
k2:p1 relation c2:of:0 0 [ ]
k2:p1 relation c4:of:0 0 [ ]
k2 referent k2:x1 1 [ A ]
c0:rooster:0 instance k2:x1 2 [ rooster ]
k2:p1 relation c6:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ an ]
c1:adult:0 instance k2:p1:x3 1 [ adult ]
c2:of:0 int k2:p1:x2 2 [ ]
c3:male:0 instance k2:p1:x4 1 [ male ]
c4:of:0 int k2:p1:x2 3 [ ]
c5:chicken:0 instance k2:p1:x2 4 [ chicken ]
c6:equality int k2:x1 3 [ ]
k2:p1 punctuation k2:p1:x2 5 [ . ]


!.
0.0200
0.0564
A hill is an area of land that is higher than the land that surrounds it.
hill NN area NN land NN that WDT higher JJR land NN that WDT it PRP 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:hill,pos:'NN',lemma:hill,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:an,pos:'DT',lemma:an,namex:'O'],1005:[tok:area,pos:'NN',lemma:area,namex:'O'],1006:[tok:of,pos:'IN',lemma:of,namex:'O'],1007:[tok:land,pos:'NN',lemma:land,namex:'O'],1008:[tok:that,pos:'WDT',lemma:that,namex:'O'],1009:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1010:[tok:higher,pos:'JJR',lemma:higher,namex:'O'],1011:[tok:than,pos:'IN',lemma:than,namex:'O'],1012:[tok:the,pos:'DT',lemma:the,namex:'O'],1013:[tok:land,pos:'NN',lemma:land,namex:'O'],1014:[tok:that,pos:'WDT',lemma:that,namex:'O'],1015:[tok:surrounds,pos:'VBZ',lemma:surround,namex:'O'],1016:[tok:it,pos:'PRP',lemma:it,namex:'O'],1017:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[1012]:C],[[1016]:pred(B,thing,n,12),[1013]:pred(C,land,n,0)]),drs([[]:D,[1001]:E],[[]:prop(D,drs([[]:F,[1014]:G,[]:H,[1008]:I,[]:J,[1004]:K],[[1003]:eq(E,K),[1006]:rel(K,J,of,0),[1011]:rel(H,C,than,0),[]:rel(F,B,theme,0),[]:rel(F,G,agent,0),[1015]:pred(F,surround,v,0),[]:eq(C,G),[]:rel(H,I,experiencer,0),[1010]:pred(H,higher,a,0),[]:eq(J,I),[1007]:pred(J,land,n,0),[1005]:pred(K,area,n,0)])),[1002]:pred(E,hill,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A hill is an area of land that is higher than the land that surrounds it . 
k3 concept c0:hill:0 0 [ ]
k3 referent k3:p1 0 [ ]
c11:theme:1 ext k3:p1:x7 0 [ ]
c14:equality ext k3:p1:x2 0 [ ]
c3:equality ext k3:p1:x4 0 [ ]
c7:equality ext k3:p1:x6 0 [ ]
k3:p1 attribute c4:higher:0 0 [ ]
k3:p1 concept c1:area:0 0 [ ]
k3:p1 concept c2:land:0 0 [ ]
k3:p1 concept c6:land:0 0 [ ]
k3:p1 concept c8:thing:12 0 [ ]
k3:p1 event c9:surround:0 0 [ ]
k3:p1 referent k3:p1:e1 0 [ ]
k3:p1 referent k3:p1:s1 0 [ ]
k3:p1 referent k3:p1:x3 0 [ ]
k3:p1 referent k3:p1:x7 0 [ ]
k3:p1 relation c12:than:0 0 [ ]
k3:p1 relation c13:of:0 0 [ ]
k3:p1 relation c3:equality 0 [ ]
k3:p1 relation c7:equality 0 [ ]
k3:p1 role c11:theme:1 0 [ ]
k3:p1 role c10:agent:-1 0 [ ]
k3:p1 role c5:experiencer:-1 0 [ ]
c10:agent:-1 ext k3:p1:e1 0 [ ]
c5:experiencer:-1 ext k3:p1:s1 0 [ ]
k3 referent k3:x1 1 [ A ]
c0:hill:0 instance k3:x1 2 [ hill ]
k3:p1 relation c14:equality 1 [ is ]
k3:p1 referent k3:p1:x2 1 [ an ]
c14:equality int k3:x1 3 [ ]
c1:area:0 instance k3:p1:x2 2 [ area ]
c13:of:0 ext k3:p1:x3 1 [ of ]
c2:land:0 instance k3:p1:x3 2 [ land ]
c13:of:0 int k3:p1:x2 3 [ ]
k3:p1 referent k3:p1:x4 1 [ that ]
c3:equality int k3:p1:x3 3 [ ]
k3:p1 surface k3:p1:s1 1 [ is ]
c5:experiencer:-1 int k3:p1:x4 2 [ ]
c4:higher:0 arg k3:p1:s1 2 [ higher ]
c12:than:0 ext k3:p1:x5 1 [ than ]
k3:p1 referent k3:p1:x5 2 [ the ]
c12:than:0 int k3:p1:s1 3 [ ]
c6:land:0 instance k3:p1:x5 3 [ land ]
k3:p1 referent k3:p1:x6 1 [ that ]
c7:equality int k3:p1:x5 4 [ ]
c9:surround:0 instance k3:p1:e1 1 [ surrounds ]
c10:agent:-1 int k3:p1:x6 2 [ ]
c8:thing:12 instance k3:p1:x7 1 [ it ]
c11:theme:1 int k3:p1:e1 2 [ ]
k3:p1 punctuation k3:p1:x7 2 [ . ]


!.
Woodland is land with a lot of trees.
'Woodland' NNP land NN lot NN trees NNS 
sem(1,[1001:[tok:'Woodland',pos:'NNP',lemma:'Woodland',namex:'I-PER'],1002:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1003:[tok:land,pos:'NN',lemma:land,namex:'O'],1004:[tok:with,pos:'IN',lemma:with,namex:'O'],1005:[tok:a,pos:'DT',lemma:a,namex:'O'],1006:[tok:lot,pos:'NN',lemma:lot,namex:'O'],1007:[tok:of,pos:'IN',lemma:of,namex:'O'],1008:[tok:trees,pos:'NNS',lemma:tree,namex:'O'],1009:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B],[[1001]:named(B,woodland,per,nam)]),drs([[]:C],[[]:prop(C,drs([[]:D,[1005]:E,[]:F],[[1002]:eq(B,F),[1004]:rel(F,E,with,0),[1007]:rel(E,D,of,0),[1008]:pred(D,tree,n,0),[1006]:pred(E,lot,n,0),[1003]:pred(F,land,n,0)]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% Woodland is land with a lot of trees . 
k2 named c0:woodland:per 0 [ ]
k2 referent k2:p1 0 [ ]
k2 referent k2:x1 0 [ ]
c6:equality ext k2:p1:x2 0 [ ]
k2:p1 concept c1:land:0 0 [ ]
k2:p1 concept c2:lot:0 0 [ ]
k2:p1 concept c3:tree:0 0 [ ]
k2:p1 referent k2:p1:x2 0 [ ]
k2:p1 referent k2:p1:x4 0 [ ]
k2:p1 relation c4:of:0 0 [ ]
k2:p1 relation c5:with:0 0 [ ]
c0:woodland:per instance k2:x1 1 [ Woodland ]
k2:p1 relation c6:equality 1 [ is ]
c1:land:0 instance k2:p1:x2 1 [ land ]
c6:equality int k2:x1 2 [ ]
c5:with:0 ext k2:p1:x3 1 [ with ]
c5:with:0 int k2:p1:x2 2 [ ]
k2:p1 referent k2:p1:x3 2 [ a ]
c2:lot:0 instance k2:p1:x3 3 [ lot ]
c4:of:0 ext k2:p1:x4 1 [ of ]
c3:tree:0 instance k2:p1:x4 2 [ trees ]
k2:p1 punctuation k2:p1:x4 3 [ . ]
c4:of:0 int k2:p1:x3 4 [ ]


!.
0.1450
0.7619
A car is a motor vehicle with room for a small number of passengers.
car NN motor NN vehicle NN room NN small JJ number NN passengers NNS 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:car,pos:'NN',lemma:car,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:motor,pos:'NN',lemma:motor,namex:'O'],1006:[tok:vehicle,pos:'NN',lemma:vehicle,namex:'O'],1007:[tok:with,pos:'IN',lemma:with,namex:'O'],1008:[tok:room,pos:'NN',lemma:room,namex:'O'],1009:[tok:for,pos:'IN',lemma:for,namex:'O'],1010:[tok:a,pos:'DT',lemma:a,namex:'O'],1011:[tok:small,pos:'JJ',lemma:small,namex:'O'],1012:[tok:number,pos:'NN',lemma:number,namex:'O'],1013:[tok:of,pos:'IN',lemma:of,namex:'O'],1014:[tok:passengers,pos:'NNS',lemma:passenger,namex:'O'],1015:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[]:E,[1010]:F,[]:G,[]:H,[1004]:I],[[1003]:eq(C,I),[1007]:rel(I,G,with,0),[1009]:rel(G,F,for,0),[1013]:rel(F,D,of,0),[1014]:pred(D,passenger,n,0),[1012]:pred(F,number,n,0),[1011]:pred(E,small,a,0),[]:rel(E,F,experiencer,0),[1008]:pred(G,room,n,0),[1006]:pred(I,vehicle,n,0),[]:rel(I,H,of,0),[1005]:pred(H,motor,n,0)])),[1002]:pred(C,car,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A car is a motor vehicle with room for a small number of passengers . 
k2 concept c0:car:0 0 [ ]
k2 referent k2:p1 0 [ ]
c12:equality ext k2:p1:x2 0 [ ]
c2:of:0 ext k2:p1:x3 0 [ ]
c5:experiencer:-1 ext k2:p1:s1 0 [ ]
k2:p1 attribute c6:small:0 0 [ ]
k2:p1 concept c1:motor:0 0 [ ]
k2:p1 concept c3:vehicle:0 0 [ ]
k2:p1 concept c4:room:0 0 [ ]
k2:p1 concept c7:number:0 0 [ ]
k2:p1 concept c8:passenger:0 0 [ ]
k2:p1 referent k2:p1:s1 0 [ ]
k2:p1 referent k2:p1:x3 0 [ ]
k2:p1 referent k2:p1:x4 0 [ ]
k2:p1 referent k2:p1:x6 0 [ ]
k2:p1 relation c10:for:0 0 [ ]
k2:p1 relation c11:with:0 0 [ ]
k2:p1 relation c2:of:0 0 [ ]
k2:p1 relation c9:of:0 0 [ ]
k2:p1 role c5:experiencer:-1 0 [ ]
k2 referent k2:x1 1 [ A ]
c0:car:0 instance k2:x1 2 [ car ]
k2:p1 relation c12:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ a ]
c12:equality int k2:x1 3 [ ]
c1:motor:0 instance k2:p1:x3 1 [ motor ]
c2:of:0 int k2:p1:x2 2 [ ]
c3:vehicle:0 instance k2:p1:x2 3 [ vehicle ]
c11:with:0 ext k2:p1:x4 1 [ with ]
c4:room:0 instance k2:p1:x4 2 [ room ]
c11:with:0 int k2:p1:x2 4 [ ]
c10:for:0 ext k2:p1:x5 1 [ for ]
k2:p1 referent k2:p1:x5 2 [ a ]
c10:for:0 int k2:p1:x4 3 [ ]
c6:small:0 arg k2:p1:s1 1 [ small ]
c5:experiencer:-1 int k2:p1:x5 3 [ ]
c7:number:0 instance k2:p1:x5 4 [ number ]
c9:of:0 ext k2:p1:x6 1 [ of ]
c8:passenger:0 instance k2:p1:x6 2 [ passengers ]
k2:p1 punctuation k2:p1:x6 3 [ . ]
c9:of:0 int k2:p1:x5 5 [ ]


!.
When you make a journey, you travel from one place to another.
'When' WRB you PRP make VBP journey NN you PRP travel VBP place NN 
sem(1,[1001:[tok:'When',pos:'WRB',lemma:when,namex:'O'],1002:[tok:you,pos:'PRP',lemma:you,namex:'O'],1003:[tok:make,pos:'VBP',lemma:make,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:journey,pos:'NN',lemma:journey,namex:'O'],1006:[tok: (','),pos: (','),lemma: (','),namex:'O'],1007:[tok:you,pos:'PRP',lemma:you,namex:'O'],1008:[tok:travel,pos:'VBP',lemma:travel,namex:'O'],1009:[tok:from,pos:'IN',lemma:from,namex:'O'],1010:[tok:one,pos:'CD',lemma:one,namex:'O'],1011:[tok:place,pos:'NN',lemma:place,namex:'O'],1012:[tok:to,pos:'TO',lemma:to,namex:'O'],1013:[tok:another,pos:'DT',lemma:another,namex:'O'],1014:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[]:C],[[1007]:pred(B,person,n,1),[1002]:pred(C,person,n,1)]),drs([[]:D,[]:E,[]:F],[[]:prop(D,drs([[]:G,[]:H,[]:I],[[1009]:rel(I,G,from,0),[1011]:pred(G,place,n,0),[1010]:card(G,1,eq),[1012]:rel(I,H,to,0),[1013]:pred(H,thing,n,12),[]:rel(I,B,agent,0),[1008]:pred(I,travel,v,0)])),[]:prop(E,drs([[]:J,[1004]:K],[[]:rel(J,K,theme,0),[]:rel(J,C,agent,0),[1003]:pred(J,make,v,0),[1005]:pred(K,journey,n,0)])),[]:prop(F,drs([],[[1001]:rel(E,D,when,0)]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% When you make a journey , you travel from one place to another . 
k4 referent k4:p1 0 [ ]
k4 referent k4:p2 0 [ ]
k4 referent k4:p3 0 [ ]
c4:agent:1 ext k4:p2:x1 0 [ ]
c5:theme:1 ext k4:p2:x2 0 [ ]
c8:agent:1 ext k4:p3:x3 0 [ ]
k4:p1 relation c0:when:0 0 [ ]
k4:p2 concept c1:person:1 0 [ ]
k4:p2 concept c2:journey:0 0 [ ]
k4:p2 event c3:make:0 0 [ ]
k4:p2 referent k4:p2:e1 0 [ ]
k4:p2 referent k4:p2:x1 0 [ ]
k4:p2 role c4:agent:1 0 [ ]
k4:p2 role c5:theme:1 0 [ ]
k4:p3 cardinality c11:1:eq 0 [ ]
k4:p3 concept c12:place:0 0 [ ]
k4:p3 concept c6:person:1 0 [ ]
k4:p3 concept c9:thing:12 0 [ ]
k4:p3 event c7:travel:0 0 [ ]
k4:p3 referent k4:p3:e2 0 [ ]
k4:p3 referent k4:p3:x3 0 [ ]
k4:p3 referent k4:p3:x4 0 [ ]
k4:p3 referent k4:p3:x5 0 [ ]
k4:p3 relation c10:to:0 0 [ ]
k4:p3 relation c13:from:0 0 [ ]
k4:p3 role c8:agent:1 0 [ ]
c0:when:0 ext k4:p3 1 [ When ]
c1:person:1 instance k4:p2:x1 1 [ you ]
c4:agent:1 int k4:p2:e1 1 [ ]
k4:p2:e1 main k4:p2 1 [ ]
c3:make:0 instance k4:p2:e1 2 [ make ]
k4:p2 referent k4:p2:x2 1 [ a ]
c2:journey:0 instance k4:p2:x2 2 [ journey ]
c5:theme:1 int k4:p2:e1 3 [ ]
k4:p2 punctuation k4:p2:x2 3 [ , ]
c6:person:1 instance k4:p3:x3 1 [ you ]
c8:agent:1 int k4:p3:e2 1 [ ]
c0:when:0 int k4:p2 2 [ ]
c7:travel:0 instance k4:p3:e2 2 [ travel ]
k4:p3:e2 main k4:p3 2 [ ]
c13:from:0 ext k4:p3:x5 1 [ from ]
c11:1:eq arg k4:p3:x5 2 [ one ]
c13:from:0 int k4:p3:e2 3 [ ]
c12:place:0 instance k4:p3:x5 3 [ place ]
c10:to:0 ext k4:p3:x4 1 [ to ]
c9:thing:12 instance k4:p3:x4 2 [ another ]
k4:p3 punctuation k4:p3:x4 3 [ . ]
c10:to:0 int k4:p3:e2 4 [ ]


!.
0.0725
0.02610
A cemetery is a place where dead peoples bodies or their ashes are buried.
cemetery NN place NN where WRB dead JJ peoples NNS bodies NNS their PRP$ ashes NNS are VBP buried VBN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:cemetery,pos:'NN',lemma:cemetery,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:place,pos:'NN',lemma:place,namex:'O'],1006:[tok:where,pos:'WRB',lemma:where,namex:'O'],1007:[tok:dead,pos:'JJ',lemma:dead,namex:'O'],1008:[tok:peoples,pos:'NNS',lemma:people,namex:'O'],1009:[tok:bodies,pos:'NNS',lemma:body,namex:'O'],1010:[tok:or,pos:'CC',lemma:or,namex:'O'],1011:[tok:their,pos:'PRP$',lemma:their,namex:'O'],1012:[tok:ashes,pos:'NNS',lemma:ash,namex:'O'],1013:[tok:are,pos:'VBP',lemma:be,namex:'O'],1014:[tok:buried,pos:'VBN',lemma:bury,namex:'O'],1015:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[]:C],[[1012]:pred(B,ash,n,0),[]:rel(B,C,of,1),[1011]:pred(C,thing,n,12)]),drs([[]:D,[1001]:E],[[]:prop(D,drs([[]:F,[1004]:G],[[1003]:eq(E,G),[]:prop(F,drs([],[[1010]:or(drs([[]:H,[]:I,[]:J,[]:K],[[]:rel(H,K,theme,0),[1014]:pred(H,bury,v,0),[1009]:pred(K,body,n,0),[]:rel(K,I,of,0),[1008]:pred(I,people,n,0),[1007]:pred(J,dead,a,0),[]:rel(J,K,experiencer,0)]),drs([[]:L],[[]:rel(L,B,theme,0),[1014]:pred(L,bury,v,0)]))])),[1006]:rel(G,F,where,0),[1005]:pred(G,place,n,0)])),[1002]:pred(E,cemetery,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A cemetery is a place where dead peoples bodies or their ashes are buried . 
k4 concept c0:cemetery:0 0 [ ]
k4 referent k4:p1 0 [ ]
k5 attribute c5:dead:0 0 [ ]
k5 concept c6:people:0 0 [ ]
k5 concept c8:body:0 0 [ ]
k5 event c9:bury:0 0 [ ]
k5 referent k5:e1 0 [ ]
k5 referent k5:s1 0 [ ]
k5 referent k5:x3 0 [ ]
k5 referent k5:x4 0 [ ]
k5 relation c7:of:0 0 [ ]
k5 role c10:theme:1 0 [ ]
k5 role c4:experiencer:-1 0 [ ]
k6 concept c11:thing:12 0 [ ]
k6 concept c13:ash:0 0 [ ]
k6 event c14:bury:0 0 [ ]
k6 referent k6:e2 0 [ ]
k6 referent k6:x5 0 [ ]
k6 referent k6:x6 0 [ ]
k6 relation c12:of:1 0 [ ]
k6 role c15:theme:1 0 [ ]
c10:theme:1 ext k5:x3 0 [ ]
c12:of:1 ext k6:x5 0 [ ]
c15:theme:1 ext k6:x6 0 [ ]
c16:equality ext k4:p1:x2 0 [ ]
c3:or antecedent k5 0 [ ]
c3:or consequent k6 0 [ ]
c4:experiencer:-1 ext k5:s1 0 [ ]
c7:of:0 ext k5:x4 0 [ ]
k4:p1 concept c1:place:0 0 [ ]
k4:p1 referent k4:p1:p2 0 [ ]
k4:p1 relation c2:where:0 0 [ ]
k4:p1:p2 binary c3:or 0 [ ]
k4 referent k4:x1 1 [ A ]
c0:cemetery:0 instance k4:x1 2 [ cemetery ]
k4:p1 relation c16:equality 1 [ is ]
k4:p1 referent k4:p1:x2 1 [ a ]
c16:equality int k4:x1 3 [ ]
c1:place:0 instance k4:p1:x2 2 [ place ]
c2:where:0 ext k4:p1:p2 1 [ where ]
c5:dead:0 arg k5:s1 1 [ dead ]
c6:people:0 instance k5:x4 1 [ peoples ]
c7:of:0 int k5:x3 1 [ ]
c10:theme:1 int k5:e1 1 [ ]
c8:body:0 instance k5:x3 2 [ bodies ]
k5 surface k5:s1 2 [ or ]
c4:experiencer:-1 int k5:x3 3 [ ]
c11:thing:12 instance k6:x5 1 [ their ]
c12:of:1 int k6:x6 1 [ ]
c15:theme:1 int k6:e2 1 [ ]
c13:ash:0 instance k6:x6 2 [ ashes ]
k6 surface k6:e2 2 [ are ]
c9:bury:0 instance k5:e1 2 [ buried ]
k5:e1 main k4:p1:p2 2 [ ]
c14:bury:0 instance k6:e2 3 [ ]
k6:e2 main k4:p1:p2 3 [ ]
c2:where:0 int k4:p1:x2 3 [ ]
k4:p1 punctuation k4:p1:p2 4 [ . ]


!.
A mound of something is a large rounded pile of it.
mound NN large JJ rounded JJ pile NN it PRP 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:mound,pos:'NN',lemma:mound,namex:'O'],1003:[tok:of,pos:'IN',lemma:of,namex:'O'],1004:[tok:something,pos:'DT',lemma:something,namex:'O'],1005:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1006:[tok:a,pos:'DT',lemma:a,namex:'O'],1007:[tok:large,pos:'JJ',lemma:large,namex:'O'],1008:[tok:rounded,pos:'JJ',lemma:rounded,namex:'O'],1009:[tok:pile,pos:'NN',lemma:pile,namex:'O'],1010:[tok:of,pos:'IN',lemma:of,namex:'O'],1011:[tok:it,pos:'PRP',lemma:it,namex:'O'],1012:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B],[[1011]:pred(B,thing,n,12)]),drs([[]:C,[]:D,[1001]:E],[[]:prop(C,drs([[]:F,[]:G,[1006]:H],[[1005]:eq(E,H),[1010]:rel(H,B,of,0),[1009]:pred(H,pile,n,0),[1008]:pred(F,rounded,a,0),[]:rel(F,H,experiencer,0),[1007]:pred(G,large,a,0),[]:rel(G,H,experiencer,0)])),[1003]:rel(E,D,of,0),[1004]:pred(D,thing,n,12),[1002]:pred(E,mound,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A mound of something is a large rounded pile of it . 
k2 concept c0:mound:0 0 [ ]
k2 concept c1:thing:12 0 [ ]
k2 referent k2:p1 0 [ ]
k2 referent k2:x2 0 [ ]
k2 relation c2:of:0 0 [ ]
c10:equality ext k2:p1:x3 0 [ ]
c3:experiencer:-1 ext k2:p1:s1 0 [ ]
c5:experiencer:-1 ext k2:p1:s2 0 [ ]
k2:p1 attribute c4:large:0 0 [ ]
k2:p1 attribute c6:rounded:0 0 [ ]
k2:p1 concept c7:pile:0 0 [ ]
k2:p1 concept c8:thing:12 0 [ ]
k2:p1 referent k2:p1:s1 0 [ ]
k2:p1 referent k2:p1:s2 0 [ ]
k2:p1 referent k2:p1:x4 0 [ ]
k2:p1 relation c9:of:0 0 [ ]
k2:p1 role c3:experiencer:-1 0 [ ]
k2:p1 role c5:experiencer:-1 0 [ ]
k2 referent k2:x1 1 [ A ]
c0:mound:0 instance k2:x1 2 [ mound ]
c2:of:0 ext k2:x2 1 [ of ]
c1:thing:12 instance k2:x2 2 [ something ]
c2:of:0 int k2:x1 3 [ ]
k2:p1 relation c10:equality 1 [ is ]
k2:p1 referent k2:p1:x3 1 [ a ]
c10:equality int k2:x1 4 [ ]
c4:large:0 arg k2:p1:s1 1 [ large ]
c3:experiencer:-1 int k2:p1:x3 2 [ ]
c6:rounded:0 arg k2:p1:s2 1 [ rounded ]
c5:experiencer:-1 int k2:p1:x3 3 [ ]
c7:pile:0 instance k2:p1:x3 4 [ pile ]
c9:of:0 ext k2:p1:x4 1 [ of ]
c8:thing:12 instance k2:p1:x4 2 [ it ]
k2:p1 punctuation k2:p1:x4 3 [ . ]
c9:of:0 int k2:p1:x3 5 [ ]


!.
0.0575
0.0842
Glass is a hard transparent substance that is used to make things such as windows and bottles.
'Glass' NNP hard JJ transparent NN substance NN that WDT used VBN make VB things NNS such JJ windows NNS bottles NNS 
sem(1,[1001:[tok:'Glass',pos:'NNP',lemma:'Glass',namex:'O'],1002:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1003:[tok:a,pos:'DT',lemma:a,namex:'O'],1004:[tok:hard,pos:'JJ',lemma:hard,namex:'O'],1005:[tok:transparent,pos:'NN',lemma:transparent,namex:'O'],1006:[tok:substance,pos:'NN',lemma:substance,namex:'O'],1007:[tok:that,pos:'WDT',lemma:that,namex:'O'],1008:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1009:[tok:used,pos:'VBN',lemma:use,namex:'O'],1010:[tok:to,pos:'TO',lemma:to,namex:'O'],1011:[tok:make,pos:'VB',lemma:make,namex:'O'],1012:[tok:things,pos:'NNS',lemma:thing,namex:'O'],1013:[tok:such,pos:'JJ',lemma:such,namex:'O'],1014:[tok: (as),pos:'IN',lemma: (as),namex:'O'],1015:[tok:windows,pos:'NNS',lemma:window,namex:'O'],1016:[tok:and,pos:'CC',lemma:and,namex:'O'],1017:[tok:bottles,pos:'NNS',lemma:bottle,namex:'O'],1018:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B],[[1001]:named(B,glass,nam,nam)]),drs([[]:C],[[]:prop(C,drs([[]:D,[1010]:E,[1007]:F,[]:G,[]:H,[1003]:I],[[1002]:eq(B,I),[]:rel(D,E,recipient,0),[]:rel(D,F,topic,0),[1009]:pred(D,use,v,0),[]:prop(E,drs([[]:J,[]:K,[]:L,[1016]:M,[]:N],[[]:rel(J,N,theme,0),[]:rel(J,F,agent,0),[1011]:pred(J,make,v,0),[1013]:pred(N,such,n,0),[1014]:rel(N,M,as,0),[]:rel(K,M,subset_of,1),[1017]:pred(K,bottle,n,0),[]:rel(L,M,subset_of,1),[1015]:pred(L,window,n,0),[1012]:pred(N,thing,n,0)])),[]:eq(I,F),[1006]:pred(I,substance,n,0),[]:rel(I,G,of,0),[1005]:pred(G,transparent,n,0),[1004]:pred(H,hard,a,0),[]:rel(H,I,experiencer,0)]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% Glass is a hard transparent substance that is used to make things such as windows and bottles . 
k4 named c0:glass:nam 0 [ ]
k4 referent k4:p1 0 [ ]
k4 referent k4:x1 0 [ ]
c1:experiencer:-1 ext k4:p1:s1 0 [ ]
c11:superset_of:1 ext (k4:p1):p2:x8 0 [ ]
c16:theme:1 ext (k4:p1):p2:x5 0 [ ]
c19:recipient:1 ext k4:p1:p2 0 [ ]
c20:equality ext k4:p1:x2 0 [ ]
c4:of:0 ext k4:p1:x3 0 [ ]
c6:equality ext k4:p1:x4 0 [ ]
c9:superset_of:1 ext (k4:p1):p2:x7 0 [ ]
k4:p1 attribute c2:hard:0 0 [ ]
k4:p1 concept c3:transparent:0 0 [ ]
k4:p1 concept c5:substance:0 0 [ ]
k4:p1 event c17:use:0 0 [ ]
k4:p1 referent k4:p1:e1 0 [ ]
k4:p1 referent k4:p1:s1 0 [ ]
k4:p1 referent k4:p1:x3 0 [ ]
k4:p1 relation c4:of:0 0 [ ]
k4:p1 relation c6:equality 0 [ ]
k4:p1 role c1:experiencer:-1 0 [ ]
k4:p1 role c19:recipient:1 0 [ ]
k4:p1 role c18:topic:-1 0 [ ]
k4:p1:p2 concept c10:bottle:0 0 [ ]
k4:p1:p2 concept c13:such:0 0 [ ]
k4:p1:p2 concept c7:thing:0 0 [ ]
k4:p1:p2 concept c8:window:0 0 [ ]
k4:p1:p2 event c14:make:0 0 [ ]
k4:p1:p2 referent (k4:p1):p2:e2 0 [ ]
k4:p1:p2 referent (k4:p1):p2:x5 0 [ ]
k4:p1:p2 referent (k4:p1):p2:x7 0 [ ]
k4:p1:p2 referent (k4:p1):p2:x8 0 [ ]
k4:p1:p2 relation c11:superset_of:1 0 [ ]
k4:p1:p2 relation c12:as:0 0 [ ]
k4:p1:p2 relation c9:superset_of:1 0 [ ]
k4:p1:p2 role c16:theme:1 0 [ ]
k4:p1:p2 role c15:agent:-1 0 [ ]
c15:agent:-1 ext (k4:p1):p2:e2 0 [ ]
c18:topic:-1 ext k4:p1:e1 0 [ ]
c0:glass:nam instance k4:x1 1 [ Glass ]
k4:p1 relation c20:equality 1 [ is ]
k4:p1 referent k4:p1:x2 1 [ a ]
c20:equality int k4:x1 2 [ ]
c2:hard:0 arg k4:p1:s1 1 [ hard ]
c1:experiencer:-1 int k4:p1:x2 2 [ ]
c3:transparent:0 instance k4:p1:x3 1 [ transparent ]
c4:of:0 int k4:p1:x2 3 [ ]
c5:substance:0 instance k4:p1:x2 4 [ substance ]
k4:p1 referent k4:p1:x4 1 [ that ]
c6:equality int k4:p1:x2 5 [ ]
k4:p1 surface k4:p1:e1 1 [ is ]
c18:topic:-1 int k4:p1:x4 2 [ ]
c17:use:0 instance k4:p1:e1 2 [ used ]
k4:p1 referent k4:p1:p2 1 [ to ]
c19:recipient:1 int k4:p1:e1 3 [ ]
c14:make:0 instance (k4:p1):p2:e2 1 [ make ]
c15:agent:-1 int k4:p1:x4 3 [ ]
c7:thing:0 instance (k4:p1):p2:x5 1 [ things ]
c16:theme:1 int (k4:p1):p2:e2 2 [ ]
c13:such:0 instance (k4:p1):p2:x5 2 [ such ]
c12:as:0 ext (k4:p1):p2:x6 1 [ as ]
c8:window:0 instance (k4:p1):p2:x7 1 [ windows ]
c9:superset_of:1 int (k4:p1):p2:x6 2 [ ]
c12:as:0 int (k4:p1):p2:x5 3 [ ]
k4:p1:p2 referent (k4:p1):p2:x6 3 [ and ]
c10:bottle:0 instance (k4:p1):p2:x8 1 [ bottles ]
k4:p1:p2 punctuation (k4:p1):p2:x8 2 [ . ]
c11:superset_of:1 int (k4:p1):p2:x6 4 [ ]


!.
A jewel is a precious stone used to decorate valuable things that you wear, such as rings or necklaces.
jewel NN precious JJ stone NN used VBN decorate VB valuable JJ things NNS you PRP wear VBP such JJ rings NNS necklaces NNS 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:jewel,pos:'NN',lemma:jewel,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:precious,pos:'JJ',lemma:precious,namex:'O'],1006:[tok:stone,pos:'NN',lemma:stone,namex:'O'],1007:[tok:used,pos:'VBN',lemma:use,namex:'O'],1008:[tok:to,pos:'TO',lemma:to,namex:'O'],1009:[tok:decorate,pos:'VB',lemma:decorate,namex:'O'],1010:[tok:valuable,pos:'JJ',lemma:valuable,namex:'O'],1011:[tok:things,pos:'NNS',lemma:thing,namex:'O'],1012:[tok:that,pos:'IN',lemma:that,namex:'O'],1013:[tok:you,pos:'PRP',lemma:you,namex:'O'],1014:[tok:wear,pos:'VBP',lemma:wear,namex:'O'],1015:[tok: (','),pos: (','),lemma: (','),namex:'O'],1016:[tok:such,pos:'JJ',lemma:such,namex:'O'],1017:[tok: (as),pos:'IN',lemma: (as),namex:'O'],1018:[tok:rings,pos:'NNS',lemma:ring,namex:'O'],1019:[tok:or,pos:'CC',lemma:or,namex:'O'],1020:[tok:necklaces,pos:'NNS',lemma:necklace,namex:'O'],1021:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B],[[1013]:pred(B,person,n,1)]),drs([[]:C,[1001]:D],[[]:prop(C,drs([[]:E,[1008]:F,[]:G,[]:H,[1004]:I],[[1019]:or(drs([[]:J],[[1003]:eq(D,I),[1016]:pred(I,such,n,0),[1017]:rel(I,J,as,0),[1018]:pred(J,ring,n,0)]),drs([[]:K],[[1003]:eq(D,I),[1016]:pred(I,such,n,0),[1017]:rel(I,K,as,0),[1020]:pred(K,necklace,n,0)])),[]:rel(E,F,recipient,0),[]:rel(E,G,topic,0),[1007]:pred(E,use,v,0),[]:prop(F,drs([[]:L,[]:M,[1012]:N,[]:O,[]:P],[[]:rel(L,P,theme,0),[]:rel(L,G,agent,0),[1009]:pred(L,decorate,v,0),[]:rel(M,N,theme,0),[]:rel(M,B,agent,0),[1014]:pred(M,wear,v,0),[]:eq(P,N),[1011]:pred(P,thing,n,0),[1010]:pred(O,valuable,a,0),[]:rel(O,P,experiencer,0)])),[]:eq(I,G),[1006]:pred(I,stone,n,0),[1005]:pred(H,precious,a,0),[]:rel(H,I,experiencer,0)])),[1002]:pred(D,jewel,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A jewel is a precious stone used to decorate valuable things that you wear , such as rings or necklaces . 
k5 concept c0:jewel:0 0 [ ]
k5 referent k5:p1 0 [ ]
k6 concept c20:ring:0 0 [ ]
k6 concept c22:such:0 0 [ ]
k6 referent k6:x7 0 [ ]
k6 relation c21:as:0 0 [ ]
k7 concept c24:necklace:0 0 [ ]
k7 concept c26:such:0 0 [ ]
k7 referent k7:x8 0 [ ]
k7 relation c25:as:0 0 [ ]
c1:experiencer:-1 ext k5:p1:s1 0 [ ]
c11:agent:1 ext (k5:p1):p2:x5 0 [ ]
c15:theme:1 ext (k5:p1):p2:x4 0 [ ]
c18:recipient:1 ext k5:p1:p2 0 [ ]
c19:or antecedent k6 0 [ ]
c19:or consequent k7 0 [ ]
c23:equality ext k5:p1:x2 0 [ ]
c27:equality ext k5:p1:x2 0 [ ]
c4:equality ext k5:p1:x3 0 [ ]
c5:experiencer:-1 ext (k5:p1):p2:s2 0 [ ]
c9:equality ext (k5:p1):p2:x6 0 [ ]
k5:p1 attribute c2:precious:0 0 [ ]
k5:p1 binary c19:or 0 [ ]
k5:p1 concept c3:stone:0 0 [ ]
k5:p1 event c16:use:0 0 [ ]
k5:p1 referent k5:p1:e1 0 [ ]
k5:p1 referent k5:p1:s1 0 [ ]
k5:p1 referent k5:p1:x3 0 [ ]
k5:p1 relation c4:equality 0 [ ]
k5:p1 role c1:experiencer:-1 0 [ ]
k5:p1 role c18:recipient:1 0 [ ]
k5:p1 role c17:topic:-1 0 [ ]
k5:p1:p2 attribute c6:valuable:0 0 [ ]
k5:p1:p2 concept c7:thing:0 0 [ ]
k5:p1:p2 concept c8:person:1 0 [ ]
k5:p1:p2 event c10:wear:0 0 [ ]
k5:p1:p2 event c13:decorate:0 0 [ ]
k5:p1:p2 referent (k5:p1):p2:e2 0 [ ]
k5:p1:p2 referent (k5:p1):p2:e3 0 [ ]
k5:p1:p2 referent (k5:p1):p2:s2 0 [ ]
k5:p1:p2 referent (k5:p1):p2:x4 0 [ ]
k5:p1:p2 referent (k5:p1):p2:x5 0 [ ]
k5:p1:p2 relation c9:equality 0 [ ]
k5:p1:p2 role c11:agent:1 0 [ ]
k5:p1:p2 role c15:theme:1 0 [ ]
k5:p1:p2 role c5:experiencer:-1 0 [ ]
k5:p1:p2 role c12:theme:-1 0 [ ]
k5:p1:p2 role c14:agent:-1 0 [ ]
c12:theme:-1 ext (k5:p1):p2:e2 0 [ ]
c14:agent:-1 ext (k5:p1):p2:e3 0 [ ]
c17:topic:-1 ext k5:p1:e1 0 [ ]
k5 referent k5:x1 1 [ A ]
c0:jewel:0 instance k5:x1 2 [ jewel ]
k6 relation c23:equality 1 [ is ]
k7 relation c27:equality 1 [ ]
k5:p1 referent k5:p1:x2 1 [ a ]
c23:equality int k5:x1 3 [ ]
c27:equality int k5:x1 4 [ ]
c2:precious:0 arg k5:p1:s1 1 [ precious ]
c1:experiencer:-1 int k5:p1:x2 2 [ ]
c3:stone:0 instance k5:p1:x2 3 [ stone ]
c16:use:0 instance k5:p1:e1 1 [ used ]
c17:topic:-1 int k5:p1:x3 1 [ ]
k5:p1 referent k5:p1:p2 1 [ to ]
c18:recipient:1 int k5:p1:e1 2 [ ]
c13:decorate:0 instance (k5:p1):p2:e3 1 [ decorate ]
c14:agent:-1 int k5:p1:x3 2 [ ]
c4:equality int k5:p1:x2 4 [ ]
c5:experiencer:-1 int (k5:p1):p2:x4 1 [ ]
c6:valuable:0 arg (k5:p1):p2:s2 1 [ valuable ]
c15:theme:1 int (k5:p1):p2:e3 2 [ ]
c7:thing:0 instance (k5:p1):p2:x4 2 [ things ]
k5:p1:p2 referent (k5:p1):p2:x6 1 [ that ]
c9:equality int (k5:p1):p2:x4 3 [ ]
c11:agent:1 int (k5:p1):p2:e2 1 [ ]
c8:person:1 instance (k5:p1):p2:x5 1 [ you ]
c10:wear:0 instance (k5:p1):p2:e2 2 [ wear ]
c12:theme:-1 int (k5:p1):p2:x6 2 [ ]
k5:p1:p2 punctuation (k5:p1):p2:e2 3 [ , ]
c22:such:0 instance k5:p1:x2 5 [ such ]
c26:such:0 instance k5:p1:x2 6 [ ]
c21:as:0 ext k6:x7 1 [ as ]
c25:as:0 ext k7:x8 1 [ ]
c20:ring:0 instance k6:x7 2 [ rings ]
c21:as:0 int k5:p1:x2 7 [ ]
k5:p1:p2 surface (k5:p1):p2:e2 4 [ or ]
c24:necklace:0 instance k7:x8 2 [ necklaces ]
k7 punctuation k7:x8 3 [ . ]
c25:as:0 int k5:p1:x2 8 [ ]


!.
0.1075
0.2692
A magician is a person who entertains people by doing magic tricks.
magician NN person NN who WP people NNS doing VBG magic JJ tricks NNS 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:magician,pos:'NN',lemma:magician,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:person,pos:'NN',lemma:person,namex:'O'],1006:[tok:who,pos:'WP',lemma:who,namex:'O'],1007:[tok:entertains,pos:'VBZ',lemma:entertain,namex:'O'],1008:[tok:people,pos:'NNS',lemma:people,namex:'O'],1009:[tok:by,pos:'IN',lemma:by,namex:'O'],1010:[tok:doing,pos:'VBG',lemma:do,namex:'O'],1011:[tok:magic,pos:'JJ',lemma:magic,namex:'O'],1012:[tok:tricks,pos:'NNS',lemma:trick,namex:'O'],1013:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[]:E,[]:F,[]:G,[]:H,[1006]:I,[1004]:J],[[1003]:eq(C,J),[1009]:rel(G,D,by,0),[]:rel(D,F,theme,0),[]:rel(D,I,agent,0),[1010]:pred(D,do,v,0),[1012]:pred(F,trick,n,0),[1011]:pred(E,magic,a,0),[]:rel(E,F,experiencer,0),[]:rel(G,H,theme,0),[]:rel(G,I,agent,0),[1007]:pred(G,entertain,v,0),[1008]:pred(H,people,n,0),[]:eq(J,I),[1005]:pred(J,person,n,0)])),[1002]:pred(C,magician,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A magician is a person who entertains people by doing magic tricks . 
k4 concept c0:magician:0 0 [ ]
k4 referent k4:p1 0 [ ]
c12:theme:1 ext k4:p1:x5 0 [ ]
c14:equality ext k4:p1:x2 0 [ ]
c2:equality ext k4:p1:x3 0 [ ]
c6:theme:1 ext k4:p1:x4 0 [ ]
c7:experiencer:-1 ext k4:p1:s1 0 [ ]
k4:p1 attribute c8:magic:0 0 [ ]
k4:p1 concept c1:person:0 0 [ ]
k4:p1 concept c3:people:0 0 [ ]
k4:p1 concept c9:trick:0 0 [ ]
k4:p1 event c10:do:0 0 [ ]
k4:p1 event c4:entertain:0 0 [ ]
k4:p1 referent k4:p1:e1 0 [ ]
k4:p1 referent k4:p1:e2 0 [ ]
k4:p1 referent k4:p1:s1 0 [ ]
k4:p1 referent k4:p1:x4 0 [ ]
k4:p1 referent k4:p1:x5 0 [ ]
k4:p1 relation c13:by:0 0 [ ]
k4:p1 relation c2:equality 0 [ ]
k4:p1 role c12:theme:1 0 [ ]
k4:p1 role c6:theme:1 0 [ ]
k4:p1 role c7:experiencer:-1 0 [ ]
k4:p1 role c11:agent:-1 0 [ ]
k4:p1 role c5:agent:-1 0 [ ]
c11:agent:-1 ext k4:p1:e2 0 [ ]
c5:agent:-1 ext k4:p1:e1 0 [ ]
k4 referent k4:x1 1 [ A ]
c0:magician:0 instance k4:x1 2 [ magician ]
k4:p1 relation c14:equality 1 [ is ]
k4:p1 referent k4:p1:x2 1 [ a ]
c14:equality int k4:x1 3 [ ]
c1:person:0 instance k4:p1:x2 2 [ person ]
k4:p1 referent k4:p1:x3 1 [ who ]
c2:equality int k4:p1:x2 3 [ ]
c4:entertain:0 instance k4:p1:e1 1 [ entertains ]
c5:agent:-1 int k4:p1:x3 2 [ ]
c3:people:0 instance k4:p1:x4 1 [ people ]
c6:theme:1 int k4:p1:e1 2 [ ]
c13:by:0 ext k4:p1:e2 1 [ by ]
c10:do:0 instance k4:p1:e2 2 [ doing ]
c13:by:0 int k4:p1:e1 3 [ ]
c11:agent:-1 int k4:p1:x3 3 [ ]
c7:experiencer:-1 int k4:p1:x5 1 [ ]
c8:magic:0 arg k4:p1:s1 1 [ magic ]
c9:trick:0 instance k4:p1:x5 2 [ tricks ]
c12:theme:1 int k4:p1:e2 3 [ ]
k4:p1 punctuation k4:p1:x5 3 [ . ]


!.
In ancient times, an oracle was a priest or priestess who made statements about future events or about the truth.
ancient JJ times NNS oracle NN was VBD priest NN priestess NN who WP made VBD statements NNS future JJ events NNS truth NN 
sem(1,[1001:[tok:'In',pos:'IN',lemma:in,namex:'O'],1002:[tok:ancient,pos:'JJ',lemma:ancient,namex:'O'],1003:[tok:times,pos:'NNS',lemma:time,namex:'O'],1004:[tok: (','),pos: (','),lemma: (','),namex:'O'],1005:[tok:an,pos:'DT',lemma:an,namex:'O'],1006:[tok:oracle,pos:'NN',lemma:oracle,namex:'O'],1007:[tok:was,pos:'VBD',lemma:be,namex:'O'],1008:[tok:a,pos:'DT',lemma:a,namex:'O'],1009:[tok:priest,pos:'NN',lemma:priest,namex:'O'],1010:[tok:or,pos:'CC',lemma:or,namex:'O'],1011:[tok:priestess,pos:'NN',lemma:priestess,namex:'O'],1012:[tok:who,pos:'WP',lemma:who,namex:'O'],1013:[tok:made,pos:'VBD',lemma:make,namex:'O'],1014:[tok:statements,pos:'NNS',lemma:statement,namex:'O'],1015:[tok:about,pos:'IN',lemma:about,namex:'O'],1016:[tok:future,pos:'JJ',lemma:future,namex:'O'],1017:[tok:events,pos:'NNS',lemma:event,namex:'O'],1018:[tok:or,pos:'CC',lemma:or,namex:'O'],1019:[tok:about,pos:'IN',lemma:about,namex:'O'],1020:[tok:the,pos:'DT',lemma:the,namex:'O'],1021:[tok:truth,pos:'NN',lemma:truth,namex:'O'],1022:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[1020]:B],[[1021]:pred(B,truth,n,0)]),drs([[]:C,[]:D,[]:E,[1005]:F],[[1001]:rel(E,D,in,0),[1003]:pred(D,time,n,0),[1002]:pred(C,ancient,a,0),[]:rel(C,D,experiencer,0),[]:prop(E,drs([[1012]:G,[1008]:H],[[1007]:eq(F,H),[1018]:or(drs([[]:I,[]:J,[]:K,[]:L],[[]:rel(I,L,theme,0),[]:rel(I,G,agent,0),[1013]:pred(I,make,v,0),[1015]:rel(L,K,about,0),[1017]:pred(K,event,n,0),[1016]:pred(J,future,a,0),[]:rel(J,K,experiencer,0),[1014]:pred(L,statement,n,0)]),drs([[]:M,[]:N],[[]:rel(M,N,theme,0),[]:rel(M,G,agent,0),[1013]:pred(M,make,v,0),[1019]:rel(N,B,about,0),[1014]:pred(N,statement,n,0)])),[]:eq(H,G),[1010]:or(drs([],[[1009]:pred(H,priest,n,0)]),drs([],[[1011]:pred(H,priestess,n,0)]))])),[1006]:pred(F,oracle,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% In ancient times , an oracle was a priest or priestess who made statements about future events or about the truth . 
k4 attribute c22:ancient:0 0 [ ]
k4 concept c0:oracle:0 0 [ ]
k4 concept c23:time:0 0 [ ]
k4 referent k4:p1 0 [ ]
k4 referent k4:s1 0 [ ]
k4 referent k4:x2 0 [ ]
k4 relation c24:in:0 0 [ ]
k4 role c21:experiencer:-1 0 [ ]
k5 concept c2:priest:0 0 [ ]
k6 concept c3:priestess:0 0 [ ]
k7 attribute c8:future:0 0 [ ]
k7 concept c6:statement:0 0 [ ]
k7 concept c9:event:0 0 [ ]
k7 event c11:make:0 0 [ ]
k7 referent k7:e1 0 [ ]
k7 referent k7:s2 0 [ ]
k7 referent k7:x5 0 [ ]
k7 referent k7:x6 0 [ ]
k7 relation c10:about:0 0 [ ]
k7 role c13:theme:1 0 [ ]
k7 role c7:experiencer:-1 0 [ ]
k7 role c12:agent:-1 0 [ ]
k8 concept c14:statement:0 0 [ ]
k8 concept c15:truth:0 0 [ ]
k8 event c17:make:0 0 [ ]
k8 referent k8:e2 0 [ ]
k8 referent k8:x7 0 [ ]
k8 relation c16:about:0 0 [ ]
k8 role c19:theme:1 0 [ ]
k8 role c18:agent:-1 0 [ ]
c1:or antecedent k5 0 [ ]
c1:or consequent k6 0 [ ]
c13:theme:1 ext k7:x5 0 [ ]
c19:theme:1 ext k8:x7 0 [ ]
c20:equality ext k4:p1:x3 0 [ ]
c21:experiencer:-1 ext k4:s1 0 [ ]
c4:equality ext k4:p1:x4 0 [ ]
c5:or antecedent k7 0 [ ]
c5:or consequent k8 0 [ ]
c7:experiencer:-1 ext k7:s2 0 [ ]
k4:p1 binary c1:or 0 [ ]
k4:p1 binary c5:or 0 [ ]
k4:p1 relation c4:equality 0 [ ]
c12:agent:-1 ext k7:e1 0 [ ]
c18:agent:-1 ext k8:e2 0 [ ]
c24:in:0 ext k4:x2 1 [ In ]
c22:ancient:0 arg k4:s1 1 [ ancient ]
c21:experiencer:-1 int k4:x2 2 [ ]
c23:time:0 instance k4:x2 3 [ times ]
c24:in:0 int k4:p1 1 [ ]
k4 punctuation k4:x2 4 [ , ]
k4 referent k4:x1 1 [ an ]
c0:oracle:0 instance k4:x1 2 [ oracle ]
k4:p1 relation c20:equality 1 [ was ]
k4:p1 referent k4:p1:x3 1 [ a ]
c20:equality int k4:x1 3 [ ]
c2:priest:0 instance k4:p1:x3 2 [ priest ]
k4:p1 function k4:p1:x3 3 [ or ]
c3:priestess:0 instance k4:p1:x3 4 [ priestess ]
k4:p1 referent k4:p1:x4 1 [ who ]
c4:equality int k4:p1:x3 5 [ ]
c11:make:0 instance k7:e1 1 [ made ]
c17:make:0 instance k8:e2 1 [ ]
c12:agent:-1 int k4:p1:x4 2 [ ]
c18:agent:-1 int k4:p1:x4 3 [ ]
c14:statement:0 instance k8:x7 1 [ ]
c6:statement:0 instance k7:x5 1 [ statements ]
c13:theme:1 int k7:e1 2 [ ]
c19:theme:1 int k8:e2 2 [ ]
c10:about:0 ext k7:x6 1 [ about ]
c8:future:0 arg k7:s2 1 [ future ]
c10:about:0 int k7:x5 2 [ ]
c9:event:0 instance k7:x6 2 [ events ]
k7 surface k7:s2 2 [ or ]
c7:experiencer:-1 int k7:x6 3 [ ]
c16:about:0 ext k8:x8 1 [ about ]
k8 referent k8:x8 2 [ the ]
c15:truth:0 instance k8:x8 3 [ truth ]
c16:about:0 int k8:x7 2 [ ]
k8 punctuation k8:x8 4 [ . ]


!.
0.1300
0.1000
A crane is a large machine that moves heavy things by lifting them in the air.
crane NN large JJ machine NN that WDT heavy JJ things NNS lifting VBG them PRP air NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:crane,pos:'NN',lemma:crane,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:large,pos:'JJ',lemma:large,namex:'O'],1006:[tok:machine,pos:'NN',lemma:machine,namex:'O'],1007:[tok:that,pos:'WDT',lemma:that,namex:'O'],1008:[tok:moves,pos:'VBZ',lemma:move,namex:'O'],1009:[tok:heavy,pos:'JJ',lemma:heavy,namex:'O'],1010:[tok:things,pos:'NNS',lemma:thing,namex:'O'],1011:[tok:by,pos:'IN',lemma:by,namex:'O'],1012:[tok:lifting,pos:'VBG',lemma:lift,namex:'O'],1013:[tok:them,pos:'PRP',lemma:they,namex:'O'],1014:[tok:in,pos:'IN',lemma:in,namex:'O'],1015:[tok:the,pos:'DT',lemma:the,namex:'O'],1016:[tok:air,pos:'NN',lemma:air,namex:'O'],1017:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[1015]:B,[]:C],[[1016]:pred(B,air,n,0),[1013]:pred(C,thing,n,12)]),drs([[]:D,[1001]:E],[[]:prop(D,drs([[]:F,[]:G,[]:H,[]:I,[1007]:J,[]:K,[1004]:L],[[1003]:eq(E,L),[1011]:rel(G,F,by,0),[1014]:rel(F,B,in,0),[]:rel(F,C,theme,0),[]:rel(F,J,agent,0),[1012]:pred(F,lift,v,0),[]:rel(G,I,theme,0),[]:rel(G,J,agent,0),[1008]:pred(G,move,v,0),[1010]:pred(I,thing,n,0),[1009]:pred(H,heavy,a,0),[]:rel(H,I,experiencer,0),[]:eq(L,J),[1006]:pred(L,machine,n,0),[1005]:pred(K,large,a,0),[]:rel(K,L,experiencer,0)])),[1002]:pred(E,crane,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A crane is a large machine that moves heavy things by lifting them in the air . 
k4 concept c0:crane:0 0 [ ]
k4 referent k4:p1 0 [ ]
c1:experiencer:-1 ext k4:p1:s1 0 [ ]
c10:theme:1 ext k4:p1:x4 0 [ ]
c14:theme:1 ext k4:p1:x5 0 [ ]
c18:equality ext k4:p1:x2 0 [ ]
c4:equality ext k4:p1:x3 0 [ ]
c5:experiencer:-1 ext k4:p1:s2 0 [ ]
k4:p1 attribute c2:large:0 0 [ ]
k4:p1 attribute c6:heavy:0 0 [ ]
k4:p1 concept c11:thing:12 0 [ ]
k4:p1 concept c15:air:0 0 [ ]
k4:p1 concept c3:machine:0 0 [ ]
k4:p1 concept c7:thing:0 0 [ ]
k4:p1 event c12:lift:0 0 [ ]
k4:p1 event c8:move:0 0 [ ]
k4:p1 referent k4:p1:e1 0 [ ]
k4:p1 referent k4:p1:e2 0 [ ]
k4:p1 referent k4:p1:s1 0 [ ]
k4:p1 referent k4:p1:s2 0 [ ]
k4:p1 referent k4:p1:x4 0 [ ]
k4:p1 referent k4:p1:x5 0 [ ]
k4:p1 relation c16:in:0 0 [ ]
k4:p1 relation c17:by:0 0 [ ]
k4:p1 relation c4:equality 0 [ ]
k4:p1 role c1:experiencer:-1 0 [ ]
k4:p1 role c10:theme:1 0 [ ]
k4:p1 role c14:theme:1 0 [ ]
k4:p1 role c5:experiencer:-1 0 [ ]
k4:p1 role c13:agent:-1 0 [ ]
k4:p1 role c9:agent:-1 0 [ ]
c13:agent:-1 ext k4:p1:e2 0 [ ]
c9:agent:-1 ext k4:p1:e1 0 [ ]
k4 referent k4:x1 1 [ A ]
c0:crane:0 instance k4:x1 2 [ crane ]
k4:p1 relation c18:equality 1 [ is ]
k4:p1 referent k4:p1:x2 1 [ a ]
c18:equality int k4:x1 3 [ ]
c2:large:0 arg k4:p1:s1 1 [ large ]
c1:experiencer:-1 int k4:p1:x2 2 [ ]
c3:machine:0 instance k4:p1:x2 3 [ machine ]
k4:p1 referent k4:p1:x3 1 [ that ]
c4:equality int k4:p1:x2 4 [ ]
c8:move:0 instance k4:p1:e1 1 [ moves ]
c9:agent:-1 int k4:p1:x3 2 [ ]
c5:experiencer:-1 int k4:p1:x4 1 [ ]
c6:heavy:0 arg k4:p1:s2 1 [ heavy ]
c10:theme:1 int k4:p1:e1 2 [ ]
c7:thing:0 instance k4:p1:x4 2 [ things ]
c17:by:0 ext k4:p1:e2 1 [ by ]
c12:lift:0 instance k4:p1:e2 2 [ lifting ]
c17:by:0 int k4:p1:e1 3 [ ]
c13:agent:-1 int k4:p1:x3 3 [ ]
c11:thing:12 instance k4:p1:x5 1 [ them ]
c14:theme:1 int k4:p1:e2 3 [ ]
c16:in:0 ext k4:p1:x6 1 [ in ]
k4:p1 referent k4:p1:x6 2 [ the ]
c15:air:0 instance k4:p1:x6 3 [ air ]
c16:in:0 int k4:p1:e2 4 [ ]
k4:p1 punctuation k4:p1:x6 4 [ . ]


!.
An implement is a tool or other piece of equipment.
implement VB tool NN other JJ piece NN equipment NN 
sem(1,[1001:[tok:'An',pos:'DT',lemma:an,namex:'O'],1002:[tok:implement,pos:'VB',lemma:implement,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:tool,pos:'NN',lemma:tool,namex:'O'],1006:[tok:or,pos:'CC',lemma:or,namex:'O'],1007:[tok:other,pos:'JJ',lemma:other,namex:'O'],1008:[tok:piece,pos:'NN',lemma:piece,namex:'O'],1009:[tok:of,pos:'IN',lemma:of,namex:'O'],1010:[tok:equipment,pos:'NN',lemma:equipment,namex:'O'],1011:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B],[[1008]:pred(B,piece,n,0)]),drs([[]:C,[1001]:D],[[]:prop(C,drs([[]:E,[1004]:F],[[1003]:eq(D,F),[1009]:rel(F,E,of,0),[1010]:pred(E,equipment,n,0),[1006]:or(drs([],[[1005]:pred(F,tool,n,0)]),drs([],[[]:not(drs([],[[1007]:eq(F,B)])),[1008]:pred(F,piece,n,0)]))])),[1002]:pred(D,implement,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% An implement is a tool or other piece of equipment . 
k2 concept c0:implement:0 0 [ ]
k2 referent k2:p1 0 [ ]
k3 concept c2:tool:0 0 [ ]
k4 attribute c4:other:0 0 [ ]
k4 concept c5:piece:0 0 [ ]
k4 referent k4:s1 0 [ ]
k4 role c3:experiencer:-1 0 [ ]
c1:or antecedent k3 0 [ ]
c1:or consequent k4 0 [ ]
c3:experiencer:-1 ext k4:s1 0 [ ]
c8:equality ext k2:p1:x2 0 [ ]
k2:p1 binary c1:or 0 [ ]
k2:p1 concept c6:equipment:0 0 [ ]
k2:p1 referent k2:p1:x3 0 [ ]
k2:p1 relation c7:of:0 0 [ ]
k2 referent k2:x1 1 [ An ]
c0:implement:0 instance k2:x1 2 [ implement ]
k2:p1 relation c8:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ a ]
c8:equality int k2:x1 3 [ ]
c2:tool:0 instance k2:p1:x2 2 [ tool ]
k2:p1 function k2:p1:x2 3 [ or ]
c4:other:0 arg k4:s1 1 [ other ]
c3:experiencer:-1 int k2:p1:x2 4 [ ]
c5:piece:0 instance k2:p1:x2 5 [ piece ]
c7:of:0 ext k2:p1:x3 1 [ of ]
c6:equipment:0 instance k2:p1:x3 2 [ equipment ]
k2:p1 punctuation k2:p1:x3 3 [ . ]
c7:of:0 int k2:p1:x2 6 [ ]


!.
0.1850
0.1060
Your brother is a boy or a man who has the same parents as you.
'Your' PRP$ brother NN boy NN man NN who WP same JJ parents NNS you PRP 
sem(1,[1001:[tok:'Your',pos:'PRP$',lemma:your,namex:'O'],1002:[tok:brother,pos:'NN',lemma:brother,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:boy,pos:'NN',lemma:boy,namex:'O'],1006:[tok:or,pos:'CC',lemma:or,namex:'O'],1007:[tok:a,pos:'DT',lemma:a,namex:'O'],1008:[tok:man,pos:'NN',lemma:man,namex:'O'],1009:[tok:who,pos:'WP',lemma:who,namex:'O'],1010:[tok:has,pos:'VBZ',lemma:have,namex:'O'],1011:[tok:the,pos:'DT',lemma:the,namex:'O'],1012:[tok:same,pos:'JJ',lemma:same,namex:'O'],1013:[tok:parents,pos:'NNS',lemma:parent,namex:'O'],1014:[tok: (as),pos:'IN',lemma: (as),namex:'O'],1015:[tok:you,pos:'PRP',lemma:you,namex:'O'],1016:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[]:C,[1011]:D,[]:E,[]:F],[[1015]:pred(B,person,n,1),[1013]:pred(D,parent,n,0),[1012]:pred(C,same,a,0),[]:rel(C,D,experiencer,0),[1002]:pred(E,brother,n,0),[]:rel(E,F,of,1),[1001]:pred(F,person,n,1)]),drs([[]:G],[[]:prop(G,drs([],[[1006]:or(drs([[1004]:H],[[1003]:eq(E,H),[1005]:pred(H,boy,n,0)]),drs([[]:I,[1009]:J,[1007]:K],[[1003]:eq(E,K),[]:rel(I,D,theme,0),[]:rel(I,J,agent,0),[1010]:pred(I,have,v,0),[1014]:rel(D,B,as,0),[]:eq(K,J),[1008]:pred(K,man,n,0)]))]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% Your brother is a boy or a man who has the same parents as you . 
k3 concept c0:person:1 0 [ ]
k3 concept c2:brother:0 0 [ ]
k3 referent k3:p1 0 [ ]
k3 referent k3:x1 0 [ ]
k3 referent k3:x2 0 [ ]
k3 relation c1:of:1 0 [ ]
k4 concept c4:boy:0 0 [ ]
k5 attribute c9:same:0 0 [ ]
k5 concept c10:parent:0 0 [ ]
k5 concept c11:person:1 0 [ ]
k5 concept c6:man:0 0 [ ]
k5 event c13:have:0 0 [ ]
k5 referent k5:e1 0 [ ]
k5 referent k5:s1 0 [ ]
k5 referent k5:x7 0 [ ]
k5 relation c12:as:0 0 [ ]
k5 relation c7:equality 0 [ ]
k5 role c15:theme:1 0 [ ]
k5 role c8:experiencer:-1 0 [ ]
k5 role c14:agent:-1 0 [ ]
c1:of:1 ext k3:x1 0 [ ]
c15:theme:1 ext k5:x6 0 [ ]
c16:equality ext k5:x4 0 [ ]
c3:or antecedent k4 0 [ ]
c3:or consequent k5 0 [ ]
c5:equality ext k4:x3 0 [ ]
c7:equality ext k5:x5 0 [ ]
c8:experiencer:-1 ext k5:s1 0 [ ]
k3:p1 binary c3:or 0 [ ]
c14:agent:-1 ext k5:e1 0 [ ]
c0:person:1 instance k3:x1 1 [ Your ]
c1:of:1 int k3:x2 1 [ ]
c2:brother:0 instance k3:x2 2 [ brother ]
k4 relation c5:equality 1 [ is ]
k5 relation c16:equality 1 [ ]
k4 referent k4:x3 1 [ a ]
c5:equality int k3:x2 3 [ ]
c4:boy:0 instance k4:x3 2 [ boy ]
k5 surface k5:e1 1 [ or ]
c14:agent:-1 int k5:x5 1 [ ]
k5 referent k5:x4 1 [ a ]
c16:equality int k3:x2 4 [ ]
c6:man:0 instance k5:x4 2 [ man ]
k5 referent k5:x5 2 [ who ]
c7:equality int k5:x4 3 [ ]
c13:have:0 instance k5:e1 2 [ has ]
k5 referent k5:x6 1 [ the ]
c15:theme:1 int k5:e1 3 [ ]
c9:same:0 arg k5:s1 1 [ same ]
c8:experiencer:-1 int k5:x6 2 [ ]
c10:parent:0 instance k5:x6 3 [ parents ]
c12:as:0 ext k5:x7 1 [ as ]
c11:person:1 instance k5:x7 2 [ you ]
k5 punctuation k5:x7 3 [ . ]
c12:as:0 int k5:x6 4 [ ]


!.
A lad is a young man or boy.
lad NN young JJ man NN boy NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:lad,pos:'NN',lemma:lad,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:young,pos:'JJ',lemma:young,namex:'O'],1006:[tok:man,pos:'NN',lemma:man,namex:'O'],1007:[tok:or,pos:'CC',lemma:or,namex:'O'],1008:[tok:boy,pos:'NN',lemma:boy,namex:'O'],1009:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[1004]:E],[[1003]:eq(C,E),[1007]:or(drs([],[[1006]:pred(E,man,n,0)]),drs([],[[1008]:pred(E,boy,n,0)])),[1005]:pred(D,young,a,0),[]:rel(D,E,experiencer,0)])),[1002]:pred(C,lad,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A lad is a young man or boy . 
k2 concept c0:lad:0 0 [ ]
k2 referent k2:p1 0 [ ]
k3 concept c4:man:0 0 [ ]
k4 concept c5:boy:0 0 [ ]
c1:experiencer:-1 ext k2:p1:s1 0 [ ]
c3:or antecedent k3 0 [ ]
c3:or consequent k4 0 [ ]
c6:equality ext k2:p1:x2 0 [ ]
k2:p1 attribute c2:young:0 0 [ ]
k2:p1 binary c3:or 0 [ ]
k2:p1 referent k2:p1:s1 0 [ ]
k2:p1 role c1:experiencer:-1 0 [ ]
k2 referent k2:x1 1 [ A ]
c0:lad:0 instance k2:x1 2 [ lad ]
k2:p1 relation c6:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ a ]
c2:young:0 arg k2:p1:s1 1 [ young ]
c1:experiencer:-1 int k2:p1:x2 2 [ ]
c4:man:0 instance k2:p1:x2 3 [ man ]
k2:p1 function k2:p1:x2 4 [ or ]
c5:boy:0 instance k2:p1:x2 5 [ boy ]
c6:equality int k2:x1 3 [ ]
k2:p1 punctuation k2:p1:x2 6 [ . ]


!.
0.1275
0.9615
A sage is a person who is regarded as being very wise.
sage NN person NN who WP regarded VBN being VBG very RB wise JJ 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:sage,pos:'NN',lemma:sage,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:person,pos:'NN',lemma:person,namex:'O'],1006:[tok:who,pos:'WP',lemma:who,namex:'O'],1007:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1008:[tok:regarded,pos:'VBN',lemma:regard,namex:'O'],1009:[tok: (as),pos:'IN',lemma: (as),namex:'O'],1010:[tok:being,pos:'VBG',lemma:be,namex:'O'],1011:[tok:very,pos:'RB',lemma:very,namex:'O'],1012:[tok:wise,pos:'JJ',lemma:wise,namex:'O'],1013:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[]:E,[]:F,[1006]:G,[1004]:H],[[1003]:eq(C,H),[1009]:rel(F,D,as,0),[1011]:pred(D,very,r,0),[]:rel(D,E,experiencer,0),[1012]:pred(D,wise,a,0),[]:rel(F,G,theme,0),[1008]:pred(F,regard,v,0),[]:eq(H,G),[1005]:pred(H,person,n,0)])),[1002]:pred(C,sage,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A sage is a person who is regarded as being very wise . 
k3 concept c0:sage:0 0 [ ]
k3 referent k3:p1 0 [ ]
c2:equality ext k3:p1:x3 0 [ ]
c6:experiencer:1 ext k3:p1:x4 0 [ ]
c6:experiencer:1 int k3:p1:s1 0 [ ]
c9:equality ext k3:p1:x2 0 [ ]
k3:p1 attribute c5:wise:0 0 [ ]
k3:p1 attribute c7:very:0 0 [ ]
k3:p1 concept c1:person:0 0 [ ]
k3:p1 event c3:regard:0 0 [ ]
k3:p1 referent k3:p1:e1 0 [ ]
k3:p1 referent k3:p1:s1 0 [ ]
k3:p1 referent k3:p1:x4 0 [ ]
k3:p1 relation c2:equality 0 [ ]
k3:p1 relation c8:as:0 0 [ ]
k3:p1 role c6:experiencer:1 0 [ ]
k3:p1 role c4:theme:-1 0 [ ]
c4:theme:-1 ext k3:p1:e1 0 [ ]
k3 referent k3:x1 1 [ A ]
c0:sage:0 instance k3:x1 2 [ sage ]
k3:p1 relation c9:equality 1 [ is ]
k3:p1 referent k3:p1:x2 1 [ a ]
c9:equality int k3:x1 3 [ ]
c1:person:0 instance k3:p1:x2 2 [ person ]
k3:p1 referent k3:p1:x3 1 [ who ]
c2:equality int k3:p1:x2 3 [ ]
k3:p1 surface k3:p1:e1 1 [ is ]
c4:theme:-1 int k3:p1:x3 2 [ ]
c3:regard:0 instance k3:p1:e1 2 [ regarded ]
c8:as:0 ext k3:p1:s1 1 [ as ]
k3:p1 surface k3:p1:s1 2 [ being ]
c8:as:0 int k3:p1:e1 3 [ ]
c7:very:0 arg k3:p1:s1 3 [ very ]
k3:p1:s1 main k3:p1 1 [ ]
c5:wise:0 arg k3:p1:s1 4 [ wise ]
k3 punctuation k3:p1 2 [ . ]


!.
In legends and fairy stories, a wizard is a man who has magic powers.
legends NNS fairy JJ stories NNS wizard NN man NN who WP magic JJ powers NNS 
sem(1,[1001:[tok:'In',pos:'IN',lemma:in,namex:'O'],1002:[tok:legends,pos:'NNS',lemma:legend,namex:'O'],1003:[tok:and,pos:'CC',lemma:and,namex:'O'],1004:[tok:fairy,pos:'JJ',lemma:fairy,namex:'O'],1005:[tok:stories,pos:'NNS',lemma:story,namex:'O'],1006:[tok: (','),pos: (','),lemma: (','),namex:'O'],1007:[tok:a,pos:'DT',lemma:a,namex:'O'],1008:[tok:wizard,pos:'NN',lemma:wizard,namex:'O'],1009:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1010:[tok:a,pos:'DT',lemma:a,namex:'O'],1011:[tok:man,pos:'NN',lemma:man,namex:'O'],1012:[tok:who,pos:'WP',lemma:who,namex:'O'],1013:[tok:has,pos:'VBZ',lemma:have,namex:'O'],1014:[tok:magic,pos:'JJ',lemma:magic,namex:'O'],1015:[tok:powers,pos:'NNS',lemma:power,namex:'O'],1016:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[]:C,[]:D,[1003]:E,[]:F,[1007]:G],[[1001]:rel(F,E,in,0),[]:rel(C,E,subset_of,1),[1005]:pred(C,story,n,0),[1004]:pred(B,fairy,a,0),[]:rel(B,C,experiencer,0),[]:rel(D,E,subset_of,1),[1002]:pred(D,legend,n,0),[]:prop(F,drs([[]:H,[]:I,[]:J,[1012]:K,[1010]:L],[[1009]:eq(G,L),[]:rel(H,J,theme,0),[]:rel(H,K,agent,0),[1013]:pred(H,have,v,0),[1015]:pred(J,power,n,0),[1014]:pred(I,magic,a,0),[]:rel(I,J,experiencer,0),[]:eq(L,K),[1011]:pred(L,man,n,0)])),[1008]:pred(G,wizard,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% In legends and fairy stories , a wizard is a man who has magic powers . 
k3 attribute c13:fairy:0 0 [ ]
k3 concept c0:wizard:0 0 [ ]
k3 concept c10:legend:0 0 [ ]
k3 concept c14:story:0 0 [ ]
k3 referent k3:p1 0 [ ]
k3 referent k3:s1 0 [ ]
k3 referent k3:x3 0 [ ]
k3 referent k3:x4 0 [ ]
k3 relation c11:superset_of:1 0 [ ]
k3 relation c15:superset_of:1 0 [ ]
k3 relation c16:in:0 0 [ ]
k3 role c12:experiencer:-1 0 [ ]
c11:superset_of:1 ext k3:x3 0 [ ]
c12:experiencer:-1 ext k3:s1 0 [ ]
c15:superset_of:1 ext k3:x4 0 [ ]
c2:equality ext k3:p1:x6 0 [ ]
c3:experiencer:-1 ext k3:p1:s2 0 [ ]
c8:theme:1 ext k3:p1:x7 0 [ ]
c9:equality ext k3:p1:x5 0 [ ]
k3:p1 attribute c4:magic:0 0 [ ]
k3:p1 concept c1:man:0 0 [ ]
k3:p1 concept c5:power:0 0 [ ]
k3:p1 event c6:have:0 0 [ ]
k3:p1 referent k3:p1:e1 0 [ ]
k3:p1 referent k3:p1:s2 0 [ ]
k3:p1 referent k3:p1:x7 0 [ ]
k3:p1 relation c2:equality 0 [ ]
k3:p1 role c3:experiencer:-1 0 [ ]
k3:p1 role c8:theme:1 0 [ ]
k3:p1 role c7:agent:-1 0 [ ]
c7:agent:-1 ext k3:p1:e1 0 [ ]
c16:in:0 ext k3:x2 1 [ In ]
c10:legend:0 instance k3:x3 1 [ legends ]
c11:superset_of:1 int k3:x2 2 [ ]
c16:in:0 int k3:p1 1 [ ]
k3 referent k3:x2 3 [ and ]
c12:experiencer:-1 int k3:x4 1 [ ]
c13:fairy:0 arg k3:s1 1 [ fairy ]
c14:story:0 instance k3:x4 2 [ stories ]
k3 punctuation k3:x4 3 [ , ]
c15:superset_of:1 int k3:x2 4 [ ]
k3 referent k3:x1 1 [ a ]
c0:wizard:0 instance k3:x1 2 [ wizard ]
k3:p1 relation c9:equality 1 [ is ]
k3:p1 referent k3:p1:x5 1 [ a ]
c9:equality int k3:x1 3 [ ]
c1:man:0 instance k3:p1:x5 2 [ man ]
k3:p1 referent k3:p1:x6 1 [ who ]
c2:equality int k3:p1:x5 3 [ ]
c6:have:0 instance k3:p1:e1 1 [ has ]
c7:agent:-1 int k3:p1:x6 2 [ ]
c3:experiencer:-1 int k3:p1:x7 1 [ ]
c4:magic:0 arg k3:p1:s2 1 [ magic ]
c5:power:0 instance k3:p1:x7 2 [ powers ]
c8:theme:1 int k3:p1:e1 2 [ ]
k3:p1 punctuation k3:p1:x7 3 [ . ]


!.
0.1525
0.1920
In ancient times, an oracle was a priest or priestess who made statements about future events or about the truth.
ancient JJ times NNS oracle NN was VBD priest NN priestess NN who WP made VBD statements NNS future JJ events NNS truth NN 
sem(1,[1001:[tok:'In',pos:'IN',lemma:in,namex:'O'],1002:[tok:ancient,pos:'JJ',lemma:ancient,namex:'O'],1003:[tok:times,pos:'NNS',lemma:time,namex:'O'],1004:[tok: (','),pos: (','),lemma: (','),namex:'O'],1005:[tok:an,pos:'DT',lemma:an,namex:'O'],1006:[tok:oracle,pos:'NN',lemma:oracle,namex:'O'],1007:[tok:was,pos:'VBD',lemma:be,namex:'O'],1008:[tok:a,pos:'DT',lemma:a,namex:'O'],1009:[tok:priest,pos:'NN',lemma:priest,namex:'O'],1010:[tok:or,pos:'CC',lemma:or,namex:'O'],1011:[tok:priestess,pos:'NN',lemma:priestess,namex:'O'],1012:[tok:who,pos:'WP',lemma:who,namex:'O'],1013:[tok:made,pos:'VBD',lemma:make,namex:'O'],1014:[tok:statements,pos:'NNS',lemma:statement,namex:'O'],1015:[tok:about,pos:'IN',lemma:about,namex:'O'],1016:[tok:future,pos:'JJ',lemma:future,namex:'O'],1017:[tok:events,pos:'NNS',lemma:event,namex:'O'],1018:[tok:or,pos:'CC',lemma:or,namex:'O'],1019:[tok:about,pos:'IN',lemma:about,namex:'O'],1020:[tok:the,pos:'DT',lemma:the,namex:'O'],1021:[tok:truth,pos:'NN',lemma:truth,namex:'O'],1022:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[1020]:B],[[1021]:pred(B,truth,n,0)]),drs([[]:C,[]:D,[]:E,[1005]:F],[[1001]:rel(E,D,in,0),[1003]:pred(D,time,n,0),[1002]:pred(C,ancient,a,0),[]:rel(C,D,experiencer,0),[]:prop(E,drs([[1012]:G,[1008]:H],[[1007]:eq(F,H),[1018]:or(drs([[]:I,[]:J,[]:K,[]:L],[[]:rel(I,L,theme,0),[]:rel(I,G,agent,0),[1013]:pred(I,make,v,0),[1015]:rel(L,K,about,0),[1017]:pred(K,event,n,0),[1016]:pred(J,future,a,0),[]:rel(J,K,experiencer,0),[1014]:pred(L,statement,n,0)]),drs([[]:M,[]:N],[[]:rel(M,N,theme,0),[]:rel(M,G,agent,0),[1013]:pred(M,make,v,0),[1019]:rel(N,B,about,0),[1014]:pred(N,statement,n,0)])),[]:eq(H,G),[1010]:or(drs([],[[1009]:pred(H,priest,n,0)]),drs([],[[1011]:pred(H,priestess,n,0)]))])),[1006]:pred(F,oracle,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% In ancient times , an oracle was a priest or priestess who made statements about future events or about the truth . 
k4 attribute c22:ancient:0 0 [ ]
k4 concept c0:oracle:0 0 [ ]
k4 concept c23:time:0 0 [ ]
k4 referent k4:p1 0 [ ]
k4 referent k4:s1 0 [ ]
k4 referent k4:x2 0 [ ]
k4 relation c24:in:0 0 [ ]
k4 role c21:experiencer:-1 0 [ ]
k5 concept c2:priest:0 0 [ ]
k6 concept c3:priestess:0 0 [ ]
k7 attribute c8:future:0 0 [ ]
k7 concept c6:statement:0 0 [ ]
k7 concept c9:event:0 0 [ ]
k7 event c11:make:0 0 [ ]
k7 referent k7:e1 0 [ ]
k7 referent k7:s2 0 [ ]
k7 referent k7:x5 0 [ ]
k7 referent k7:x6 0 [ ]
k7 relation c10:about:0 0 [ ]
k7 role c13:theme:1 0 [ ]
k7 role c7:experiencer:-1 0 [ ]
k7 role c12:agent:-1 0 [ ]
k8 concept c14:statement:0 0 [ ]
k8 concept c15:truth:0 0 [ ]
k8 event c17:make:0 0 [ ]
k8 referent k8:e2 0 [ ]
k8 referent k8:x7 0 [ ]
k8 relation c16:about:0 0 [ ]
k8 role c19:theme:1 0 [ ]
k8 role c18:agent:-1 0 [ ]
c1:or antecedent k5 0 [ ]
c1:or consequent k6 0 [ ]
c13:theme:1 ext k7:x5 0 [ ]
c19:theme:1 ext k8:x7 0 [ ]
c20:equality ext k4:p1:x3 0 [ ]
c21:experiencer:-1 ext k4:s1 0 [ ]
c4:equality ext k4:p1:x4 0 [ ]
c5:or antecedent k7 0 [ ]
c5:or consequent k8 0 [ ]
c7:experiencer:-1 ext k7:s2 0 [ ]
k4:p1 binary c1:or 0 [ ]
k4:p1 binary c5:or 0 [ ]
k4:p1 relation c4:equality 0 [ ]
c12:agent:-1 ext k7:e1 0 [ ]
c18:agent:-1 ext k8:e2 0 [ ]
c24:in:0 ext k4:x2 1 [ In ]
c22:ancient:0 arg k4:s1 1 [ ancient ]
c21:experiencer:-1 int k4:x2 2 [ ]
c23:time:0 instance k4:x2 3 [ times ]
c24:in:0 int k4:p1 1 [ ]
k4 punctuation k4:x2 4 [ , ]
k4 referent k4:x1 1 [ an ]
c0:oracle:0 instance k4:x1 2 [ oracle ]
k4:p1 relation c20:equality 1 [ was ]
k4:p1 referent k4:p1:x3 1 [ a ]
c20:equality int k4:x1 3 [ ]
c2:priest:0 instance k4:p1:x3 2 [ priest ]
k4:p1 function k4:p1:x3 3 [ or ]
c3:priestess:0 instance k4:p1:x3 4 [ priestess ]
k4:p1 referent k4:p1:x4 1 [ who ]
c4:equality int k4:p1:x3 5 [ ]
c11:make:0 instance k7:e1 1 [ made ]
c17:make:0 instance k8:e2 1 [ ]
c12:agent:-1 int k4:p1:x4 2 [ ]
c18:agent:-1 int k4:p1:x4 3 [ ]
c14:statement:0 instance k8:x7 1 [ ]
c6:statement:0 instance k7:x5 1 [ statements ]
c13:theme:1 int k7:e1 2 [ ]
c19:theme:1 int k8:e2 2 [ ]
c10:about:0 ext k7:x6 1 [ about ]
c8:future:0 arg k7:s2 1 [ future ]
c10:about:0 int k7:x5 2 [ ]
c9:event:0 instance k7:x6 2 [ events ]
k7 surface k7:s2 2 [ or ]
c7:experiencer:-1 int k7:x6 3 [ ]
c16:about:0 ext k8:x8 1 [ about ]
k8 referent k8:x8 2 [ the ]
c15:truth:0 instance k8:x8 3 [ truth ]
c16:about:0 int k8:x7 2 [ ]
k8 punctuation k8:x8 4 [ . ]


!.
A sage is a person who is regarded as being very wise.
sage NN person NN who WP regarded VBN being VBG very RB wise JJ 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:sage,pos:'NN',lemma:sage,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:person,pos:'NN',lemma:person,namex:'O'],1006:[tok:who,pos:'WP',lemma:who,namex:'O'],1007:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1008:[tok:regarded,pos:'VBN',lemma:regard,namex:'O'],1009:[tok: (as),pos:'IN',lemma: (as),namex:'O'],1010:[tok:being,pos:'VBG',lemma:be,namex:'O'],1011:[tok:very,pos:'RB',lemma:very,namex:'O'],1012:[tok:wise,pos:'JJ',lemma:wise,namex:'O'],1013:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[]:E,[]:F,[1006]:G,[1004]:H],[[1003]:eq(C,H),[1009]:rel(F,D,as,0),[1011]:pred(D,very,r,0),[]:rel(D,E,experiencer,0),[1012]:pred(D,wise,a,0),[]:rel(F,G,theme,0),[1008]:pred(F,regard,v,0),[]:eq(H,G),[1005]:pred(H,person,n,0)])),[1002]:pred(C,sage,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A sage is a person who is regarded as being very wise . 
k3 concept c0:sage:0 0 [ ]
k3 referent k3:p1 0 [ ]
c2:equality ext k3:p1:x3 0 [ ]
c6:experiencer:1 ext k3:p1:x4 0 [ ]
c6:experiencer:1 int k3:p1:s1 0 [ ]
c9:equality ext k3:p1:x2 0 [ ]
k3:p1 attribute c5:wise:0 0 [ ]
k3:p1 attribute c7:very:0 0 [ ]
k3:p1 concept c1:person:0 0 [ ]
k3:p1 event c3:regard:0 0 [ ]
k3:p1 referent k3:p1:e1 0 [ ]
k3:p1 referent k3:p1:s1 0 [ ]
k3:p1 referent k3:p1:x4 0 [ ]
k3:p1 relation c2:equality 0 [ ]
k3:p1 relation c8:as:0 0 [ ]
k3:p1 role c6:experiencer:1 0 [ ]
k3:p1 role c4:theme:-1 0 [ ]
c4:theme:-1 ext k3:p1:e1 0 [ ]
k3 referent k3:x1 1 [ A ]
c0:sage:0 instance k3:x1 2 [ sage ]
k3:p1 relation c9:equality 1 [ is ]
k3:p1 referent k3:p1:x2 1 [ a ]
c9:equality int k3:x1 3 [ ]
c1:person:0 instance k3:p1:x2 2 [ person ]
k3:p1 referent k3:p1:x3 1 [ who ]
c2:equality int k3:p1:x2 3 [ ]
k3:p1 surface k3:p1:e1 1 [ is ]
c4:theme:-1 int k3:p1:x3 2 [ ]
c3:regard:0 instance k3:p1:e1 2 [ regarded ]
c8:as:0 ext k3:p1:s1 1 [ as ]
k3:p1 surface k3:p1:s1 2 [ being ]
c8:as:0 int k3:p1:e1 3 [ ]
c7:very:0 arg k3:p1:s1 3 [ very ]
k3:p1:s1 main k3:p1 1 [ ]
c5:wise:0 arg k3:p1:s1 4 [ wise ]
k3 punctuation k3:p1 2 [ . ]


!.
0.2825
0.0452
A bird is a creature with feathers and wings, females lay eggs, and most birds can fly.
bird NN creature NN feathers NNS wings NNS females NNS lay VBD eggs NNS most JJS birds NNS fly VB 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:bird,pos:'NN',lemma:bird,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:creature,pos:'NN',lemma:creature,namex:'O'],1006:[tok:with,pos:'IN',lemma:with,namex:'O'],1007:[tok:feathers,pos:'NNS',lemma:feather,namex:'O'],1008:[tok:and,pos:'CC',lemma:and,namex:'O'],1009:[tok:wings,pos:'NNS',lemma:wing,namex:'O'],1010:[tok: (','),pos: (','),lemma: (','),namex:'O'],1011:[tok:females,pos:'NNS',lemma:female,namex:'O'],1012:[tok:lay,pos:'VBD',lemma:lay,namex:'O'],1013:[tok:eggs,pos:'NNS',lemma:egg,namex:'O'],1014:[tok: (','),pos: (','),lemma: (','),namex:'O'],1015:[tok:and,pos:'CC',lemma:and,namex:'O'],1016:[tok:most,pos:'JJS',lemma:most,namex:'O'],1017:[tok:birds,pos:'NNS',lemma:bird,namex:'O'],1018:[tok:can,pos:'MD',lemma:can,namex:'O'],1019:[tok:fly,pos:'VB',lemma:fly,namex:'O'],1020:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[]:C,[]:D,[]:E,[]:F,[]:G,[]:H,[1001]:I],[[]:prop(B,drs([[]:J],[[]:rel(J,D,agent,0),[1019]:pred(J,fly,v,0)])),[]:rel(C,B,topic,0),[]:rel(C,D,agent,0),[1018]:pred(C,can,v,0),[]:imp(drs([[]:K],[[1017]:pred(K,bird,n,0),[]:not(drs([],[[]:eq(D,K)]))]),drs([],[[1016]:rel(D,K,most,0)])),[1017]:pred(D,bird,n,0),[]:rel(E,F,theme,0),[]:rel(E,G,agent,0),[1012]:pred(E,lay,v,0),[1013]:pred(F,egg,n,0),[1011]:pred(G,female,n,0),[]:prop(H,drs([[]:L,[]:M,[1008]:N,[1004]:O],[[1003]:eq(I,O),[1006]:rel(O,N,with,0),[]:rel(L,N,subset_of,1),[1009]:pred(L,wing,n,0),[]:rel(M,N,subset_of,1),[1007]:pred(M,feather,n,0),[1005]:pred(O,creature,n,0)])),[1002]:pred(I,bird,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A bird is a creature with feathers and wings , females lay eggs , and most birds can fly . 
k5 attribute c14:most:0 0 [ ]
k5 concept c0:bird:0 0 [ ]
k5 concept c15:bird:0 0 [ ]
k5 concept c8:female:0 0 [ ]
k5 concept c9:egg:0 0 [ ]
k5 event c10:lay:0 0 [ ]
k5 event c16:can:0 0 [ ]
k5 referent k5:e1 0 [ ]
k5 referent k5:e2 0 [ ]
k5 referent k5:p1 0 [ ]
k5 referent k5:p2 0 [ ]
k5 referent k5:s1 0 [ ]
k5 referent k5:x2 0 [ ]
k5 referent k5:x3 0 [ ]
k5 referent k5:x4 0 [ ]
k5 role c11:agent:1 0 [ ]
k5 role c12:theme:1 0 [ ]
k5 role c13:experiencer:-1 0 [ ]
k5 role c17:agent:1 0 [ ]
k5 role c18:topic:1 0 [ ]
c11:agent:1 ext k5:x2 0 [ ]
c12:theme:1 ext k5:x3 0 [ ]
c13:experiencer:-1 ext k5:s1 0 [ ]
c17:agent:1 ext k5:x4 0 [ ]
c18:topic:1 ext k5:p2 0 [ ]
c20:agent:1 ext k5:x4 0 [ ]
c3:superset_of:1 ext k5:p1:x7 0 [ ]
c5:superset_of:1 ext k5:p1:x8 0 [ ]
c7:equality ext k5:p1:x5 0 [ ]
k5:p1 concept c1:creature:0 0 [ ]
k5:p1 concept c2:feather:0 0 [ ]
k5:p1 concept c4:wing:0 0 [ ]
k5:p1 referent k5:p1:x7 0 [ ]
k5:p1 referent k5:p1:x8 0 [ ]
k5:p1 relation c3:superset_of:1 0 [ ]
k5:p1 relation c5:superset_of:1 0 [ ]
k5:p1 relation c6:with:0 0 [ ]
k5:p2 event c19:fly:0 0 [ ]
k5:p2 referent k5:p2:e3 0 [ ]
k5:p2 role c20:agent:1 0 [ ]
k5 referent k5:x1 1 [ A ]
c0:bird:0 instance k5:x1 2 [ bird ]
k5:p1 relation c7:equality 1 [ is ]
k5:p1 referent k5:p1:x5 1 [ a ]
c7:equality int k5:x1 3 [ ]
c1:creature:0 instance k5:p1:x5 2 [ creature ]
c6:with:0 ext k5:p1:x6 1 [ with ]
c2:feather:0 instance k5:p1:x7 1 [ feathers ]
c3:superset_of:1 int k5:p1:x6 2 [ ]
c6:with:0 int k5:p1:x5 3 [ ]
k5:p1 referent k5:p1:x6 3 [ and ]
c4:wing:0 instance k5:p1:x8 1 [ wings ]
k5:p1 punctuation k5:p1:x8 2 [ , ]
c5:superset_of:1 int k5:p1:x6 4 [ ]
c11:agent:1 int k5:e1 1 [ ]
c8:female:0 instance k5:x2 1 [ females ]
k5:e1 main k5 1 [ ]
c10:lay:0 instance k5:e1 2 [ lay ]
c9:egg:0 instance k5:x3 1 [ eggs ]
k5 punctuation k5:x3 2 [ , ]
c12:theme:1 int k5:e1 3 [ ]
k5 surface k5:s1 1 [ and ]
c13:experiencer:-1 int k5:x4 1 [ ]
c14:most:0 arg k5:s1 2 [ most ]
c17:agent:1 int k5:e2 1 [ ]
c20:agent:1 int k5:p2:e3 1 [ ]
c15:bird:0 instance k5:x4 2 [ birds ]
c16:can:0 instance k5:e2 2 [ can ]
k5:e2 main k5 2 [ ]
k5:p2:e3 main k5:p2 1 [ ]
c19:fly:0 instance k5:p2:e3 2 [ fly ]
k5 punctuation k5:p2 2 [ . ]
c18:topic:1 int k5:e2 3 [ ]


!.
A crane is a large machine that moves heavy things by lifting them in the air.
crane NN large JJ machine NN that WDT heavy JJ things NNS lifting VBG them PRP air NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:crane,pos:'NN',lemma:crane,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:large,pos:'JJ',lemma:large,namex:'O'],1006:[tok:machine,pos:'NN',lemma:machine,namex:'O'],1007:[tok:that,pos:'WDT',lemma:that,namex:'O'],1008:[tok:moves,pos:'VBZ',lemma:move,namex:'O'],1009:[tok:heavy,pos:'JJ',lemma:heavy,namex:'O'],1010:[tok:things,pos:'NNS',lemma:thing,namex:'O'],1011:[tok:by,pos:'IN',lemma:by,namex:'O'],1012:[tok:lifting,pos:'VBG',lemma:lift,namex:'O'],1013:[tok:them,pos:'PRP',lemma:they,namex:'O'],1014:[tok:in,pos:'IN',lemma:in,namex:'O'],1015:[tok:the,pos:'DT',lemma:the,namex:'O'],1016:[tok:air,pos:'NN',lemma:air,namex:'O'],1017:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[1015]:B,[]:C],[[1016]:pred(B,air,n,0),[1013]:pred(C,thing,n,12)]),drs([[]:D,[1001]:E],[[]:prop(D,drs([[]:F,[]:G,[]:H,[]:I,[1007]:J,[]:K,[1004]:L],[[1003]:eq(E,L),[1011]:rel(G,F,by,0),[1014]:rel(F,B,in,0),[]:rel(F,C,theme,0),[]:rel(F,J,agent,0),[1012]:pred(F,lift,v,0),[]:rel(G,I,theme,0),[]:rel(G,J,agent,0),[1008]:pred(G,move,v,0),[1010]:pred(I,thing,n,0),[1009]:pred(H,heavy,a,0),[]:rel(H,I,experiencer,0),[]:eq(L,J),[1006]:pred(L,machine,n,0),[1005]:pred(K,large,a,0),[]:rel(K,L,experiencer,0)])),[1002]:pred(E,crane,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A crane is a large machine that moves heavy things by lifting them in the air . 
k4 concept c0:crane:0 0 [ ]
k4 referent k4:p1 0 [ ]
c1:experiencer:-1 ext k4:p1:s1 0 [ ]
c10:theme:1 ext k4:p1:x4 0 [ ]
c14:theme:1 ext k4:p1:x5 0 [ ]
c18:equality ext k4:p1:x2 0 [ ]
c4:equality ext k4:p1:x3 0 [ ]
c5:experiencer:-1 ext k4:p1:s2 0 [ ]
k4:p1 attribute c2:large:0 0 [ ]
k4:p1 attribute c6:heavy:0 0 [ ]
k4:p1 concept c11:thing:12 0 [ ]
k4:p1 concept c15:air:0 0 [ ]
k4:p1 concept c3:machine:0 0 [ ]
k4:p1 concept c7:thing:0 0 [ ]
k4:p1 event c12:lift:0 0 [ ]
k4:p1 event c8:move:0 0 [ ]
k4:p1 referent k4:p1:e1 0 [ ]
k4:p1 referent k4:p1:e2 0 [ ]
k4:p1 referent k4:p1:s1 0 [ ]
k4:p1 referent k4:p1:s2 0 [ ]
k4:p1 referent k4:p1:x4 0 [ ]
k4:p1 referent k4:p1:x5 0 [ ]
k4:p1 relation c16:in:0 0 [ ]
k4:p1 relation c17:by:0 0 [ ]
k4:p1 relation c4:equality 0 [ ]
k4:p1 role c1:experiencer:-1 0 [ ]
k4:p1 role c10:theme:1 0 [ ]
k4:p1 role c14:theme:1 0 [ ]
k4:p1 role c5:experiencer:-1 0 [ ]
k4:p1 role c13:agent:-1 0 [ ]
k4:p1 role c9:agent:-1 0 [ ]
c13:agent:-1 ext k4:p1:e2 0 [ ]
c9:agent:-1 ext k4:p1:e1 0 [ ]
k4 referent k4:x1 1 [ A ]
c0:crane:0 instance k4:x1 2 [ crane ]
k4:p1 relation c18:equality 1 [ is ]
k4:p1 referent k4:p1:x2 1 [ a ]
c18:equality int k4:x1 3 [ ]
c2:large:0 arg k4:p1:s1 1 [ large ]
c1:experiencer:-1 int k4:p1:x2 2 [ ]
c3:machine:0 instance k4:p1:x2 3 [ machine ]
k4:p1 referent k4:p1:x3 1 [ that ]
c4:equality int k4:p1:x2 4 [ ]
c8:move:0 instance k4:p1:e1 1 [ moves ]
c9:agent:-1 int k4:p1:x3 2 [ ]
c5:experiencer:-1 int k4:p1:x4 1 [ ]
c6:heavy:0 arg k4:p1:s2 1 [ heavy ]
c10:theme:1 int k4:p1:e1 2 [ ]
c7:thing:0 instance k4:p1:x4 2 [ things ]
c17:by:0 ext k4:p1:e2 1 [ by ]
c12:lift:0 instance k4:p1:e2 2 [ lifting ]
c17:by:0 int k4:p1:e1 3 [ ]
c13:agent:-1 int k4:p1:x3 3 [ ]
c11:thing:12 instance k4:p1:x5 1 [ them ]
c14:theme:1 int k4:p1:e2 3 [ ]
c16:in:0 ext k4:p1:x6 1 [ in ]
k4:p1 referent k4:p1:x6 2 [ the ]
c15:air:0 instance k4:p1:x6 3 [ air ]
c16:in:0 int k4:p1:e2 4 [ ]
k4:p1 punctuation k4:p1:x6 4 [ . ]


!.
0.0350
0.1660
A bird is a creature with feathers and wings, females lay eggs, and most birds can fly.
bird NN creature NN feathers NNS wings NNS females NNS lay VBD eggs NNS most JJS birds NNS fly VB 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:bird,pos:'NN',lemma:bird,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:creature,pos:'NN',lemma:creature,namex:'O'],1006:[tok:with,pos:'IN',lemma:with,namex:'O'],1007:[tok:feathers,pos:'NNS',lemma:feather,namex:'O'],1008:[tok:and,pos:'CC',lemma:and,namex:'O'],1009:[tok:wings,pos:'NNS',lemma:wing,namex:'O'],1010:[tok: (','),pos: (','),lemma: (','),namex:'O'],1011:[tok:females,pos:'NNS',lemma:female,namex:'O'],1012:[tok:lay,pos:'VBD',lemma:lay,namex:'O'],1013:[tok:eggs,pos:'NNS',lemma:egg,namex:'O'],1014:[tok: (','),pos: (','),lemma: (','),namex:'O'],1015:[tok:and,pos:'CC',lemma:and,namex:'O'],1016:[tok:most,pos:'JJS',lemma:most,namex:'O'],1017:[tok:birds,pos:'NNS',lemma:bird,namex:'O'],1018:[tok:can,pos:'MD',lemma:can,namex:'O'],1019:[tok:fly,pos:'VB',lemma:fly,namex:'O'],1020:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[]:C,[]:D,[]:E,[]:F,[]:G,[]:H,[1001]:I],[[]:prop(B,drs([[]:J],[[]:rel(J,D,agent,0),[1019]:pred(J,fly,v,0)])),[]:rel(C,B,topic,0),[]:rel(C,D,agent,0),[1018]:pred(C,can,v,0),[]:imp(drs([[]:K],[[1017]:pred(K,bird,n,0),[]:not(drs([],[[]:eq(D,K)]))]),drs([],[[1016]:rel(D,K,most,0)])),[1017]:pred(D,bird,n,0),[]:rel(E,F,theme,0),[]:rel(E,G,agent,0),[1012]:pred(E,lay,v,0),[1013]:pred(F,egg,n,0),[1011]:pred(G,female,n,0),[]:prop(H,drs([[]:L,[]:M,[1008]:N,[1004]:O],[[1003]:eq(I,O),[1006]:rel(O,N,with,0),[]:rel(L,N,subset_of,1),[1009]:pred(L,wing,n,0),[]:rel(M,N,subset_of,1),[1007]:pred(M,feather,n,0),[1005]:pred(O,creature,n,0)])),[1002]:pred(I,bird,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A bird is a creature with feathers and wings , females lay eggs , and most birds can fly . 
k5 attribute c14:most:0 0 [ ]
k5 concept c0:bird:0 0 [ ]
k5 concept c15:bird:0 0 [ ]
k5 concept c8:female:0 0 [ ]
k5 concept c9:egg:0 0 [ ]
k5 event c10:lay:0 0 [ ]
k5 event c16:can:0 0 [ ]
k5 referent k5:e1 0 [ ]
k5 referent k5:e2 0 [ ]
k5 referent k5:p1 0 [ ]
k5 referent k5:p2 0 [ ]
k5 referent k5:s1 0 [ ]
k5 referent k5:x2 0 [ ]
k5 referent k5:x3 0 [ ]
k5 referent k5:x4 0 [ ]
k5 role c11:agent:1 0 [ ]
k5 role c12:theme:1 0 [ ]
k5 role c13:experiencer:-1 0 [ ]
k5 role c17:agent:1 0 [ ]
k5 role c18:topic:1 0 [ ]
c11:agent:1 ext k5:x2 0 [ ]
c12:theme:1 ext k5:x3 0 [ ]
c13:experiencer:-1 ext k5:s1 0 [ ]
c17:agent:1 ext k5:x4 0 [ ]
c18:topic:1 ext k5:p2 0 [ ]
c20:agent:1 ext k5:x4 0 [ ]
c3:superset_of:1 ext k5:p1:x7 0 [ ]
c5:superset_of:1 ext k5:p1:x8 0 [ ]
c7:equality ext k5:p1:x5 0 [ ]
k5:p1 concept c1:creature:0 0 [ ]
k5:p1 concept c2:feather:0 0 [ ]
k5:p1 concept c4:wing:0 0 [ ]
k5:p1 referent k5:p1:x7 0 [ ]
k5:p1 referent k5:p1:x8 0 [ ]
k5:p1 relation c3:superset_of:1 0 [ ]
k5:p1 relation c5:superset_of:1 0 [ ]
k5:p1 relation c6:with:0 0 [ ]
k5:p2 event c19:fly:0 0 [ ]
k5:p2 referent k5:p2:e3 0 [ ]
k5:p2 role c20:agent:1 0 [ ]
k5 referent k5:x1 1 [ A ]
c0:bird:0 instance k5:x1 2 [ bird ]
k5:p1 relation c7:equality 1 [ is ]
k5:p1 referent k5:p1:x5 1 [ a ]
c7:equality int k5:x1 3 [ ]
c1:creature:0 instance k5:p1:x5 2 [ creature ]
c6:with:0 ext k5:p1:x6 1 [ with ]
c2:feather:0 instance k5:p1:x7 1 [ feathers ]
c3:superset_of:1 int k5:p1:x6 2 [ ]
c6:with:0 int k5:p1:x5 3 [ ]
k5:p1 referent k5:p1:x6 3 [ and ]
c4:wing:0 instance k5:p1:x8 1 [ wings ]
k5:p1 punctuation k5:p1:x8 2 [ , ]
c5:superset_of:1 int k5:p1:x6 4 [ ]
c11:agent:1 int k5:e1 1 [ ]
c8:female:0 instance k5:x2 1 [ females ]
k5:e1 main k5 1 [ ]
c10:lay:0 instance k5:e1 2 [ lay ]
c9:egg:0 instance k5:x3 1 [ eggs ]
k5 punctuation k5:x3 2 [ , ]
c12:theme:1 int k5:e1 3 [ ]
k5 surface k5:s1 1 [ and ]
c13:experiencer:-1 int k5:x4 1 [ ]
c14:most:0 arg k5:s1 2 [ most ]
c17:agent:1 int k5:e2 1 [ ]
c20:agent:1 int k5:p2:e3 1 [ ]
c15:bird:0 instance k5:x4 2 [ birds ]
c16:can:0 instance k5:e2 2 [ can ]
k5:e2 main k5 2 [ ]
k5:p2:e3 main k5:p2 1 [ ]
c19:fly:0 instance k5:p2:e3 2 [ fly ]
k5 punctuation k5:p2 2 [ . ]
c18:topic:1 int k5:e2 3 [ ]


!.
A cock is an adult male chicken.
cock NN adult NN male NN chicken NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:cock,pos:'NN',lemma:cock,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:an,pos:'DT',lemma:an,namex:'O'],1005:[tok:adult,pos:'NN',lemma:adult,namex:'O'],1006:[tok:male,pos:'NN',lemma:male,namex:'O'],1007:[tok:chicken,pos:'NN',lemma:chicken,namex:'O'],1008:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[]:E,[1004]:F],[[1003]:eq(C,F),[1007]:pred(F,chicken,n,0),[]:rel(F,D,of,0),[1006]:pred(D,male,n,0),[]:rel(F,E,of,0),[1005]:pred(E,adult,n,0)])),[1002]:pred(C,cock,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A cock is an adult male chicken . 
k2 concept c0:cock:0 0 [ ]
k2 referent k2:p1 0 [ ]
c2:of:0 ext k2:p1:x3 0 [ ]
c4:of:0 ext k2:p1:x4 0 [ ]
c6:equality ext k2:p1:x2 0 [ ]
k2:p1 concept c1:adult:0 0 [ ]
k2:p1 concept c3:male:0 0 [ ]
k2:p1 concept c5:chicken:0 0 [ ]
k2:p1 referent k2:p1:x3 0 [ ]
k2:p1 referent k2:p1:x4 0 [ ]
k2:p1 relation c2:of:0 0 [ ]
k2:p1 relation c4:of:0 0 [ ]
k2 referent k2:x1 1 [ A ]
c0:cock:0 instance k2:x1 2 [ cock ]
k2:p1 relation c6:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ an ]
c1:adult:0 instance k2:p1:x3 1 [ adult ]
c2:of:0 int k2:p1:x2 2 [ ]
c3:male:0 instance k2:p1:x4 1 [ male ]
c4:of:0 int k2:p1:x2 3 [ ]
c5:chicken:0 instance k2:p1:x2 4 [ chicken ]
c6:equality int k2:x1 3 [ ]
k2:p1 punctuation k2:p1:x2 5 [ . ]


!.
0.1625
0.1704
Food is what people and animals eat.
'Food' NN what WP people NNS animals NNS eat VBP 
sem(1,[1001:[tok:'Food',pos:'NN',lemma:food,namex:'O'],1002:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1003:[tok:what,pos:'WP',lemma:what,namex:'O'],1004:[tok:people,pos:'NNS',lemma:people,namex:'O'],1005:[tok:and,pos:'CC',lemma:and,namex:'O'],1006:[tok:animals,pos:'NNS',lemma:animal,namex:'O'],1007:[tok:eat,pos:'VBP',lemma:eat,namex:'O'],1008:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[]:C],[[]:prop(B,drs([],[[]:duplex(whq,drs([[]:D],[[1003]:pred(D,thing,n,12)]),D,drs([[]:E,[]:F,[]:G,[1005]:H],[[1002]:eq(C,D),[]:rel(E,D,theme,0),[]:rel(E,H,agent,0),[1007]:pred(E,eat,v,0),[]:rel(F,H,subset_of,1),[1006]:pred(F,animal,n,0),[]:rel(G,H,subset_of,1),[1004]:pred(G,people,n,0)]))])),[1001]:pred(C,food,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% Food is what people and animals eat . 
k3 concept c0:food:0 0 [ ]
k3 referent k3:p1 0 [ ]
k3 referent k3:x1 0 [ ]
k4 concept c2:thing:12 0 [ ]
k4 referent k4:x2 0 [ ]
k5 concept c3:people:0 0 [ ]
k5 concept c5:animal:0 0 [ ]
k5 event c7:eat:0 0 [ ]
k5 referent k5:e1 0 [ ]
k5 referent k5:x4 0 [ ]
k5 referent k5:x5 0 [ ]
k5 relation c4:superset_of:1 0 [ ]
k5 relation c6:superset_of:1 0 [ ]
k5 role c8:agent:1 0 [ ]
k5 role c9:theme:-1 0 [ ]
c1:whq antecedent k4 0 [ ]
c1:whq consequent k5 0 [ ]
c10:equality ext k4:x2 0 [ ]
c4:superset_of:1 ext k5:x4 0 [ ]
c6:superset_of:1 ext k5:x5 0 [ ]
c8:agent:1 ext k5:x3 0 [ ]
k3:p1 duplex c1:whq 0 [ ]
c9:theme:-1 ext k5:e1 0 [ ]
c0:food:0 instance k3:x1 1 [ Food ]
k5 relation c10:equality 1 [ is ]
c2:thing:12 instance k4:x2 1 [ what ]
c10:equality int k3:x1 2 [ ]
c3:people:0 instance k5:x4 1 [ people ]
c4:superset_of:1 int k5:x3 1 [ ]
c8:agent:1 int k5:e1 1 [ ]
k5 referent k5:x3 2 [ and ]
c5:animal:0 instance k5:x5 1 [ animals ]
c6:superset_of:1 int k5:x3 3 [ ]
c7:eat:0 instance k5:e1 2 [ eat ]
c9:theme:-1 int k4:x2 2 [ ]
k5 punctuation k5:e1 3 [ . ]


!.
Fruit or a fruit is something which grows on a tree or bush and which contains seeds or a stone covered by a substance that you can eat.
'Fruit' NNP fruit NN which WDT tree NN bush NN which WDT seeds NNS stone NN covered VBN substance NN you PRP eat VB 
sem(1,[1001:[tok:'Fruit',pos:'NNP',lemma:'Fruit',namex:'O'],1002:[tok:or,pos:'CC',lemma:or,namex:'O'],1003:[tok:a,pos:'DT',lemma:a,namex:'O'],1004:[tok:fruit,pos:'NN',lemma:fruit,namex:'O'],1005:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1006:[tok:something,pos:'DT',lemma:something,namex:'O'],1007:[tok:which,pos:'WDT',lemma:which,namex:'O'],1008:[tok:grows,pos:'VBZ',lemma:grow,namex:'O'],1009:[tok:on,pos:'IN',lemma:on,namex:'O'],1010:[tok:a,pos:'DT',lemma:a,namex:'O'],1011:[tok:tree,pos:'NN',lemma:tree,namex:'O'],1012:[tok:or,pos:'CC',lemma:or,namex:'O'],1013:[tok:bush,pos:'NN',lemma:bush,namex:'O'],1014:[tok:and,pos:'CC',lemma:and,namex:'O'],1015:[tok:which,pos:'WDT',lemma:which,namex:'O'],1016:[tok:contains,pos:'VBZ',lemma:contain,namex:'O'],1017:[tok:seeds,pos:'NNS',lemma:seed,namex:'O'],1018:[tok:or,pos:'CC',lemma:or,namex:'O'],1019:[tok:a,pos:'DT',lemma:a,namex:'O'],1020:[tok:stone,pos:'NN',lemma:stone,namex:'O'],1021:[tok:covered,pos:'VBN',lemma:cover,namex:'O'],1022:[tok:by,pos:'IN',lemma:by,namex:'O'],1023:[tok:a,pos:'DT',lemma:a,namex:'O'],1024:[tok:substance,pos:'NN',lemma:substance,namex:'O'],1025:[tok:that,pos:'IN',lemma:that,namex:'O'],1026:[tok:you,pos:'PRP',lemma:you,namex:'O'],1027:[tok:can,pos:'MD',lemma:can,namex:'O'],1028:[tok:eat,pos:'VB',lemma:eat,namex:'O'],1029:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[]:C,[]:D],[[1026]:pred(B,person,n,1),[1026]:pred(C,person,n,1),[1001]:named(D,fruit,nam,nam)]),drs([],[[1002]:or(drs([[]:E],[[]:prop(E,drs([[1015]:F,[]:G,[1010]:H,[]:I,[1007]:J,[]:K],[[1005]:eq(D,G),[1018]:or(drs([[]:L,[]:M],[[]:rel(L,M,theme,0),[]:rel(L,F,agent,0),[1016]:pred(L,contain,v,0),[1017]:pred(M,seed,n,0)]),drs([[]:N,[]:O,[]:P,[1023]:Q,[]:R,[]:S,[1019]:T],[[]:rel(N,T,theme,0),[]:rel(N,F,agent,0),[1016]:pred(N,contain,v,0),[1022]:rel(R,Q,agent,0),[]:prop(O,drs([[]:U,[1025]:V],[[]:rel(U,V,theme,0),[]:rel(U,C,agent,0),[1028]:pred(U,eat,v,0),[]:eq(Q,V)])),[]:rel(P,O,topic,0),[]:rel(P,C,agent,0),[1027]:pred(P,can,v,0),[1024]:pred(Q,substance,n,0),[]:rel(R,S,theme,0),[1021]:pred(R,cover,v,0),[]:eq(T,S),[1020]:pred(T,stone,n,0)])),[]:eq(G,F),[1006]:pred(G,thing,n,12),[1005]:eq(D,K),[1009]:rel(I,H,on,0),[1012]:or(drs([],[[1011]:pred(H,tree,n,0)]),drs([],[[1013]:pred(H,bush,n,0)])),[]:rel(I,J,agent,0),[1008]:pred(I,grow,v,0),[]:eq(K,J),[1006]:pred(K,thing,n,12)]))]),drs([[]:W,[1003]:X],[[]:prop(W,drs([[1015]:Y,[]:Z,[1010]:A1,[]:B1,[1007]:C1,[]:D1],[[1005]:eq(X,Z),[1018]:or(drs([[]:E1,[]:F1],[[]:rel(E1,F1,theme,0),[]:rel(E1,Y,agent,0),[1016]:pred(E1,contain,v,0),[1017]:pred(F1,seed,n,0)]),drs([[]:G1,[]:H1,[]:I1,[1023]:J1,[]:K1,[]:L1,[1019]:M1],[[]:rel(G1,M1,theme,0),[]:rel(G1,Y,agent,0),[1016]:pred(G1,contain,v,0),[1022]:rel(K1,J1,agent,0),[]:prop(H1,drs([[]:N1,[1025]:O1],[[]:rel(N1,O1,theme,0),[]:rel(N1,B,agent,0),[1028]:pred(N1,eat,v,0),[]:eq(J1,O1)])),[]:rel(I1,H1,topic,0),[]:rel(I1,B,agent,0),[1027]:pred(I1,can,v,0),[1024]:pred(J1,substance,n,0),[]:rel(K1,L1,theme,0),[1021]:pred(K1,cover,v,0),[]:eq(M1,L1),[1020]:pred(M1,stone,n,0)])),[]:eq(Z,Y),[1006]:pred(Z,thing,n,12),[1005]:eq(X,D1),[1009]:rel(B1,A1,on,0),[1012]:or(drs([],[[1011]:pred(A1,tree,n,0)]),drs([],[[1013]:pred(A1,bush,n,0)])),[]:rel(B1,C1,agent,0),[1008]:pred(B1,grow,v,0),[]:eq(D1,C1),[1006]:pred(D1,thing,n,12)])),[1004]:pred(X,fruit,n,0)]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% Fruit or a fruit is something which grows on a tree or bush and which contains seeds or a stone covered by a substance that you can eat . 
k14 binary c0:or 0 [ ]
k15 named c1:fruit:nam 0 [ ]
k15 referent k15:p1 0 [ ]
k15 referent k15:x1 0 [ ]
k16 concept c7:tree:0 0 [ ]
k17 concept c8:bush:0 0 [ ]
k18 concept c14:seed:0 0 [ ]
k18 event c15:contain:0 0 [ ]
k18 referent k18:e2 0 [ ]
k18 referent k18:x7 0 [ ]
k18 role c17:theme:1 0 [ ]
k18 role c16:agent:-1 0 [ ]
k19 concept c18:stone:0 0 [ ]
k19 concept c22:substance:0 0 [ ]
k19 concept c23:person:1 0 [ ]
k19 event c20:cover:0 0 [ ]
k19 event c24:can:0 0 [ ]
k19 event c32:contain:0 0 [ ]
k19 referent k19:e3 0 [ ]
k19 referent k19:e4 0 [ ]
k19 referent k19:e5 0 [ ]
k19 referent k19:p2 0 [ ]
k19 referent k19:x11 0 [ ]
k19 referent k19:x9 0 [ ]
k19 relation c19:equality 0 [ ]
k19 role c25:agent:1 0 [ ]
k19 role c26:topic:1 0 [ ]
k19 role c31:agent:1 0 [ ]
k19 role c34:theme:1 0 [ ]
k19 role c21:theme:-1 0 [ ]
k19 role c33:agent:-1 0 [ ]
k20 concept c36:fruit:0 0 [ ]
k20 referent k20:p3 0 [ ]
k21 concept c42:tree:0 0 [ ]
k22 concept c43:bush:0 0 [ ]
k23 concept c49:seed:0 0 [ ]
k23 event c50:contain:0 0 [ ]
k23 referent k23:e8 0 [ ]
k23 referent k23:x19 0 [ ]
k23 role c52:theme:1 0 [ ]
k23 role c51:agent:-1 0 [ ]
k24 concept c53:stone:0 0 [ ]
k24 concept c57:substance:0 0 [ ]
k24 concept c58:person:1 0 [ ]
k24 event c55:cover:0 0 [ ]
k24 event c59:can:0 0 [ ]
k24 event c67:contain:0 0 [ ]
k24 referent k24:e10 0 [ ]
k24 referent k24:e11 0 [ ]
k24 referent k24:e9 0 [ ]
k24 referent k24:p4 0 [ ]
k24 referent k24:x21 0 [ ]
k24 referent k24:x23 0 [ ]
k24 relation c54:equality 0 [ ]
k24 role c60:agent:1 0 [ ]
k24 role c61:topic:1 0 [ ]
k24 role c66:agent:1 0 [ ]
k24 role c69:theme:1 0 [ ]
k24 role c56:theme:-1 0 [ ]
k24 role c68:agent:-1 0 [ ]
c0:or antecedent k15 0 [ ]
c0:or consequent k20 0 [ ]
c10:equality ext k15:p1:x2 0 [ ]
c12:equality ext k15:p1:x6 0 [ ]
c13:or antecedent k18 0 [ ]
c13:or consequent k19 0 [ ]
c17:theme:1 ext k18:x7 0 [ ]
c19:equality ext k19:x9 0 [ ]
c25:agent:1 ext k19:x11 0 [ ]
c26:topic:1 ext k19:p2 0 [ ]
c27:equality ext k19:p2:x12 0 [ ]
c29:agent:1 ext k19:x11 0 [ ]
c3:equality ext k15:p1:x3 0 [ ]
c34:theme:1 ext k19:x8 0 [ ]
c35:equality ext k15:p1:x5 0 [ ]
c38:equality ext k20:p3:x15 0 [ ]
c41:or antecedent k21 0 [ ]
c41:or consequent k22 0 [ ]
c45:equality ext k20:p3:x14 0 [ ]
c47:equality ext k20:p3:x18 0 [ ]
c48:or antecedent k23 0 [ ]
c48:or consequent k24 0 [ ]
c52:theme:1 ext k23:x19 0 [ ]
c54:equality ext k24:x21 0 [ ]
c6:or antecedent k16 0 [ ]
c6:or consequent k17 0 [ ]
c60:agent:1 ext k24:x23 0 [ ]
c61:topic:1 ext k24:p4 0 [ ]
c62:equality ext k24:p4:x24 0 [ ]
c64:agent:1 ext k24:x23 0 [ ]
c69:theme:1 ext k24:x20 0 [ ]
c70:equality ext k20:p3:x17 0 [ ]
k15:p1 binary c13:or 0 [ ]
k15:p1 binary c6:or 0 [ ]
k15:p1 concept c11:thing:12 0 [ ]
k15:p1 concept c2:thing:12 0 [ ]
k15:p1 event c4:grow:0 0 [ ]
k15:p1 referent k15:p1:e1 0 [ ]
k15:p1 referent k15:p1:x2 0 [ ]
k15:p1 referent k15:p1:x5 0 [ ]
k15:p1 relation c12:equality 0 [ ]
k15:p1 relation c3:equality 0 [ ]
k15:p1 relation c9:on:0 0 [ ]
k15:p1 role c5:agent:-1 0 [ ]
k19:p2 event c28:eat:0 0 [ ]
k19:p2 referent k19:p2:e6 0 [ ]
k19:p2 relation c27:equality 0 [ ]
k19:p2 role c29:agent:1 0 [ ]
k19:p2 role c30:theme:-1 0 [ ]
k20:p3 binary c41:or 0 [ ]
k20:p3 binary c48:or 0 [ ]
k20:p3 concept c37:thing:12 0 [ ]
k20:p3 concept c46:thing:12 0 [ ]
k20:p3 event c39:grow:0 0 [ ]
k20:p3 referent k20:p3:e7 0 [ ]
k20:p3 referent k20:p3:x14 0 [ ]
k20:p3 referent k20:p3:x17 0 [ ]
k20:p3 relation c38:equality 0 [ ]
k20:p3 relation c44:on:0 0 [ ]
k20:p3 relation c47:equality 0 [ ]
k20:p3 role c40:agent:-1 0 [ ]
k24:p4 event c63:eat:0 0 [ ]
k24:p4 referent k24:p4:e12 0 [ ]
k24:p4 relation c62:equality 0 [ ]
k24:p4 role c64:agent:1 0 [ ]
k24:p4 role c65:theme:-1 0 [ ]
c16:agent:-1 ext k18:e2 0 [ ]
c21:theme:-1 ext k19:e3 0 [ ]
c30:theme:-1 ext k19:p2:e6 0 [ ]
c33:agent:-1 ext k19:e5 0 [ ]
c40:agent:-1 ext k20:p3:e7 0 [ ]
c5:agent:-1 ext k15:p1:e1 0 [ ]
c51:agent:-1 ext k23:e8 0 [ ]
c56:theme:-1 ext k24:e9 0 [ ]
c65:theme:-1 ext k24:p4:e12 0 [ ]
c68:agent:-1 ext k24:e11 0 [ ]
c1:fruit:nam instance k15:x1 1 [ Fruit ]
k20:p3 surface k20:p3:e7 1 [ or ]
c40:agent:-1 int k20:p3:x15 1 [ ]
k20 referent k20:x13 1 [ a ]
c36:fruit:0 instance k20:x13 2 [ fruit ]
k15:p1 relation c10:equality 1 [ is ]
k15:p1 relation c35:equality 1 [ ]
k20:p3 relation c45:equality 1 [ ]
k20:p3 relation c70:equality 1 [ ]
c11:thing:12 instance k15:p1:x5 1 [ ]
c2:thing:12 instance k15:p1:x2 1 [ something ]
c37:thing:12 instance k20:p3:x14 1 [ ]
c46:thing:12 instance k20:p3:x17 1 [ ]
c10:equality int k15:x1 2 [ ]
c35:equality int k15:x1 3 [ ]
c45:equality int k20:x13 3 [ ]
c70:equality int k20:x13 4 [ ]
k15:p1 referent k15:p1:x3 1 [ which ]
c3:equality int k15:p1:x2 2 [ ]
c38:equality int k20:p3:x14 2 [ ]
k20:p3 referent k20:p3:x15 2 [ ]
c4:grow:0 instance k15:p1:e1 1 [ grows ]
c39:grow:0 instance k20:p3:e7 2 [ ]
c5:agent:-1 int k15:p1:x3 2 [ ]
c44:on:0 ext k20:p3:x16 1 [ ]
c9:on:0 ext k15:p1:x4 1 [ on ]
c9:on:0 int k15:p1:e1 2 [ ]
k15:p1 referent k15:p1:x4 2 [ a ]
k20:p3 referent k20:p3:x16 2 [ ]
c44:on:0 int k20:p3:e7 3 [ ]
c42:tree:0 instance k20:p3:x16 3 [ ]
c7:tree:0 instance k15:p1:x4 3 [ tree ]
k15:p1 function k15:p1:x4 4 [ or ]
k20:p3 function k20:p3:x16 4 [ ]
c43:bush:0 instance k20:p3:x16 5 [ ]
c8:bush:0 instance k15:p1:x4 5 [ bush ]
k24 surface k24:e11 1 [ and ]
c68:agent:-1 int k20:p3:x18 1 [ ]
k15:p1 referent k15:p1:x6 1 [ which ]
c12:equality int k15:p1:x5 2 [ ]
c47:equality int k20:p3:x17 2 [ ]
k20:p3 referent k20:p3:x18 2 [ ]
c15:contain:0 instance k18:e2 1 [ contains ]
c32:contain:0 instance k19:e5 1 [ ]
c50:contain:0 instance k23:e8 1 [ ]
c67:contain:0 instance k24:e11 2 [ ]
c16:agent:-1 int k15:p1:x6 2 [ ]
c33:agent:-1 int k15:p1:x6 3 [ ]
c51:agent:-1 int k20:p3:x18 3 [ ]
c14:seed:0 instance k18:x7 1 [ seeds ]
c49:seed:0 instance k23:x19 1 [ ]
c17:theme:1 int k18:e2 2 [ ]
c52:theme:1 int k23:e8 2 [ ]
k24 surface k24:e11 3 [ or ]
k19 referent k19:x8 1 [ a ]
k24 referent k24:x20 1 [ ]
c34:theme:1 int k19:e5 2 [ ]
c69:theme:1 int k24:e11 4 [ ]
c18:stone:0 instance k19:x8 2 [ stone ]
c53:stone:0 instance k24:x20 2 [ ]
c20:cover:0 instance k19:e3 1 [ covered ]
c55:cover:0 instance k24:e9 1 [ ]
c21:theme:-1 int k19:x9 1 [ ]
c56:theme:-1 int k24:x21 1 [ ]
c19:equality int k19:x8 3 [ ]
c54:equality int k24:x20 3 [ ]
c31:agent:1 ext k19:x10 1 [ by ]
c66:agent:1 ext k24:x22 1 [ ]
k19 referent k19:x10 2 [ a ]
k24 referent k24:x22 2 [ ]
c31:agent:1 int k19:e3 2 [ ]
c66:agent:1 int k24:e9 2 [ ]
c22:substance:0 instance k19:x10 3 [ substance ]
c57:substance:0 instance k24:x22 3 [ ]
c26:topic:1 int k19:e4 1 [ ]
c61:topic:1 int k24:e10 1 [ ]
k19:p2 referent k19:p2:x12 1 [ that ]
k24:p4 referent k24:p4:x24 1 [ ]
c27:equality int k19:x10 4 [ ]
c62:equality int k24:x22 4 [ ]
c23:person:1 instance k19:x11 1 [ you ]
c29:agent:1 int k19:p2:e6 1 [ ]
c58:person:1 instance k24:x23 1 [ ]
c64:agent:1 int k24:p4:e12 1 [ ]
c25:agent:1 int k19:e4 2 [ ]
c60:agent:1 int k24:e10 2 [ ]
k19:e4 main k15:p1 1 [ ]
k24:e10 main k20:p3 1 [ ]
c24:can:0 instance k19:e4 3 [ can ]
c59:can:0 instance k24:e10 3 [ ]
c28:eat:0 instance k19:p2:e6 2 [ eat ]
c63:eat:0 instance k24:p4:e12 2 [ ]
c30:theme:-1 int k19:p2:x12 2 [ ]
c65:theme:-1 int k24:p4:x24 2 [ ]
k24:p4 punctuation k24:p4:e12 3 [ . ]


!.
0.2425
0.1379
Your brother is a boy or a man who has the same parents as you.
'Your' PRP$ brother NN boy NN man NN who WP same JJ parents NNS you PRP 
sem(1,[1001:[tok:'Your',pos:'PRP$',lemma:your,namex:'O'],1002:[tok:brother,pos:'NN',lemma:brother,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:boy,pos:'NN',lemma:boy,namex:'O'],1006:[tok:or,pos:'CC',lemma:or,namex:'O'],1007:[tok:a,pos:'DT',lemma:a,namex:'O'],1008:[tok:man,pos:'NN',lemma:man,namex:'O'],1009:[tok:who,pos:'WP',lemma:who,namex:'O'],1010:[tok:has,pos:'VBZ',lemma:have,namex:'O'],1011:[tok:the,pos:'DT',lemma:the,namex:'O'],1012:[tok:same,pos:'JJ',lemma:same,namex:'O'],1013:[tok:parents,pos:'NNS',lemma:parent,namex:'O'],1014:[tok: (as),pos:'IN',lemma: (as),namex:'O'],1015:[tok:you,pos:'PRP',lemma:you,namex:'O'],1016:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[]:C,[1011]:D,[]:E,[]:F],[[1015]:pred(B,person,n,1),[1013]:pred(D,parent,n,0),[1012]:pred(C,same,a,0),[]:rel(C,D,experiencer,0),[1002]:pred(E,brother,n,0),[]:rel(E,F,of,1),[1001]:pred(F,person,n,1)]),drs([[]:G],[[]:prop(G,drs([],[[1006]:or(drs([[1004]:H],[[1003]:eq(E,H),[1005]:pred(H,boy,n,0)]),drs([[]:I,[1009]:J,[1007]:K],[[1003]:eq(E,K),[]:rel(I,D,theme,0),[]:rel(I,J,agent,0),[1010]:pred(I,have,v,0),[1014]:rel(D,B,as,0),[]:eq(K,J),[1008]:pred(K,man,n,0)]))]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% Your brother is a boy or a man who has the same parents as you . 
k3 concept c0:person:1 0 [ ]
k3 concept c2:brother:0 0 [ ]
k3 referent k3:p1 0 [ ]
k3 referent k3:x1 0 [ ]
k3 referent k3:x2 0 [ ]
k3 relation c1:of:1 0 [ ]
k4 concept c4:boy:0 0 [ ]
k5 attribute c9:same:0 0 [ ]
k5 concept c10:parent:0 0 [ ]
k5 concept c11:person:1 0 [ ]
k5 concept c6:man:0 0 [ ]
k5 event c13:have:0 0 [ ]
k5 referent k5:e1 0 [ ]
k5 referent k5:s1 0 [ ]
k5 referent k5:x7 0 [ ]
k5 relation c12:as:0 0 [ ]
k5 relation c7:equality 0 [ ]
k5 role c15:theme:1 0 [ ]
k5 role c8:experiencer:-1 0 [ ]
k5 role c14:agent:-1 0 [ ]
c1:of:1 ext k3:x1 0 [ ]
c15:theme:1 ext k5:x6 0 [ ]
c16:equality ext k5:x4 0 [ ]
c3:or antecedent k4 0 [ ]
c3:or consequent k5 0 [ ]
c5:equality ext k4:x3 0 [ ]
c7:equality ext k5:x5 0 [ ]
c8:experiencer:-1 ext k5:s1 0 [ ]
k3:p1 binary c3:or 0 [ ]
c14:agent:-1 ext k5:e1 0 [ ]
c0:person:1 instance k3:x1 1 [ Your ]
c1:of:1 int k3:x2 1 [ ]
c2:brother:0 instance k3:x2 2 [ brother ]
k4 relation c5:equality 1 [ is ]
k5 relation c16:equality 1 [ ]
k4 referent k4:x3 1 [ a ]
c5:equality int k3:x2 3 [ ]
c4:boy:0 instance k4:x3 2 [ boy ]
k5 surface k5:e1 1 [ or ]
c14:agent:-1 int k5:x5 1 [ ]
k5 referent k5:x4 1 [ a ]
c16:equality int k3:x2 4 [ ]
c6:man:0 instance k5:x4 2 [ man ]
k5 referent k5:x5 2 [ who ]
c7:equality int k5:x4 3 [ ]
c13:have:0 instance k5:e1 2 [ has ]
k5 referent k5:x6 1 [ the ]
c15:theme:1 int k5:e1 3 [ ]
c9:same:0 arg k5:s1 1 [ same ]
c8:experiencer:-1 int k5:x6 2 [ ]
c10:parent:0 instance k5:x6 3 [ parents ]
c12:as:0 ext k5:x7 1 [ as ]
c11:person:1 instance k5:x7 2 [ you ]
k5 punctuation k5:x7 3 [ . ]
c12:as:0 int k5:x6 4 [ ]


!.
A monk is a member of a male religious community that is usually separated from the outside world.
monk NN member NN male JJ religious JJ community NN that WDT usually RB separated VBN outside JJ world NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:monk,pos:'NN',lemma:monk,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:member,pos:'NN',lemma:member,namex:'O'],1006:[tok:of,pos:'IN',lemma:of,namex:'O'],1007:[tok:a,pos:'DT',lemma:a,namex:'O'],1008:[tok:male,pos:'JJ',lemma:male,namex:'O'],1009:[tok:religious,pos:'JJ',lemma:religious,namex:'O'],1010:[tok:community,pos:'NN',lemma:community,namex:'O'],1011:[tok:that,pos:'WDT',lemma:that,namex:'O'],1012:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1013:[tok:usually,pos:'RB',lemma:usually,namex:'O'],1014:[tok:separated,pos:'VBN',lemma:separate,namex:'O'],1015:[tok:from,pos:'IN',lemma:from,namex:'O'],1016:[tok:the,pos:'DT',lemma:the,namex:'O'],1017:[tok:outside,pos:'JJ',lemma:outside,namex:'O'],1018:[tok:world,pos:'NN',lemma:world,namex:'O'],1019:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[1016]:C],[[1018]:pred(C,world,n,0),[1017]:pred(B,outside,a,0),[]:rel(B,C,experiencer,0)]),drs([[]:D,[1001]:E],[[]:prop(D,drs([[]:F,[1011]:G,[]:H,[]:I,[1007]:J,[1004]:K],[[1003]:eq(E,K),[1006]:rel(K,J,of,0),[1013]:pred(F,usually,r,0),[1015]:rel(F,C,from,0),[]:rel(F,G,theme,0),[1014]:pred(F,separate,v,0),[]:eq(J,G),[1010]:pred(J,community,n,0),[1009]:pred(H,religious,a,0),[]:rel(H,J,experiencer,0),[1008]:pred(I,male,a,0),[]:rel(I,J,experiencer,0),[1005]:pred(K,member,n,0)])),[1002]:pred(E,monk,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A monk is a member of a male religious community that is usually separated from the outside world . 
k3 concept c0:monk:0 0 [ ]
k3 referent k3:p1 0 [ ]
c10:experiencer:-1 ext k3:p1:s3 0 [ ]
c16:equality ext k3:p1:x2 0 [ ]
c2:experiencer:-1 ext k3:p1:s1 0 [ ]
c4:experiencer:-1 ext k3:p1:s2 0 [ ]
c7:equality ext k3:p1:x4 0 [ ]
k3:p1 attribute c11:outside:0 0 [ ]
k3:p1 attribute c14:usually:0 0 [ ]
k3:p1 attribute c3:male:0 0 [ ]
k3:p1 attribute c5:religious:0 0 [ ]
k3:p1 concept c1:member:0 0 [ ]
k3:p1 concept c12:world:0 0 [ ]
k3:p1 concept c6:community:0 0 [ ]
k3:p1 event c8:separate:0 0 [ ]
k3:p1 referent k3:p1:e1 0 [ ]
k3:p1 referent k3:p1:s1 0 [ ]
k3:p1 referent k3:p1:s2 0 [ ]
k3:p1 referent k3:p1:s3 0 [ ]
k3:p1 relation c13:from:0 0 [ ]
k3:p1 relation c15:of:0 0 [ ]
k3:p1 relation c7:equality 0 [ ]
k3:p1 role c10:experiencer:-1 0 [ ]
k3:p1 role c2:experiencer:-1 0 [ ]
k3:p1 role c4:experiencer:-1 0 [ ]
k3:p1 role c9:theme:-1 0 [ ]
c9:theme:-1 ext k3:p1:e1 0 [ ]
k3 referent k3:x1 1 [ A ]
c0:monk:0 instance k3:x1 2 [ monk ]
k3:p1 relation c16:equality 1 [ is ]
k3:p1 referent k3:p1:x2 1 [ a ]
c16:equality int k3:x1 3 [ ]
c1:member:0 instance k3:p1:x2 2 [ member ]
c15:of:0 ext k3:p1:x3 1 [ of ]
k3:p1 referent k3:p1:x3 2 [ a ]
c15:of:0 int k3:p1:x2 3 [ ]
c3:male:0 arg k3:p1:s1 1 [ male ]
c2:experiencer:-1 int k3:p1:x3 3 [ ]
c5:religious:0 arg k3:p1:s2 1 [ religious ]
c4:experiencer:-1 int k3:p1:x3 4 [ ]
c6:community:0 instance k3:p1:x3 5 [ community ]
k3:p1 referent k3:p1:x4 1 [ that ]
c7:equality int k3:p1:x3 6 [ ]
k3:p1 surface k3:p1:e1 1 [ is ]
c9:theme:-1 int k3:p1:x4 2 [ ]
c14:usually:0 arg k3:p1:e1 2 [ usually ]
c8:separate:0 instance k3:p1:e1 3 [ separated ]
c13:from:0 ext k3:p1:x5 1 [ from ]
k3:p1 referent k3:p1:x5 2 [ the ]
c11:outside:0 arg k3:p1:s3 1 [ outside ]
c10:experiencer:-1 int k3:p1:x5 3 [ ]
c12:world:0 instance k3:p1:x5 4 [ world ]
c13:from:0 int k3:p1:e1 4 [ ]
k3:p1 punctuation k3:p1:x5 5 [ . ]


!.
0.0450
0.2780
An asylum is a psychiatric hospital.
asylum NN psychiatric JJ hospital NN 
sem(1,[1001:[tok:'An',pos:'DT',lemma:an,namex:'O'],1002:[tok:asylum,pos:'NN',lemma:asylum,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:psychiatric,pos:'JJ',lemma:psychiatric,namex:'O'],1006:[tok:hospital,pos:'NN',lemma:hospital,namex:'O'],1007:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[1004]:E],[[1003]:eq(C,E),[1006]:pred(E,hospital,n,0),[1005]:pred(D,psychiatric,a,0),[]:rel(D,E,experiencer,0)])),[1002]:pred(C,asylum,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% An asylum is a psychiatric hospital . 
k2 concept c0:asylum:0 0 [ ]
k2 referent k2:p1 0 [ ]
c1:experiencer:-1 ext k2:p1:s1 0 [ ]
c4:equality ext k2:p1:x2 0 [ ]
k2:p1 attribute c2:psychiatric:0 0 [ ]
k2:p1 concept c3:hospital:0 0 [ ]
k2:p1 referent k2:p1:s1 0 [ ]
k2:p1 role c1:experiencer:-1 0 [ ]
k2 referent k2:x1 1 [ An ]
c0:asylum:0 instance k2:x1 2 [ asylum ]
k2:p1 relation c4:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ a ]
c2:psychiatric:0 arg k2:p1:s1 1 [ psychiatric ]
c1:experiencer:-1 int k2:p1:x2 2 [ ]
c3:hospital:0 instance k2:p1:x2 3 [ hospital ]
c4:equality int k2:x1 3 [ ]
k2:p1 punctuation k2:p1:x2 4 [ . ]


!.
If you describe a place or situation as a madhouse, you mean that it is full of confusion and noise.
you PRP describe VBP place NN situation NN madhouse NN you PRP mean VBP it PRP full JJ confusion NN noise NN 
sem(1,[1001:[tok:'If',pos:'IN',lemma:if,namex:'O'],1002:[tok:you,pos:'PRP',lemma:you,namex:'O'],1003:[tok:describe,pos:'VBP',lemma:describe,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:place,pos:'NN',lemma:place,namex:'O'],1006:[tok:or,pos:'CC',lemma:or,namex:'O'],1007:[tok:situation,pos:'NN',lemma:situation,namex:'O'],1008:[tok: (as),pos:'IN',lemma: (as),namex:'O'],1009:[tok:a,pos:'DT',lemma:a,namex:'O'],1010:[tok:madhouse,pos:'NN',lemma:madhouse,namex:'O'],1011:[tok: (','),pos: (','),lemma: (','),namex:'O'],1012:[tok:you,pos:'PRP',lemma:you,namex:'O'],1013:[tok:mean,pos:'VBP',lemma:mean,namex:'O'],1014:[tok:that,pos:'IN',lemma:that,namex:'O'],1015:[tok:it,pos:'PRP',lemma:it,namex:'O'],1016:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1017:[tok:full,pos:'JJ',lemma:full,namex:'O'],1018:[tok:of,pos:'IN',lemma:of,namex:'O'],1019:[tok:confusion,pos:'NN',lemma:confusion,namex:'O'],1020:[tok:and,pos:'CC',lemma:and,namex:'O'],1021:[tok:noise,pos:'NN',lemma:noise,namex:'O'],1022:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[]:C,[]:D],[[1015]:pred(B,thing,n,12),[1012]:pred(C,person,n,1),[1002]:pred(D,person,n,1)]),drs([],[[1001]:imp(drs([[1009]:E,[]:F,[1004]:G],[[1008]:rel(F,E,as,0),[1010]:pred(E,madhouse,n,0),[]:rel(F,G,theme,0),[]:rel(F,D,agent,0),[1003]:pred(F,describe,v,0),[1006]:or(drs([],[[1005]:pred(G,place,n,0)]),drs([],[[1007]:pred(G,situation,n,0)]))]),drs([[]:H,[1014]:I],[[]:rel(H,I,topic,0),[]:rel(H,C,agent,0),[1013]:pred(H,mean,v,0),[]:prop(I,drs([[]:J,[]:K,[1020]:L,[]:M],[[1018]:rel(M,L,of,0),[]:rel(J,L,subset_of,1),[1021]:pred(J,noise,n,0),[]:rel(K,L,subset_of,1),[1019]:pred(K,confusion,n,0),[]:rel(M,B,experiencer,0),[1017]:pred(M,full,a,0)]))]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% If you describe a place or situation as a madhouse , you mean that it is full of confusion and noise . 
k4 binary c0:imp 0 [ ]
k5 binary c2:or 0 [ ]
k5 concept c1:person:1 0 [ ]
k5 concept c8:madhouse:0 0 [ ]
k5 event c5:describe:0 0 [ ]
k5 referent k5:e1 0 [ ]
k5 referent k5:x1 0 [ ]
k5 relation c9:as:0 0 [ ]
k5 role c6:agent:1 0 [ ]
k5 role c7:theme:1 0 [ ]
k6 concept c3:place:0 0 [ ]
k7 concept c4:situation:0 0 [ ]
k8 concept c10:person:1 0 [ ]
k8 event c19:mean:0 0 [ ]
k8 referent k8:e2 0 [ ]
k8 referent k8:x4 0 [ ]
k8 role c20:agent:1 0 [ ]
k8 role c21:topic:1 0 [ ]
c0:imp antecedent k5 0 [ ]
c0:imp consequent k8 0 [ ]
c13:experiencer:1 ext k8:p1:x5 0 [ ]
c15:superset_of:1 ext k8:p1:x7 0 [ ]
c17:superset_of:1 ext k8:p1:x8 0 [ ]
c2:or antecedent k6 0 [ ]
c2:or consequent k7 0 [ ]
c20:agent:1 ext k8:x4 0 [ ]
c21:topic:1 ext k8:p1 0 [ ]
c6:agent:1 ext k5:x1 0 [ ]
c7:theme:1 ext k5:x2 0 [ ]
k8:p1 attribute c12:full:0 0 [ ]
k8:p1 concept c11:thing:12 0 [ ]
k8:p1 concept c14:confusion:0 0 [ ]
k8:p1 concept c16:noise:0 0 [ ]
k8:p1 referent k8:p1:s1 0 [ ]
k8:p1 referent k8:p1:x5 0 [ ]
k8:p1 referent k8:p1:x7 0 [ ]
k8:p1 referent k8:p1:x8 0 [ ]
k8:p1 relation c15:superset_of:1 0 [ ]
k8:p1 relation c17:superset_of:1 0 [ ]
k8:p1 relation c18:of:0 0 [ ]
k8:p1 role c13:experiencer:1 0 [ ]
k5 surface k5:e1 1 [ If ]
c1:person:1 instance k5:x1 1 [ you ]
c6:agent:1 int k5:e1 2 [ ]
k5:e1 main k4 1 [ ]
c5:describe:0 instance k5:e1 3 [ describe ]
k5 referent k5:x2 1 [ a ]
c7:theme:1 int k5:e1 4 [ ]
c3:place:0 instance k5:x2 2 [ place ]
k5 function k5:x2 3 [ or ]
c4:situation:0 instance k5:x2 4 [ situation ]
c9:as:0 ext k5:x3 1 [ as ]
k5 referent k5:x3 2 [ a ]
c8:madhouse:0 instance k5:x3 3 [ madhouse ]
k5 punctuation k5:x3 4 [ , ]
c9:as:0 int k5:e1 5 [ ]
c10:person:1 instance k8:x4 1 [ you ]
c20:agent:1 int k8:e2 1 [ ]
c19:mean:0 instance k8:e2 2 [ mean ]
k8:e2 main k4 2 [ ]
k8 referent k8:p1 1 [ that ]
c21:topic:1 int k8:e2 3 [ ]
c11:thing:12 instance k8:p1:x5 1 [ it ]
c13:experiencer:1 int k8:p1:s1 1 [ ]
k8:p1 surface k8:p1:s1 2 [ is ]
k8:p1:s1 main k8:p1 2 [ ]
c12:full:0 arg k8:p1:s1 3 [ full ]
c18:of:0 ext k8:p1:x6 1 [ of ]
c14:confusion:0 instance k8:p1:x7 1 [ confusion ]
c15:superset_of:1 int k8:p1:x6 2 [ ]
k8:p1 referent k8:p1:x6 3 [ and ]
c18:of:0 int k8:p1:s1 4 [ ]
c16:noise:0 instance k8:p1:x8 1 [ noise ]
k8:p1 punctuation k8:p1:x8 2 [ . ]
c17:superset_of:1 int k8:p1:x6 4 [ ]


!.
0.2150
0.1860
A furnace is a container or enclosed space in which a very hot fire is made, for example, to melt metal, burn rubbish, or produce steam.
furnace NN container NN enclosed VBN space NN which WDT very RB hot JJ fire NN made VBN example NN melt VB metal NN burn NN rubbish NN produce VB steam NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:furnace,pos:'NN',lemma:furnace,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:container,pos:'NN',lemma:container,namex:'O'],1006:[tok:or,pos:'CC',lemma:or,namex:'O'],1007:[tok:enclosed,pos:'VBN',lemma:enclose,namex:'O'],1008:[tok:space,pos:'NN',lemma:space,namex:'O'],1009:[tok:in,pos:'IN',lemma:in,namex:'O'],1010:[tok:which,pos:'WDT',lemma:which,namex:'O'],1011:[tok:a,pos:'DT',lemma:a,namex:'O'],1012:[tok:very,pos:'RB',lemma:very,namex:'O'],1013:[tok:hot,pos:'JJ',lemma:hot,namex:'O'],1014:[tok:fire,pos:'NN',lemma:fire,namex:'O'],1015:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1016:[tok:made,pos:'VBN',lemma:make,namex:'O'],1017:[tok: (','),pos: (','),lemma: (','),namex:'O'],1018:[tok:for,pos:'IN',lemma:for,namex:'O'],1019:[tok:example,pos:'NN',lemma:example,namex:'O'],1020:[tok: (','),pos: (','),lemma: (','),namex:'O'],1021:[tok:to,pos:'TO',lemma:to,namex:'O'],1022:[tok:melt,pos:'VB',lemma:melt,namex:'O'],1023:[tok:metal,pos:'NN',lemma:metal,namex:'O'],1024:[tok: (','),pos: (','),lemma: (','),namex:'O'],1025:[tok:burn,pos:'NN',lemma:burn,namex:'O'],1026:[tok:rubbish,pos:'NN',lemma:rubbish,namex:'O'],1027:[tok: (','),pos: (','),lemma: (','),namex:'O'],1028:[tok:or,pos:'CC',lemma:or,namex:'O'],1029:[tok:produce,pos:'VB',lemma:produce,namex:'O'],1030:[tok:steam,pos:'NN',lemma:steam,namex:'O'],1031:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[1004]:D,[1021]:E,[]:F,[]:G,[]:H,[1011]:I],[[1003]:eq(C,D),[1009]:rel(G,D,in,0),[1006]:or(drs([],[[1005]:pred(D,container,n,0)]),drs([[]:J],[[1008]:pred(D,space,n,0),[]:rel(J,D,theme,0),[1007]:pred(J,enclose,v,0)])),[]:rel(G,E,for,0),[]:prop(E,drs([],[[1028]:or(drs([[]:K,[]:L,[]:M,[]:N,[]:O],[[1024]:rel(M,L,rel,0),[1026]:pred(L,rubbish,n,0),[]:rel(L,K,of,0),[1025]:pred(K,burn,n,0),[]:rel(M,N,theme,0),[]:rel(M,O,agent,0),[1022]:pred(M,melt,v,0),[1023]:pred(N,metal,n,0)]),drs([[]:P,[]:Q,[]:R],[[]:rel(P,Q,theme,0),[]:rel(P,R,agent,0),[1029]:pred(P,produce,v,0),[1030]:pred(Q,steam,n,0)]))])),[1018]:rel(G,F,for,0),[1019]:pred(F,example,n,0),[]:rel(G,I,theme,0),[1016]:pred(G,make,v,0),[1014]:pred(I,fire,n,0),[1013]:pred(H,hot,a,0),[]:rel(H,I,experiencer,0),[1012]:pred(I,very,a,0)])),[1002]:pred(C,furnace,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A furnace is a container or enclosed space in which a very hot fire is made , for example , to melt metal , burn rubbish , or produce steam . 
k10 concept c27:space:0 0 [ ]
k10 event c25:enclose:0 0 [ ]
k10 referent k10:e4 0 [ ]
k10 role c26:theme:-1 0 [ ]
k6 concept c0:furnace:0 0 [ ]
k6 referent k6:p1 0 [ ]
k7 concept c10:metal:0 0 [ ]
k7 concept c14:burn:0 0 [ ]
k7 concept c16:rubbish:0 0 [ ]
k7 event c11:melt:0 0 [ ]
k7 referent k7:e2 0 [ ]
k7 referent k7:x5 0 [ ]
k7 referent k7:x6 0 [ ]
k7 referent k7:x7 0 [ ]
k7 referent k7:x8 0 [ ]
k7 relation c15:of:0 0 [ ]
k7 relation c17:rel:0 0 [ ]
k7 role c12:agent:1 0 [ ]
k7 role c13:theme:1 0 [ ]
k8 concept c18:steam:0 0 [ ]
k8 event c19:produce:0 0 [ ]
k8 referent k8:e3 0 [ ]
k8 referent k8:x10 0 [ ]
k8 referent k8:x9 0 [ ]
k8 role c20:agent:1 0 [ ]
k8 role c21:theme:1 0 [ ]
k9 concept c24:container:0 0 [ ]
c12:agent:1 ext k7:x5 0 [ ]
c12:agent:1 int k7:e2 0 [ ]
c13:theme:1 ext k7:x6 0 [ ]
c15:of:0 ext k7:x8 0 [ ]
c2:experiencer:-1 ext k6:p1:s1 0 [ ]
c20:agent:1 ext k8:x9 0 [ ]
c20:agent:1 int k8:e3 0 [ ]
c21:theme:1 ext k8:x10 0 [ ]
c22:for:0 ext k6:p1:p2 0 [ ]
c23:or antecedent k9 0 [ ]
c23:or consequent k10 0 [ ]
c26:theme:-1 ext k10:e4 0 [ ]
c29:equality ext k6:p1:x4 0 [ ]
c6:theme:1 ext k6:p1:x2 0 [ ]
c9:or antecedent k7 0 [ ]
c9:or consequent k8 0 [ ]
k6:p1 attribute c1:very:0 0 [ ]
k6:p1 attribute c3:hot:0 0 [ ]
k6:p1 binary c23:or 0 [ ]
k6:p1 concept c4:fire:0 0 [ ]
k6:p1 concept c7:example:0 0 [ ]
k6:p1 event c5:make:0 0 [ ]
k6:p1 referent k6:p1:e1 0 [ ]
k6:p1 referent k6:p1:s1 0 [ ]
k6:p1 referent k6:p1:x3 0 [ ]
k6:p1 relation c22:for:0 0 [ ]
k6:p1 relation c28:in:0 0 [ ]
k6:p1 relation c8:for:0 0 [ ]
k6:p1 role c2:experiencer:-1 0 [ ]
k6:p1 role c6:theme:1 0 [ ]
k6:p1:p2 binary c9:or 0 [ ]
k6 referent k6:x1 1 [ A ]
c0:furnace:0 instance k6:x1 2 [ furnace ]
k6:p1 relation c29:equality 1 [ is ]
c28:in:0 int k6:p1:e1 1 [ ]
k6:p1 referent k6:p1:x4 1 [ a ]
c29:equality int k6:x1 3 [ ]
c24:container:0 instance k6:p1:x4 2 [ container ]
k6:p1 function k6:p1:x4 3 [ or ]
c25:enclose:0 instance k10:e4 1 [ enclosed ]
c26:theme:-1 int k6:p1:x4 4 [ ]
c27:space:0 instance k6:p1:x4 5 [ space ]
c28:in:0 ext k6:p1:x4 6 [ in ]
k6:p1 surface k6:p1:x2 1 [ which ]
c6:theme:1 int k6:p1:e1 2 [ ]
k6:p1 referent k6:p1:x2 2 [ a ]
c1:very:0 arg k6:p1:x2 3 [ very ]
c3:hot:0 arg k6:p1:s1 1 [ hot ]
c2:experiencer:-1 int k6:p1:x2 4 [ ]
c4:fire:0 instance k6:p1:x2 5 [ fire ]
k6:p1 surface k6:p1:e1 3 [ is ]
k6:p1:e1 main k6:p1 1 [ ]
c5:make:0 instance k6:p1:e1 4 [ made ]
k6 punctuation k6:p1 2 [ , ]
c8:for:0 ext k6:p1:x3 1 [ for ]
c7:example:0 instance k6:p1:x3 2 [ example ]
k6:p1 punctuation k6:p1:x3 3 [ , ]
c8:for:0 int k6:p1:e1 5 [ ]
k6:p1 referent k6:p1:p2 1 [ to ]
c11:melt:0 instance k7:e2 1 [ melt ]
k7:e2 main k6:p1:p2 2 [ ]
c22:for:0 int k6:p1:e1 6 [ ]
c10:metal:0 instance k7:x6 1 [ metal ]
c13:theme:1 int k7:e2 2 [ ]
c17:rel:0 ext k7:x7 1 [ , ]
c14:burn:0 instance k7:x8 1 [ burn ]
c15:of:0 int k7:x7 2 [ ]
c16:rubbish:0 instance k7:x7 3 [ rubbish ]
c17:rel:0 int k7:e2 3 [ ]
k7 punctuation k7:x7 4 [ , ]
k8 surface k8:e3 1 [ or ]
c19:produce:0 instance k8:e3 2 [ produce ]
k8:e3 main k6:p1:p2 3 [ ]
c18:steam:0 instance k8:x10 1 [ steam ]
k8 punctuation k8:x10 2 [ . ]
c21:theme:1 int k8:e3 3 [ ]


!.
A stove is a piece of equipment which provides heat, either for cooking or for heating a room.
stove NN piece NN equipment NN which WDT heat NN cooking NN heating VBG room NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:stove,pos:'NN',lemma:stove,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:piece,pos:'NN',lemma:piece,namex:'O'],1006:[tok:of,pos:'IN',lemma:of,namex:'O'],1007:[tok:equipment,pos:'NN',lemma:equipment,namex:'O'],1008:[tok:which,pos:'WDT',lemma:which,namex:'O'],1009:[tok:provides,pos:'VBZ',lemma:provide,namex:'O'],1010:[tok:heat,pos:'NN',lemma:heat,namex:'O'],1011:[tok: (','),pos: (','),lemma: (','),namex:'O'],1012:[tok:either,pos:'CC',lemma:either,namex:'O'],1013:[tok:for,pos:'IN',lemma:for,namex:'O'],1014:[tok:cooking,pos:'NN',lemma:cooking,namex:'O'],1015:[tok:or,pos:'CC',lemma:or,namex:'O'],1016:[tok:for,pos:'IN',lemma:for,namex:'O'],1017:[tok:heating,pos:'VBG',lemma:heat,namex:'O'],1018:[tok:a,pos:'DT',lemma:a,namex:'O'],1019:[tok:room,pos:'NN',lemma:room,namex:'O'],1020:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[1004]:E],[[1003]:eq(C,E),[1015]:or(drs([[]:F,[]:G,[]:H,[1008]:I],[[1012]:pred(G,either,r,0),[1013]:rel(G,F,for,0),[1014]:pred(F,cooking,n,0),[]:rel(G,H,theme,0),[]:rel(G,I,agent,0),[1009]:pred(G,provide,v,0),[1010]:pred(H,heat,n,0),[]:eq(E,I)]),drs([[]:J,[1018]:K,[]:L,[]:M,[1008]:N],[[1016]:rel(L,J,for,0),[]:rel(J,K,theme,0),[]:rel(J,N,agent,0),[1017]:pred(J,heat,v,0),[1019]:pred(K,room,n,0),[]:rel(L,M,theme,0),[]:rel(L,N,agent,0),[1009]:pred(L,provide,v,0),[1010]:pred(M,heat,n,0),[]:eq(E,N)])),[1006]:rel(E,D,of,0),[1007]:pred(D,equipment,n,0),[1005]:pred(E,piece,n,0)])),[1002]:pred(C,stove,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A stove is a piece of equipment which provides heat , either for cooking or for heating a room . 
k5 concept c0:stove:0 0 [ ]
k5 referent k5:p1 0 [ ]
k6 attribute c12:either:0 0 [ ]
k6 concept c10:cooking:0 0 [ ]
k6 concept c6:heat:0 0 [ ]
k6 event c7:provide:0 0 [ ]
k6 referent k6:e1 0 [ ]
k6 referent k6:x5 0 [ ]
k6 referent k6:x6 0 [ ]
k6 relation c11:for:0 0 [ ]
k6 relation c5:equality 0 [ ]
k6 role c9:theme:1 0 [ ]
k6 role c8:agent:-1 0 [ ]
k7 concept c14:heat:0 0 [ ]
k7 concept c18:room:0 0 [ ]
k7 event c15:provide:0 0 [ ]
k7 event c19:heat:0 0 [ ]
k7 referent k7:e2 0 [ ]
k7 referent k7:e3 0 [ ]
k7 referent k7:x8 0 [ ]
k7 relation c13:equality 0 [ ]
k7 relation c22:for:0 0 [ ]
k7 role c17:theme:1 0 [ ]
k7 role c21:theme:1 0 [ ]
k7 role c16:agent:-1 0 [ ]
k7 role c20:agent:-1 0 [ ]
c13:equality ext k7:x7 0 [ ]
c17:theme:1 ext k7:x8 0 [ ]
c21:theme:1 ext k7:x9 0 [ ]
c23:equality ext k5:p1:x2 0 [ ]
c4:or antecedent k6 0 [ ]
c4:or consequent k7 0 [ ]
c5:equality ext k6:x4 0 [ ]
c9:theme:1 ext k6:x5 0 [ ]
k5:p1 binary c4:or 0 [ ]
k5:p1 concept c1:piece:0 0 [ ]
k5:p1 concept c2:equipment:0 0 [ ]
k5:p1 referent k5:p1:x3 0 [ ]
k5:p1 relation c3:of:0 0 [ ]
c16:agent:-1 ext k7:e2 0 [ ]
c20:agent:-1 ext k7:e3 0 [ ]
c8:agent:-1 ext k6:e1 0 [ ]
k5 referent k5:x1 1 [ A ]
c0:stove:0 instance k5:x1 2 [ stove ]
k5:p1 relation c23:equality 1 [ is ]
k5:p1 referent k5:p1:x2 1 [ a ]
c23:equality int k5:x1 3 [ ]
c1:piece:0 instance k5:p1:x2 2 [ piece ]
c3:of:0 ext k5:p1:x3 1 [ of ]
c2:equipment:0 instance k5:p1:x3 2 [ equipment ]
c3:of:0 int k5:p1:x2 3 [ ]
k6 referent k6:x4 1 [ which ]
k7 referent k7:x7 1 [ ]
c13:equality int k5:p1:x2 4 [ ]
c5:equality int k5:p1:x2 5 [ ]
c15:provide:0 instance k7:e2 1 [ ]
c7:provide:0 instance k6:e1 1 [ provides ]
c16:agent:-1 int k7:x7 2 [ ]
c8:agent:-1 int k6:x4 2 [ ]
c14:heat:0 instance k7:x8 1 [ ]
c6:heat:0 instance k6:x5 1 [ heat ]
c9:theme:1 int k6:e1 2 [ ]
k7 punctuation k7:x8 2 [ , ]
c17:theme:1 int k7:e2 2 [ ]
c12:either:0 arg k6:e1 3 [ either ]
c11:for:0 ext k6:x6 1 [ for ]
c10:cooking:0 instance k6:x6 2 [ cooking ]
c11:for:0 int k6:e1 4 [ ]
k7 surface k7:e3 1 [ or ]
c22:for:0 int k7:e2 3 [ ]
c20:agent:-1 int k7:x7 3 [ ]
c22:for:0 ext k7:e3 2 [ for ]
c19:heat:0 instance k7:e3 3 [ heating ]
k7 referent k7:x9 1 [ a ]
c18:room:0 instance k7:x9 2 [ room ]
k7 punctuation k7:x9 3 [ . ]
c21:theme:1 int k7:e3 4 [ ]


!.
0.3475
0.1613
A magician is a person who entertains people by doing magic tricks.
magician NN person NN who WP people NNS doing VBG magic JJ tricks NNS 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:magician,pos:'NN',lemma:magician,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:person,pos:'NN',lemma:person,namex:'O'],1006:[tok:who,pos:'WP',lemma:who,namex:'O'],1007:[tok:entertains,pos:'VBZ',lemma:entertain,namex:'O'],1008:[tok:people,pos:'NNS',lemma:people,namex:'O'],1009:[tok:by,pos:'IN',lemma:by,namex:'O'],1010:[tok:doing,pos:'VBG',lemma:do,namex:'O'],1011:[tok:magic,pos:'JJ',lemma:magic,namex:'O'],1012:[tok:tricks,pos:'NNS',lemma:trick,namex:'O'],1013:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[]:E,[]:F,[]:G,[]:H,[1006]:I,[1004]:J],[[1003]:eq(C,J),[1009]:rel(G,D,by,0),[]:rel(D,F,theme,0),[]:rel(D,I,agent,0),[1010]:pred(D,do,v,0),[1012]:pred(F,trick,n,0),[1011]:pred(E,magic,a,0),[]:rel(E,F,experiencer,0),[]:rel(G,H,theme,0),[]:rel(G,I,agent,0),[1007]:pred(G,entertain,v,0),[1008]:pred(H,people,n,0),[]:eq(J,I),[1005]:pred(J,person,n,0)])),[1002]:pred(C,magician,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A magician is a person who entertains people by doing magic tricks . 
k4 concept c0:magician:0 0 [ ]
k4 referent k4:p1 0 [ ]
c12:theme:1 ext k4:p1:x5 0 [ ]
c14:equality ext k4:p1:x2 0 [ ]
c2:equality ext k4:p1:x3 0 [ ]
c6:theme:1 ext k4:p1:x4 0 [ ]
c7:experiencer:-1 ext k4:p1:s1 0 [ ]
k4:p1 attribute c8:magic:0 0 [ ]
k4:p1 concept c1:person:0 0 [ ]
k4:p1 concept c3:people:0 0 [ ]
k4:p1 concept c9:trick:0 0 [ ]
k4:p1 event c10:do:0 0 [ ]
k4:p1 event c4:entertain:0 0 [ ]
k4:p1 referent k4:p1:e1 0 [ ]
k4:p1 referent k4:p1:e2 0 [ ]
k4:p1 referent k4:p1:s1 0 [ ]
k4:p1 referent k4:p1:x4 0 [ ]
k4:p1 referent k4:p1:x5 0 [ ]
k4:p1 relation c13:by:0 0 [ ]
k4:p1 relation c2:equality 0 [ ]
k4:p1 role c12:theme:1 0 [ ]
k4:p1 role c6:theme:1 0 [ ]
k4:p1 role c7:experiencer:-1 0 [ ]
k4:p1 role c11:agent:-1 0 [ ]
k4:p1 role c5:agent:-1 0 [ ]
c11:agent:-1 ext k4:p1:e2 0 [ ]
c5:agent:-1 ext k4:p1:e1 0 [ ]
k4 referent k4:x1 1 [ A ]
c0:magician:0 instance k4:x1 2 [ magician ]
k4:p1 relation c14:equality 1 [ is ]
k4:p1 referent k4:p1:x2 1 [ a ]
c14:equality int k4:x1 3 [ ]
c1:person:0 instance k4:p1:x2 2 [ person ]
k4:p1 referent k4:p1:x3 1 [ who ]
c2:equality int k4:p1:x2 3 [ ]
c4:entertain:0 instance k4:p1:e1 1 [ entertains ]
c5:agent:-1 int k4:p1:x3 2 [ ]
c3:people:0 instance k4:p1:x4 1 [ people ]
c6:theme:1 int k4:p1:e1 2 [ ]
c13:by:0 ext k4:p1:e2 1 [ by ]
c10:do:0 instance k4:p1:e2 2 [ doing ]
c13:by:0 int k4:p1:e1 3 [ ]
c11:agent:-1 int k4:p1:x3 3 [ ]
c7:experiencer:-1 int k4:p1:x5 1 [ ]
c8:magic:0 arg k4:p1:s1 1 [ magic ]
c9:trick:0 instance k4:p1:x5 2 [ tricks ]
c12:theme:1 int k4:p1:e2 3 [ ]
k4:p1 punctuation k4:p1:x5 3 [ . ]


!.
In legends and fairy stories, a wizard is a man who has magic powers.
legends NNS fairy JJ stories NNS wizard NN man NN who WP magic JJ powers NNS 
sem(1,[1001:[tok:'In',pos:'IN',lemma:in,namex:'O'],1002:[tok:legends,pos:'NNS',lemma:legend,namex:'O'],1003:[tok:and,pos:'CC',lemma:and,namex:'O'],1004:[tok:fairy,pos:'JJ',lemma:fairy,namex:'O'],1005:[tok:stories,pos:'NNS',lemma:story,namex:'O'],1006:[tok: (','),pos: (','),lemma: (','),namex:'O'],1007:[tok:a,pos:'DT',lemma:a,namex:'O'],1008:[tok:wizard,pos:'NN',lemma:wizard,namex:'O'],1009:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1010:[tok:a,pos:'DT',lemma:a,namex:'O'],1011:[tok:man,pos:'NN',lemma:man,namex:'O'],1012:[tok:who,pos:'WP',lemma:who,namex:'O'],1013:[tok:has,pos:'VBZ',lemma:have,namex:'O'],1014:[tok:magic,pos:'JJ',lemma:magic,namex:'O'],1015:[tok:powers,pos:'NNS',lemma:power,namex:'O'],1016:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[]:C,[]:D,[1003]:E,[]:F,[1007]:G],[[1001]:rel(F,E,in,0),[]:rel(C,E,subset_of,1),[1005]:pred(C,story,n,0),[1004]:pred(B,fairy,a,0),[]:rel(B,C,experiencer,0),[]:rel(D,E,subset_of,1),[1002]:pred(D,legend,n,0),[]:prop(F,drs([[]:H,[]:I,[]:J,[1012]:K,[1010]:L],[[1009]:eq(G,L),[]:rel(H,J,theme,0),[]:rel(H,K,agent,0),[1013]:pred(H,have,v,0),[1015]:pred(J,power,n,0),[1014]:pred(I,magic,a,0),[]:rel(I,J,experiencer,0),[]:eq(L,K),[1011]:pred(L,man,n,0)])),[1008]:pred(G,wizard,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% In legends and fairy stories , a wizard is a man who has magic powers . 
k3 attribute c13:fairy:0 0 [ ]
k3 concept c0:wizard:0 0 [ ]
k3 concept c10:legend:0 0 [ ]
k3 concept c14:story:0 0 [ ]
k3 referent k3:p1 0 [ ]
k3 referent k3:s1 0 [ ]
k3 referent k3:x3 0 [ ]
k3 referent k3:x4 0 [ ]
k3 relation c11:superset_of:1 0 [ ]
k3 relation c15:superset_of:1 0 [ ]
k3 relation c16:in:0 0 [ ]
k3 role c12:experiencer:-1 0 [ ]
c11:superset_of:1 ext k3:x3 0 [ ]
c12:experiencer:-1 ext k3:s1 0 [ ]
c15:superset_of:1 ext k3:x4 0 [ ]
c2:equality ext k3:p1:x6 0 [ ]
c3:experiencer:-1 ext k3:p1:s2 0 [ ]
c8:theme:1 ext k3:p1:x7 0 [ ]
c9:equality ext k3:p1:x5 0 [ ]
k3:p1 attribute c4:magic:0 0 [ ]
k3:p1 concept c1:man:0 0 [ ]
k3:p1 concept c5:power:0 0 [ ]
k3:p1 event c6:have:0 0 [ ]
k3:p1 referent k3:p1:e1 0 [ ]
k3:p1 referent k3:p1:s2 0 [ ]
k3:p1 referent k3:p1:x7 0 [ ]
k3:p1 relation c2:equality 0 [ ]
k3:p1 role c3:experiencer:-1 0 [ ]
k3:p1 role c8:theme:1 0 [ ]
k3:p1 role c7:agent:-1 0 [ ]
c7:agent:-1 ext k3:p1:e1 0 [ ]
c16:in:0 ext k3:x2 1 [ In ]
c10:legend:0 instance k3:x3 1 [ legends ]
c11:superset_of:1 int k3:x2 2 [ ]
c16:in:0 int k3:p1 1 [ ]
k3 referent k3:x2 3 [ and ]
c12:experiencer:-1 int k3:x4 1 [ ]
c13:fairy:0 arg k3:s1 1 [ fairy ]
c14:story:0 instance k3:x4 2 [ stories ]
k3 punctuation k3:x4 3 [ , ]
c15:superset_of:1 int k3:x2 4 [ ]
k3 referent k3:x1 1 [ a ]
c0:wizard:0 instance k3:x1 2 [ wizard ]
k3:p1 relation c9:equality 1 [ is ]
k3:p1 referent k3:p1:x5 1 [ a ]
c9:equality int k3:x1 3 [ ]
c1:man:0 instance k3:p1:x5 2 [ man ]
k3:p1 referent k3:p1:x6 1 [ who ]
c2:equality int k3:p1:x5 3 [ ]
c6:have:0 instance k3:p1:e1 1 [ has ]
c7:agent:-1 int k3:p1:x6 2 [ ]
c3:experiencer:-1 int k3:p1:x7 1 [ ]
c4:magic:0 arg k3:p1:s2 1 [ magic ]
c5:power:0 instance k3:p1:x7 2 [ powers ]
c8:theme:1 int k3:p1:e1 2 [ ]
k3:p1 punctuation k3:p1:x7 3 [ . ]


!.
0.3550
0.5399
A hill is an area of land that is higher than the land that surrounds it.
hill NN area NN land NN that WDT higher JJR land NN that WDT it PRP 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:hill,pos:'NN',lemma:hill,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:an,pos:'DT',lemma:an,namex:'O'],1005:[tok:area,pos:'NN',lemma:area,namex:'O'],1006:[tok:of,pos:'IN',lemma:of,namex:'O'],1007:[tok:land,pos:'NN',lemma:land,namex:'O'],1008:[tok:that,pos:'WDT',lemma:that,namex:'O'],1009:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1010:[tok:higher,pos:'JJR',lemma:higher,namex:'O'],1011:[tok:than,pos:'IN',lemma:than,namex:'O'],1012:[tok:the,pos:'DT',lemma:the,namex:'O'],1013:[tok:land,pos:'NN',lemma:land,namex:'O'],1014:[tok:that,pos:'WDT',lemma:that,namex:'O'],1015:[tok:surrounds,pos:'VBZ',lemma:surround,namex:'O'],1016:[tok:it,pos:'PRP',lemma:it,namex:'O'],1017:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[1012]:C],[[1016]:pred(B,thing,n,12),[1013]:pred(C,land,n,0)]),drs([[]:D,[1001]:E],[[]:prop(D,drs([[]:F,[1014]:G,[]:H,[1008]:I,[]:J,[1004]:K],[[1003]:eq(E,K),[1006]:rel(K,J,of,0),[1011]:rel(H,C,than,0),[]:rel(F,B,theme,0),[]:rel(F,G,agent,0),[1015]:pred(F,surround,v,0),[]:eq(C,G),[]:rel(H,I,experiencer,0),[1010]:pred(H,higher,a,0),[]:eq(J,I),[1007]:pred(J,land,n,0),[1005]:pred(K,area,n,0)])),[1002]:pred(E,hill,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A hill is an area of land that is higher than the land that surrounds it . 
k3 concept c0:hill:0 0 [ ]
k3 referent k3:p1 0 [ ]
c11:theme:1 ext k3:p1:x7 0 [ ]
c14:equality ext k3:p1:x2 0 [ ]
c3:equality ext k3:p1:x4 0 [ ]
c7:equality ext k3:p1:x6 0 [ ]
k3:p1 attribute c4:higher:0 0 [ ]
k3:p1 concept c1:area:0 0 [ ]
k3:p1 concept c2:land:0 0 [ ]
k3:p1 concept c6:land:0 0 [ ]
k3:p1 concept c8:thing:12 0 [ ]
k3:p1 event c9:surround:0 0 [ ]
k3:p1 referent k3:p1:e1 0 [ ]
k3:p1 referent k3:p1:s1 0 [ ]
k3:p1 referent k3:p1:x3 0 [ ]
k3:p1 referent k3:p1:x7 0 [ ]
k3:p1 relation c12:than:0 0 [ ]
k3:p1 relation c13:of:0 0 [ ]
k3:p1 relation c3:equality 0 [ ]
k3:p1 relation c7:equality 0 [ ]
k3:p1 role c11:theme:1 0 [ ]
k3:p1 role c10:agent:-1 0 [ ]
k3:p1 role c5:experiencer:-1 0 [ ]
c10:agent:-1 ext k3:p1:e1 0 [ ]
c5:experiencer:-1 ext k3:p1:s1 0 [ ]
k3 referent k3:x1 1 [ A ]
c0:hill:0 instance k3:x1 2 [ hill ]
k3:p1 relation c14:equality 1 [ is ]
k3:p1 referent k3:p1:x2 1 [ an ]
c14:equality int k3:x1 3 [ ]
c1:area:0 instance k3:p1:x2 2 [ area ]
c13:of:0 ext k3:p1:x3 1 [ of ]
c2:land:0 instance k3:p1:x3 2 [ land ]
c13:of:0 int k3:p1:x2 3 [ ]
k3:p1 referent k3:p1:x4 1 [ that ]
c3:equality int k3:p1:x3 3 [ ]
k3:p1 surface k3:p1:s1 1 [ is ]
c5:experiencer:-1 int k3:p1:x4 2 [ ]
c4:higher:0 arg k3:p1:s1 2 [ higher ]
c12:than:0 ext k3:p1:x5 1 [ than ]
k3:p1 referent k3:p1:x5 2 [ the ]
c12:than:0 int k3:p1:s1 3 [ ]
c6:land:0 instance k3:p1:x5 3 [ land ]
k3:p1 referent k3:p1:x6 1 [ that ]
c7:equality int k3:p1:x5 4 [ ]
c9:surround:0 instance k3:p1:e1 1 [ surrounds ]
c10:agent:-1 int k3:p1:x6 2 [ ]
c8:thing:12 instance k3:p1:x7 1 [ it ]
c11:theme:1 int k3:p1:e1 2 [ ]
k3:p1 punctuation k3:p1:x7 2 [ . ]


!.
A mound of something is a large rounded pile of it.
mound NN large JJ rounded JJ pile NN it PRP 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:mound,pos:'NN',lemma:mound,namex:'O'],1003:[tok:of,pos:'IN',lemma:of,namex:'O'],1004:[tok:something,pos:'DT',lemma:something,namex:'O'],1005:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1006:[tok:a,pos:'DT',lemma:a,namex:'O'],1007:[tok:large,pos:'JJ',lemma:large,namex:'O'],1008:[tok:rounded,pos:'JJ',lemma:rounded,namex:'O'],1009:[tok:pile,pos:'NN',lemma:pile,namex:'O'],1010:[tok:of,pos:'IN',lemma:of,namex:'O'],1011:[tok:it,pos:'PRP',lemma:it,namex:'O'],1012:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B],[[1011]:pred(B,thing,n,12)]),drs([[]:C,[]:D,[1001]:E],[[]:prop(C,drs([[]:F,[]:G,[1006]:H],[[1005]:eq(E,H),[1010]:rel(H,B,of,0),[1009]:pred(H,pile,n,0),[1008]:pred(F,rounded,a,0),[]:rel(F,H,experiencer,0),[1007]:pred(G,large,a,0),[]:rel(G,H,experiencer,0)])),[1003]:rel(E,D,of,0),[1004]:pred(D,thing,n,12),[1002]:pred(E,mound,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A mound of something is a large rounded pile of it . 
k2 concept c0:mound:0 0 [ ]
k2 concept c1:thing:12 0 [ ]
k2 referent k2:p1 0 [ ]
k2 referent k2:x2 0 [ ]
k2 relation c2:of:0 0 [ ]
c10:equality ext k2:p1:x3 0 [ ]
c3:experiencer:-1 ext k2:p1:s1 0 [ ]
c5:experiencer:-1 ext k2:p1:s2 0 [ ]
k2:p1 attribute c4:large:0 0 [ ]
k2:p1 attribute c6:rounded:0 0 [ ]
k2:p1 concept c7:pile:0 0 [ ]
k2:p1 concept c8:thing:12 0 [ ]
k2:p1 referent k2:p1:s1 0 [ ]
k2:p1 referent k2:p1:s2 0 [ ]
k2:p1 referent k2:p1:x4 0 [ ]
k2:p1 relation c9:of:0 0 [ ]
k2:p1 role c3:experiencer:-1 0 [ ]
k2:p1 role c5:experiencer:-1 0 [ ]
k2 referent k2:x1 1 [ A ]
c0:mound:0 instance k2:x1 2 [ mound ]
c2:of:0 ext k2:x2 1 [ of ]
c1:thing:12 instance k2:x2 2 [ something ]
c2:of:0 int k2:x1 3 [ ]
k2:p1 relation c10:equality 1 [ is ]
k2:p1 referent k2:p1:x3 1 [ a ]
c10:equality int k2:x1 4 [ ]
c4:large:0 arg k2:p1:s1 1 [ large ]
c3:experiencer:-1 int k2:p1:x3 2 [ ]
c6:rounded:0 arg k2:p1:s2 1 [ rounded ]
c5:experiencer:-1 int k2:p1:x3 3 [ ]
c7:pile:0 instance k2:p1:x3 4 [ pile ]
c9:of:0 ext k2:p1:x4 1 [ of ]
c8:thing:12 instance k2:p1:x4 2 [ it ]
k2:p1 punctuation k2:p1:x4 3 [ . ]
c9:of:0 int k2:p1:x3 5 [ ]


!.
0.2925
0.2986
Cord is strong, thick string.
'Cord' NNP strong JJ thick JJ string NN 
sem(1,[1001:[tok:'Cord',pos:'NNP',lemma:'Cord',namex:'O'],1002:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1003:[tok:strong,pos:'JJ',lemma:strong,namex:'O'],1004:[tok: (','),pos: (','),lemma: (','),namex:'O'],1005:[tok:thick,pos:'JJ',lemma:thick,namex:'O'],1006:[tok:string,pos:'NN',lemma:string,namex:'O'],1007:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B],[[1001]:named(B,cord,nam,nam)]),drs([[]:C,[]:D,[]:E],[[1004]:rel(E,D,rel,0),[1006]:pred(D,string,n,0),[1005]:pred(C,thick,a,0),[]:rel(C,D,experiencer,0),[]:rel(E,B,experiencer,0),[1003]:pred(E,strong,a,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% Cord is strong , thick string . 
k2 attribute c1:strong:0 0 [ ]
k2 attribute c4:thick:0 0 [ ]
k2 concept c5:string:0 0 [ ]
k2 named c0:cord:nam 0 [ ]
k2 referent k2:s1 0 [ ]
k2 referent k2:s2 0 [ ]
k2 referent k2:x1 0 [ ]
k2 referent k2:x2 0 [ ]
k2 relation c6:rel:0 0 [ ]
k2 role c2:experiencer:1 0 [ ]
k2 role c3:experiencer:-1 0 [ ]
c2:experiencer:1 ext k2:x1 0 [ ]
c3:experiencer:-1 ext k2:s2 0 [ ]
c0:cord:nam instance k2:x1 1 [ Cord ]
c2:experiencer:1 int k2:s1 1 [ ]
k2 surface k2:s1 2 [ is ]
k2:s1 main k2 1 [ ]
c1:strong:0 arg k2:s1 3 [ strong ]
c6:rel:0 ext k2:x2 1 [ , ]
c4:thick:0 arg k2:s2 1 [ thick ]
c3:experiencer:-1 int k2:x2 2 [ ]
c5:string:0 instance k2:x2 3 [ string ]
k2 punctuation k2:x2 4 [ . ]
c6:rel:0 int k2:s1 4 [ ]


!.
String is thin rope made of twisted threads, used for tying things together or tying up parcels.
'String' VBG thin JJ rope NN made VBN twisted JJ threads NNS used VBN tying VBG things NNS together RB tying VBG up RP parcels NNS 
sem(1,[1001:[tok:'String',pos:'VBG',lemma:string,namex:'O'],1002:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1003:[tok:thin,pos:'JJ',lemma:thin,namex:'O'],1004:[tok:rope,pos:'NN',lemma:rope,namex:'O'],1005:[tok:made,pos:'VBN',lemma:make,namex:'O'],1006:[tok:of,pos:'IN',lemma:of,namex:'O'],1007:[tok:twisted,pos:'JJ',lemma:twisted,namex:'O'],1008:[tok:threads,pos:'NNS',lemma:thread,namex:'O'],1009:[tok: (','),pos: (','),lemma: (','),namex:'O'],1010:[tok:used,pos:'VBN',lemma:use,namex:'O'],1011:[tok:for,pos:'IN',lemma:for,namex:'O'],1012:[tok:tying,pos:'VBG',lemma:tie,namex:'O'],1013:[tok:things,pos:'NNS',lemma:thing,namex:'O'],1014:[tok:together,pos:'RB',lemma:together,namex:'O'],1015:[tok:or,pos:'CC',lemma:or,namex:'O'],1016:[tok:tying,pos:'VBG',lemma:tie,namex:'O'],1017:[tok:up,pos:'RP',lemma:up,namex:'O'],1018:[tok:parcels,pos:'NNS',lemma:parcel,namex:'O'],1019:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[]:C],[[]:prop(B,drs([[]:D,[]:E,[]:F,[]:G,[]:H,[]:I,[]:J,[]:K],[[1002]:eq(C,K),[1006]:rel(H,G,of,0),[1015]:or(drs([[]:L,[]:M,[]:N],[[1011]:rel(D,L,for,0),[1014]:pred(L,together,r,0),[]:rel(L,M,theme,0),[]:rel(L,N,agent,0),[1012]:pred(L,tie,v,0),[1013]:pred(M,thing,n,0)]),drs([[]:O,[]:P,[]:Q],[[1011]:rel(D,O,for,0),[1017]:pred(O,up,r,0),[]:rel(O,P,theme,0),[]:rel(O,Q,agent,0),[1016]:pred(O,tie,v,0),[1018]:pred(P,parcel,n,0)])),[]:rel(D,E,theme,0),[1010]:pred(D,use,v,0),[]:eq(G,E),[1008]:pred(G,thread,n,0),[1007]:pred(F,twisted,a,0),[]:rel(F,G,experiencer,0),[]:rel(H,I,theme,0),[1005]:pred(H,make,v,0),[]:eq(K,I),[1004]:pred(K,rope,n,0),[1003]:pred(J,thin,a,0),[]:rel(J,K,experiencer,0)])),[1001]:pred(C,string,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% String is thin rope made of twisted threads , used for tying things together or tying up parcels . 
k6 concept c0:string:0 0 [ ]
k6 referent k6:p1 0 [ ]
k6 referent k6:x1 0 [ ]
k7 attribute c18:together:0 0 [ ]
k7 concept c14:thing:0 0 [ ]
k7 event c15:tie:0 0 [ ]
k7 referent k7:e3 0 [ ]
k7 referent k7:x6 0 [ ]
k7 referent k7:x7 0 [ ]
k7 relation c19:for:0 0 [ ]
k7 role c16:agent:1 0 [ ]
k7 role c17:theme:1 0 [ ]
k8 attribute c24:up:0 0 [ ]
k8 concept c20:parcel:0 0 [ ]
k8 event c21:tie:0 0 [ ]
k8 referent k8:e4 0 [ ]
k8 referent k8:x8 0 [ ]
k8 referent k8:x9 0 [ ]
k8 relation c25:for:0 0 [ ]
k8 role c22:agent:1 0 [ ]
k8 role c23:theme:1 0 [ ]
c1:experiencer:-1 ext k6:p1:s1 0 [ ]
c10:equality ext k6:p1:x5 0 [ ]
c13:or antecedent k7 0 [ ]
c13:or consequent k8 0 [ ]
c16:agent:1 ext k7:x6 0 [ ]
c16:agent:1 int k7:e3 0 [ ]
c17:theme:1 ext k7:x7 0 [ ]
c22:agent:1 ext k8:x8 0 [ ]
c22:agent:1 int k8:e4 0 [ ]
c23:theme:1 ext k8:x9 0 [ ]
c27:equality ext k6:p1:x2 0 [ ]
c4:equality ext k6:p1:x3 0 [ ]
c7:experiencer:-1 ext k6:p1:s2 0 [ ]
k6:p1 attribute c2:thin:0 0 [ ]
k6:p1 attribute c8:twisted:0 0 [ ]
k6:p1 binary c13:or 0 [ ]
k6:p1 concept c3:rope:0 0 [ ]
k6:p1 concept c9:thread:0 0 [ ]
k6:p1 event c11:use:0 0 [ ]
k6:p1 event c5:make:0 0 [ ]
k6:p1 referent k6:p1:e1 0 [ ]
k6:p1 referent k6:p1:e2 0 [ ]
k6:p1 referent k6:p1:s1 0 [ ]
k6:p1 referent k6:p1:s2 0 [ ]
k6:p1 referent k6:p1:x2 0 [ ]
k6:p1 referent k6:p1:x3 0 [ ]
k6:p1 referent k6:p1:x4 0 [ ]
k6:p1 referent k6:p1:x5 0 [ ]
k6:p1 relation c10:equality 0 [ ]
k6:p1 relation c26:of:0 0 [ ]
k6:p1 relation c4:equality 0 [ ]
k6:p1 role c1:experiencer:-1 0 [ ]
k6:p1 role c7:experiencer:-1 0 [ ]
k6:p1 role c12:theme:-1 0 [ ]
k6:p1 role c6:theme:-1 0 [ ]
c12:theme:-1 ext k6:p1:e2 0 [ ]
c6:theme:-1 ext k6:p1:e1 0 [ ]
c0:string:0 instance k6:x1 1 [ String ]
k6:p1 relation c27:equality 1 [ is ]
c1:experiencer:-1 int k6:p1:x2 1 [ ]
c2:thin:0 arg k6:p1:s1 1 [ thin ]
c27:equality int k6:x1 2 [ ]
c3:rope:0 instance k6:p1:x2 2 [ rope ]
c5:make:0 instance k6:p1:e1 1 [ made ]
c6:theme:-1 int k6:p1:x3 1 [ ]
c4:equality int k6:p1:x2 3 [ ]
c26:of:0 ext k6:p1:x4 1 [ of ]
c8:twisted:0 arg k6:p1:s2 1 [ twisted ]
c7:experiencer:-1 int k6:p1:x4 2 [ ]
c9:thread:0 instance k6:p1:x4 3 [ threads ]
c26:of:0 int k6:p1:e1 2 [ ]
k6:p1 punctuation k6:p1:x4 4 [ , ]
c11:use:0 instance k6:p1:e2 1 [ used ]
c12:theme:-1 int k6:p1:x5 1 [ ]
c10:equality int k6:p1:x4 5 [ ]
c19:for:0 ext k7:e3 1 [ for ]
c25:for:0 ext k8:e4 1 [ ]
k7:e3 main k6:p1 1 [ ]
c15:tie:0 instance k7:e3 2 [ tying ]
c19:for:0 int k6:p1:e2 2 [ ]
c14:thing:0 instance k7:x7 1 [ things ]
c17:theme:1 int k7:e3 3 [ ]
c18:together:0 arg k7:e3 4 [ together ]
k8 surface k8:e4 2 [ or ]
c25:for:0 int k6:p1:e2 3 [ ]
k8:e4 main k6:p1 2 [ ]
c21:tie:0 instance k8:e4 3 [ tying ]
c24:up:0 arg k8:e4 4 [ up ]
c20:parcel:0 instance k8:x9 1 [ parcels ]
k8 punctuation k8:x9 2 [ . ]
c23:theme:1 int k8:e4 5 [ ]


!.
0.4700
0.2530
Glass is a hard transparent substance that is used to make things such as windows and bottles.
'Glass' NNP hard JJ transparent NN substance NN that WDT used VBN make VB things NNS such JJ windows NNS bottles NNS 
sem(1,[1001:[tok:'Glass',pos:'NNP',lemma:'Glass',namex:'O'],1002:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1003:[tok:a,pos:'DT',lemma:a,namex:'O'],1004:[tok:hard,pos:'JJ',lemma:hard,namex:'O'],1005:[tok:transparent,pos:'NN',lemma:transparent,namex:'O'],1006:[tok:substance,pos:'NN',lemma:substance,namex:'O'],1007:[tok:that,pos:'WDT',lemma:that,namex:'O'],1008:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1009:[tok:used,pos:'VBN',lemma:use,namex:'O'],1010:[tok:to,pos:'TO',lemma:to,namex:'O'],1011:[tok:make,pos:'VB',lemma:make,namex:'O'],1012:[tok:things,pos:'NNS',lemma:thing,namex:'O'],1013:[tok:such,pos:'JJ',lemma:such,namex:'O'],1014:[tok: (as),pos:'IN',lemma: (as),namex:'O'],1015:[tok:windows,pos:'NNS',lemma:window,namex:'O'],1016:[tok:and,pos:'CC',lemma:and,namex:'O'],1017:[tok:bottles,pos:'NNS',lemma:bottle,namex:'O'],1018:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B],[[1001]:named(B,glass,nam,nam)]),drs([[]:C],[[]:prop(C,drs([[]:D,[1010]:E,[1007]:F,[]:G,[]:H,[1003]:I],[[1002]:eq(B,I),[]:rel(D,E,recipient,0),[]:rel(D,F,topic,0),[1009]:pred(D,use,v,0),[]:prop(E,drs([[]:J,[]:K,[]:L,[1016]:M,[]:N],[[]:rel(J,N,theme,0),[]:rel(J,F,agent,0),[1011]:pred(J,make,v,0),[1013]:pred(N,such,n,0),[1014]:rel(N,M,as,0),[]:rel(K,M,subset_of,1),[1017]:pred(K,bottle,n,0),[]:rel(L,M,subset_of,1),[1015]:pred(L,window,n,0),[1012]:pred(N,thing,n,0)])),[]:eq(I,F),[1006]:pred(I,substance,n,0),[]:rel(I,G,of,0),[1005]:pred(G,transparent,n,0),[1004]:pred(H,hard,a,0),[]:rel(H,I,experiencer,0)]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% Glass is a hard transparent substance that is used to make things such as windows and bottles . 
k4 named c0:glass:nam 0 [ ]
k4 referent k4:p1 0 [ ]
k4 referent k4:x1 0 [ ]
c1:experiencer:-1 ext k4:p1:s1 0 [ ]
c11:superset_of:1 ext (k4:p1):p2:x8 0 [ ]
c16:theme:1 ext (k4:p1):p2:x5 0 [ ]
c19:recipient:1 ext k4:p1:p2 0 [ ]
c20:equality ext k4:p1:x2 0 [ ]
c4:of:0 ext k4:p1:x3 0 [ ]
c6:equality ext k4:p1:x4 0 [ ]
c9:superset_of:1 ext (k4:p1):p2:x7 0 [ ]
k4:p1 attribute c2:hard:0 0 [ ]
k4:p1 concept c3:transparent:0 0 [ ]
k4:p1 concept c5:substance:0 0 [ ]
k4:p1 event c17:use:0 0 [ ]
k4:p1 referent k4:p1:e1 0 [ ]
k4:p1 referent k4:p1:s1 0 [ ]
k4:p1 referent k4:p1:x3 0 [ ]
k4:p1 relation c4:of:0 0 [ ]
k4:p1 relation c6:equality 0 [ ]
k4:p1 role c1:experiencer:-1 0 [ ]
k4:p1 role c19:recipient:1 0 [ ]
k4:p1 role c18:topic:-1 0 [ ]
k4:p1:p2 concept c10:bottle:0 0 [ ]
k4:p1:p2 concept c13:such:0 0 [ ]
k4:p1:p2 concept c7:thing:0 0 [ ]
k4:p1:p2 concept c8:window:0 0 [ ]
k4:p1:p2 event c14:make:0 0 [ ]
k4:p1:p2 referent (k4:p1):p2:e2 0 [ ]
k4:p1:p2 referent (k4:p1):p2:x5 0 [ ]
k4:p1:p2 referent (k4:p1):p2:x7 0 [ ]
k4:p1:p2 referent (k4:p1):p2:x8 0 [ ]
k4:p1:p2 relation c11:superset_of:1 0 [ ]
k4:p1:p2 relation c12:as:0 0 [ ]
k4:p1:p2 relation c9:superset_of:1 0 [ ]
k4:p1:p2 role c16:theme:1 0 [ ]
k4:p1:p2 role c15:agent:-1 0 [ ]
c15:agent:-1 ext (k4:p1):p2:e2 0 [ ]
c18:topic:-1 ext k4:p1:e1 0 [ ]
c0:glass:nam instance k4:x1 1 [ Glass ]
k4:p1 relation c20:equality 1 [ is ]
k4:p1 referent k4:p1:x2 1 [ a ]
c20:equality int k4:x1 2 [ ]
c2:hard:0 arg k4:p1:s1 1 [ hard ]
c1:experiencer:-1 int k4:p1:x2 2 [ ]
c3:transparent:0 instance k4:p1:x3 1 [ transparent ]
c4:of:0 int k4:p1:x2 3 [ ]
c5:substance:0 instance k4:p1:x2 4 [ substance ]
k4:p1 referent k4:p1:x4 1 [ that ]
c6:equality int k4:p1:x2 5 [ ]
k4:p1 surface k4:p1:e1 1 [ is ]
c18:topic:-1 int k4:p1:x4 2 [ ]
c17:use:0 instance k4:p1:e1 2 [ used ]
k4:p1 referent k4:p1:p2 1 [ to ]
c19:recipient:1 int k4:p1:e1 3 [ ]
c14:make:0 instance (k4:p1):p2:e2 1 [ make ]
c15:agent:-1 int k4:p1:x4 3 [ ]
c7:thing:0 instance (k4:p1):p2:x5 1 [ things ]
c16:theme:1 int (k4:p1):p2:e2 2 [ ]
c13:such:0 instance (k4:p1):p2:x5 2 [ such ]
c12:as:0 ext (k4:p1):p2:x6 1 [ as ]
c8:window:0 instance (k4:p1):p2:x7 1 [ windows ]
c9:superset_of:1 int (k4:p1):p2:x6 2 [ ]
c12:as:0 int (k4:p1):p2:x5 3 [ ]
k4:p1:p2 referent (k4:p1):p2:x6 3 [ and ]
c10:bottle:0 instance (k4:p1):p2:x8 1 [ bottles ]
k4:p1:p2 punctuation (k4:p1):p2:x8 2 [ . ]
c11:superset_of:1 int (k4:p1):p2:x6 4 [ ]


!.
A tumbler is a drinking glass with straight sides.
tumbler NN drinking NN glass NN straight JJ sides NNS 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:tumbler,pos:'NN',lemma:tumbler,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:drinking,pos:'NN',lemma:drinking,namex:'O'],1006:[tok:glass,pos:'NN',lemma:glass,namex:'O'],1007:[tok:with,pos:'IN',lemma:with,namex:'O'],1008:[tok:straight,pos:'JJ',lemma:straight,namex:'O'],1009:[tok:sides,pos:'NNS',lemma:side,namex:'O'],1010:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[]:E,[]:F,[1004]:G],[[1003]:eq(C,G),[1007]:rel(G,E,with,0),[1009]:pred(E,side,n,0),[1008]:pred(D,straight,a,0),[]:rel(D,E,experiencer,0),[1006]:pred(G,glass,n,0),[]:rel(G,F,of,0),[1005]:pred(F,drinking,n,0)])),[1002]:pred(C,tumbler,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A tumbler is a drinking glass with straight sides . 
k2 concept c0:tumbler:0 0 [ ]
k2 referent k2:p1 0 [ ]
c2:of:0 ext k2:p1:x3 0 [ ]
c4:experiencer:-1 ext k2:p1:s1 0 [ ]
c8:equality ext k2:p1:x2 0 [ ]
k2:p1 attribute c5:straight:0 0 [ ]
k2:p1 concept c1:drinking:0 0 [ ]
k2:p1 concept c3:glass:0 0 [ ]
k2:p1 concept c6:side:0 0 [ ]
k2:p1 referent k2:p1:s1 0 [ ]
k2:p1 referent k2:p1:x3 0 [ ]
k2:p1 referent k2:p1:x4 0 [ ]
k2:p1 relation c2:of:0 0 [ ]
k2:p1 relation c7:with:0 0 [ ]
k2:p1 role c4:experiencer:-1 0 [ ]
k2 referent k2:x1 1 [ A ]
c0:tumbler:0 instance k2:x1 2 [ tumbler ]
k2:p1 relation c8:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ a ]
c8:equality int k2:x1 3 [ ]
c1:drinking:0 instance k2:p1:x3 1 [ drinking ]
c2:of:0 int k2:p1:x2 2 [ ]
c3:glass:0 instance k2:p1:x2 3 [ glass ]
c7:with:0 ext k2:p1:x4 1 [ with ]
c5:straight:0 arg k2:p1:s1 1 [ straight ]
c4:experiencer:-1 int k2:p1:x4 2 [ ]
c6:side:0 instance k2:p1:x4 3 [ sides ]
c7:with:0 int k2:p1:x2 4 [ ]
k2:p1 punctuation k2:p1:x4 4 [ . ]


!.
0.1375
0.3016
A grin is a broad smile.
grin NN broad JJ smile NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:grin,pos:'NN',lemma:grin,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:broad,pos:'JJ',lemma:broad,namex:'O'],1006:[tok:smile,pos:'NN',lemma:smile,namex:'O'],1007:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[1004]:E],[[1003]:eq(C,E),[1006]:pred(E,smile,n,0),[1005]:pred(D,broad,a,0),[]:rel(D,E,experiencer,0)])),[1002]:pred(C,grin,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A grin is a broad smile . 
k2 concept c0:grin:0 0 [ ]
k2 referent k2:p1 0 [ ]
c1:experiencer:-1 ext k2:p1:s1 0 [ ]
c4:equality ext k2:p1:x2 0 [ ]
k2:p1 attribute c2:broad:0 0 [ ]
k2:p1 concept c3:smile:0 0 [ ]
k2:p1 referent k2:p1:s1 0 [ ]
k2:p1 role c1:experiencer:-1 0 [ ]
k2 referent k2:x1 1 [ A ]
c0:grin:0 instance k2:x1 2 [ grin ]
k2:p1 relation c4:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ a ]
c2:broad:0 arg k2:p1:s1 1 [ broad ]
c1:experiencer:-1 int k2:p1:x2 2 [ ]
c3:smile:0 instance k2:p1:x2 3 [ smile ]
c4:equality int k2:x1 3 [ ]
k2:p1 punctuation k2:p1:x2 4 [ . ]


!.
A smile is the expression that you have on your face when you are pleased or amused, or when you are being friendly.
smile NN expression NN you PRP have VBP your PRP$ face NN when WRB you PRP are VBP pleased JJ amused JJ when WRB you PRP are VBP being VBG friendly JJ 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:smile,pos:'NN',lemma:smile,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:the,pos:'DT',lemma:the,namex:'O'],1005:[tok:expression,pos:'NN',lemma:expression,namex:'O'],1006:[tok:that,pos:'IN',lemma:that,namex:'O'],1007:[tok:you,pos:'PRP',lemma:you,namex:'O'],1008:[tok:have,pos:'VBP',lemma:have,namex:'O'],1009:[tok:on,pos:'IN',lemma:on,namex:'O'],1010:[tok:your,pos:'PRP$',lemma:your,namex:'O'],1011:[tok:face,pos:'NN',lemma:face,namex:'O'],1012:[tok:when,pos:'WRB',lemma:when,namex:'O'],1013:[tok:you,pos:'PRP',lemma:you,namex:'O'],1014:[tok:are,pos:'VBP',lemma:be,namex:'O'],1015:[tok:pleased,pos:'JJ',lemma:pleased,namex:'O'],1016:[tok:or,pos:'CC',lemma:or,namex:'O'],1017:[tok:amused,pos:'JJ',lemma:amused,namex:'O'],1018:[tok: (','),pos: (','),lemma: (','),namex:'O'],1019:[tok:or,pos:'CC',lemma:or,namex:'O'],1020:[tok:when,pos:'WRB',lemma:when,namex:'O'],1021:[tok:you,pos:'PRP',lemma:you,namex:'O'],1022:[tok:are,pos:'VBP',lemma:be,namex:'O'],1023:[tok:being,pos:'VBG',lemma:be,namex:'O'],1024:[tok:friendly,pos:'JJ',lemma:friendly,namex:'O'],1025:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[]:C,[]:D,[]:E,[]:F,[]:G,[]:H,[]:I,[]:J,[1004]:K],[[1021]:pred(B,person,n,1),[1011]:pred(C,face,n,0),[]:rel(C,D,of,1),[1010]:pred(D,person,n,1),[1007]:pred(E,person,n,1),[1013]:pred(F,person,n,1),[1013]:pred(G,person,n,1),[1011]:pred(H,face,n,0),[]:rel(H,I,of,1),[1010]:pred(I,person,n,1),[1007]:pred(J,person,n,1),[1005]:pred(K,expression,n,0)]),drs([[]:L,[1001]:M],[[]:prop(L,drs([],[[1003]:eq(M,K),[1019]:or(drs([[]:N,[]:O,[1006]:P],[[]:prop(N,drs([],[[1016]:or(drs([[]:Q],[[]:rel(Q,G,experiencer,0),[1015]:pred(Q,pleased,a,0)]),drs([[]:R],[[]:rel(R,F,experiencer,0),[1017]:pred(R,amused,a,0)]))])),[1012]:rel(O,N,when,0),[1009]:rel(O,H,on,0),[]:rel(O,P,theme,0),[]:rel(O,J,agent,0),[1008]:pred(O,have,v,0),[]:eq(K,P)]),drs([[]:S,[]:T,[1006]:U],[[]:prop(S,drs([[]:V],[[]:rel(V,B,experiencer,0),[1024]:pred(V,friendly,a,0)])),[1020]:rel(T,S,when,0),[1009]:rel(T,C,on,0),[]:rel(T,U,theme,0),[]:rel(T,E,agent,0),[1008]:pred(T,have,v,0),[]:eq(K,U)]))])),[1002]:pred(M,smile,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A smile is the expression that you have on your face when you are pleased or amused , or when you are being friendly . 
k4 concept c0:smile:0 0 [ ]
k4 referent k4:p1 0 [ ]
k5 concept c10:face:0 0 [ ]
k5 concept c3:person:1 0 [ ]
k5 concept c8:person:1 0 [ ]
k5 event c5:have:0 0 [ ]
k5 referent k5:e1 0 [ ]
k5 referent k5:p2 0 [ ]
k5 referent k5:x3 0 [ ]
k5 referent k5:x5 0 [ ]
k5 referent k5:x6 0 [ ]
k5 relation c11:on:0 0 [ ]
k5 relation c12:when:0 0 [ ]
k5 relation c4:equality 0 [ ]
k5 relation c9:of:1 0 [ ]
k5 role c6:agent:1 0 [ ]
k5 role c7:theme:-1 0 [ ]
k6 attribute c15:pleased:0 0 [ ]
k6 concept c14:person:1 0 [ ]
k6 referent k6:s1 0 [ ]
k6 referent k6:x7 0 [ ]
k6 role c16:experiencer:1 0 [ ]
k7 attribute c18:amused:0 0 [ ]
k7 concept c17:person:1 0 [ ]
k7 referent k7:s2 0 [ ]
k7 referent k7:x8 0 [ ]
k7 role c19:experiencer:1 0 [ ]
k8 concept c20:person:1 0 [ ]
k8 concept c25:person:1 0 [ ]
k8 concept c27:face:0 0 [ ]
k8 event c22:have:0 0 [ ]
k8 referent k8:e2 0 [ ]
k8 referent k8:p3 0 [ ]
k8 referent k8:x11 0 [ ]
k8 referent k8:x12 0 [ ]
k8 referent k8:x9 0 [ ]
k8 relation c21:equality 0 [ ]
k8 relation c26:of:1 0 [ ]
k8 relation c28:on:0 0 [ ]
k8 relation c29:when:0 0 [ ]
k8 role c23:agent:1 0 [ ]
k8 role c24:theme:-1 0 [ ]
c13:or antecedent k6 0 [ ]
c13:or consequent k7 0 [ ]
c16:experiencer:1 ext k6:x7 0 [ ]
c19:experiencer:1 ext k7:x8 0 [ ]
c2:or antecedent k5 0 [ ]
c2:or consequent k8 0 [ ]
c21:equality ext k8:x10 0 [ ]
c23:agent:1 ext k8:x9 0 [ ]
c26:of:1 ext k8:x11 0 [ ]
c32:experiencer:1 ext k8:p3:x13 0 [ ]
c33:equality ext k4:p1:x2 0 [ ]
c4:equality ext k5:x4 0 [ ]
c6:agent:1 ext k5:x3 0 [ ]
c9:of:1 ext k5:x5 0 [ ]
k4:p1 binary c2:or 0 [ ]
k4:p1 concept c1:expression:0 0 [ ]
k5:p2 binary c13:or 0 [ ]
k8:p3 attribute c31:friendly:0 0 [ ]
k8:p3 concept c30:person:1 0 [ ]
k8:p3 referent k8:p3:s3 0 [ ]
k8:p3 referent k8:p3:x13 0 [ ]
k8:p3 role c32:experiencer:1 0 [ ]
c24:theme:-1 ext k8:e2 0 [ ]
c7:theme:-1 ext k5:e1 0 [ ]
k4 referent k4:x1 1 [ A ]
c0:smile:0 instance k4:x1 2 [ smile ]
k4:p1 relation c33:equality 1 [ is ]
k4:p1 referent k4:p1:x2 1 [ the ]
c33:equality int k4:x1 3 [ ]
c1:expression:0 instance k4:p1:x2 2 [ expression ]
k5 referent k5:x4 1 [ that ]
k8 referent k8:x10 1 [ ]
c21:equality int k4:p1:x2 3 [ ]
c4:equality int k4:p1:x2 4 [ ]
c20:person:1 instance k8:x9 1 [ ]
c23:agent:1 int k8:e2 1 [ ]
c3:person:1 instance k5:x3 1 [ you ]
c6:agent:1 int k5:e1 1 [ ]
c22:have:0 instance k8:e2 2 [ ]
c5:have:0 instance k5:e1 2 [ have ]
c24:theme:-1 int k8:x10 2 [ ]
c7:theme:-1 int k5:x4 2 [ ]
c11:on:0 ext k5:x6 1 [ on ]
c28:on:0 ext k8:x12 1 [ ]
c25:person:1 instance k8:x11 1 [ ]
c8:person:1 instance k5:x5 1 [ your ]
c26:of:1 int k8:x12 2 [ ]
c9:of:1 int k5:x6 2 [ ]
c10:face:0 instance k5:x6 3 [ face ]
c11:on:0 int k5:e1 3 [ ]
c27:face:0 instance k8:x12 3 [ ]
c28:on:0 int k8:e2 3 [ ]
c12:when:0 ext k5:p2 1 [ when ]
c14:person:1 instance k6:x7 1 [ you ]
c16:experiencer:1 int k6:s1 1 [ ]
c17:person:1 instance k7:x8 1 [ ]
c19:experiencer:1 int k7:s2 1 [ ]
k6 surface k6:s1 2 [ are ]
k6:s1 main k5:p2 2 [ ]
c15:pleased:0 arg k6:s1 3 [ pleased ]
k7 surface k7:s2 2 [ or ]
c18:amused:0 arg k7:s2 3 [ amused ]
k7:s2 main k5:p2 3 [ ]
k5 punctuation k5:p2 4 [ , ]
c12:when:0 int k5:e1 4 [ ]
k7 surface k7:s2 4 [ or ]
c29:when:0 ext k8:p3 1 [ when ]
c30:person:1 instance k8:p3:x13 1 [ you ]
c32:experiencer:1 int k8:p3:s3 1 [ ]
k8:p3 surface k8:p3:s3 2 [ are ]
k8:p3 surface k8:p3:s3 3 [ being ]
k8:p3:s3 main k8:p3 2 [ ]
c31:friendly:0 arg k8:p3:s3 4 [ friendly ]
k8 punctuation k8:p3 3 [ . ]
c29:when:0 int k8:e2 4 [ ]


!.
0.4850
0.8419
In former times, serfs were a class of people who had to work on a particular persons land and could not leave without that persons permission.
former JJ times NNS serfs NNS were VBD class NN people NNS who WP had VBD work VB particular JJ persons NNS land NN not RB leave VB persons NNS permission NN 
sem(1,[1001:[tok:'In',pos:'IN',lemma:in,namex:'O'],1002:[tok:former,pos:'JJ',lemma:former,namex:'O'],1003:[tok:times,pos:'NNS',lemma:time,namex:'O'],1004:[tok: (','),pos: (','),lemma: (','),namex:'O'],1005:[tok:serfs,pos:'NNS',lemma:serf,namex:'O'],1006:[tok:were,pos:'VBD',lemma:be,namex:'O'],1007:[tok:a,pos:'DT',lemma:a,namex:'O'],1008:[tok:class,pos:'NN',lemma:class,namex:'O'],1009:[tok:of,pos:'IN',lemma:of,namex:'O'],1010:[tok:people,pos:'NNS',lemma:people,namex:'O'],1011:[tok:who,pos:'WP',lemma:who,namex:'O'],1012:[tok:had,pos:'VBD',lemma:have,namex:'O'],1013:[tok:to,pos:'TO',lemma:to,namex:'O'],1014:[tok:work,pos:'VB',lemma:work,namex:'O'],1015:[tok:on,pos:'IN',lemma:on,namex:'O'],1016:[tok:a,pos:'DT',lemma:a,namex:'O'],1017:[tok:particular,pos:'JJ',lemma:particular,namex:'O'],1018:[tok:persons,pos:'NNS',lemma:person,namex:'O'],1019:[tok:land,pos:'NN',lemma:land,namex:'O'],1020:[tok:and,pos:'CC',lemma:and,namex:'O'],1021:[tok:could,pos:'MD',lemma:could,namex:'O'],1022:[tok:not,pos:'RB',lemma:not,namex:'O'],1023:[tok:leave,pos:'VB',lemma:leave,namex:'O'],1024:[tok:without,pos:'IN',lemma:without,namex:'O'],1025:[tok:that,pos:'DT',lemma:that,namex:'O'],1026:[tok:persons,pos:'NNS',lemma:person,namex:'O'],1027:[tok:permission,pos:'NN',lemma:permission,namex:'O'],1028:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[1025]:C],[[1027]:pred(C,permission,n,0),[]:rel(C,B,of,0),[1026]:pred(B,person,n,0)]),drs([[]:D,[]:E,[]:F,[]:G],[[1001]:rel(F,E,in,0),[1003]:pred(E,time,n,0),[1002]:pred(D,former,a,0),[]:rel(D,E,experiencer,0),[]:prop(F,drs([[1011]:H,[]:I,[1013]:J,[1011]:K,[]:L,[1007]:M],[[1006]:eq(G,M),[1009]:rel(M,L,of,0),[1022]:not(drs([[]:N,[]:O],[[]:prop(N,drs([[]:P],[[1024]:not(drs([],[[1024]:rel(P,C,with,0)])),[]:rel(P,H,agent,0),[1023]:pred(P,leave,v,0)])),[]:rel(O,N,topic,0),[]:rel(O,H,agent,0),[1021]:pred(O,could,v,0)])),[]:eq(L,H),[]:rel(I,J,topic,0),[]:rel(I,K,agent,0),[1012]:pred(I,have,v,0),[]:prop(J,drs([[]:Q,[]:R,[1016]:S,[]:T],[[1015]:rel(T,S,on,0),[1019]:pred(S,land,n,0),[]:rel(S,Q,of,0),[1018]:pred(Q,person,n,0),[1017]:pred(R,particular,a,0),[]:rel(R,S,experiencer,0),[]:rel(T,K,agent,0),[1014]:pred(T,work,v,0)])),[]:eq(L,K),[1010]:pred(L,people,n,0),[1008]:pred(M,class,n,0)])),[1005]:pred(G,serf,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% In former times , serfs were a class of people who had to work on a particular persons land and could not leave without that persons permission . 
k6 attribute c30:former:0 0 [ ]
k6 concept c0:serf:0 0 [ ]
k6 concept c31:time:0 0 [ ]
k6 referent k6:p1 0 [ ]
k6 referent k6:s1 0 [ ]
k6 referent k6:x1 0 [ ]
k6 referent k6:x2 0 [ ]
k6 relation c32:in:0 0 [ ]
k6 role c29:experiencer:-1 0 [ ]
k7 event c17:could:0 0 [ ]
k7 referent k7:e3 0 [ ]
k7 referent k7:p3 0 [ ]
k7 relation c16:equality 0 [ ]
k7 role c19:topic:1 0 [ ]
k7 role c18:agent:-1 0 [ ]
k8 concept c23:person:0 0 [ ]
k8 concept c25:permission:0 0 [ ]
k8 referent k8:x10 0 [ ]
k8 relation c24:of:0 0 [ ]
k8 relation c26:with:0 0 [ ]
c14:topic:1 ext k6:p1:p2 0 [ ]
c15:not scope k7 0 [ ]
c16:equality ext k7:x8 0 [ ]
c19:topic:1 ext k7:p3 0 [ ]
c22:not scope k8 0 [ ]
c24:of:0 ext k8:x10 0 [ ]
c28:equality ext k6:p1:x3 0 [ ]
c29:experiencer:-1 ext k6:s1 0 [ ]
c3:equality ext k6:p1:x5 0 [ ]
c6:experiencer:-1 ext (k6:p1):p2:s2 0 [ ]
c9:of:0 ext (k6:p1):p2:x7 0 [ ]
k6:p1 concept c1:class:0 0 [ ]
k6:p1 concept c2:people:0 0 [ ]
k6:p1 event c12:have:0 0 [ ]
k6:p1 referent k6:p1:e1 0 [ ]
k6:p1 referent k6:p1:x4 0 [ ]
k6:p1 relation c27:of:0 0 [ ]
k6:p1 relation c3:equality 0 [ ]
k6:p1 role c14:topic:1 0 [ ]
k6:p1 role c13:agent:-1 0 [ ]
k6:p1 unary c15:not 0 [ ]
k7:p3 event c20:leave:0 0 [ ]
k7:p3 referent k7:p3:e4 0 [ ]
k7:p3 role c21:agent:-1 0 [ ]
k7:p3 unary c22:not 0 [ ]
k6:p1:p2 attribute c7:particular:0 0 [ ]
k6:p1:p2 concept c10:land:0 0 [ ]
k6:p1:p2 concept c8:person:0 0 [ ]
k6:p1:p2 event c4:work:0 0 [ ]
k6:p1:p2 referent (k6:p1):p2:e2 0 [ ]
k6:p1:p2 referent (k6:p1):p2:s2 0 [ ]
k6:p1:p2 referent (k6:p1):p2:x7 0 [ ]
k6:p1:p2 relation c11:on:0 0 [ ]
k6:p1:p2 relation c9:of:0 0 [ ]
k6:p1:p2 role c6:experiencer:-1 0 [ ]
k6:p1:p2 role c5:agent:-1 0 [ ]
c13:agent:-1 ext k6:p1:e1 0 [ ]
c18:agent:-1 ext k7:e3 0 [ ]
c21:agent:-1 ext k7:p3:e4 0 [ ]
c5:agent:-1 ext (k6:p1):p2:e2 0 [ ]
c32:in:0 ext k6:x2 1 [ In ]
c30:former:0 arg k6:s1 1 [ former ]
c29:experiencer:-1 int k6:x2 2 [ ]
c31:time:0 instance k6:x2 3 [ times ]
c32:in:0 int k6:p1 1 [ ]
k6 punctuation k6:x2 4 [ , ]
c0:serf:0 instance k6:x1 1 [ serfs ]
k6:p1 relation c28:equality 1 [ were ]
k6:p1 referent k6:p1:x3 1 [ a ]
c28:equality int k6:x1 2 [ ]
c1:class:0 instance k6:p1:x3 2 [ class ]
c27:of:0 ext k6:p1:x4 1 [ of ]
c2:people:0 instance k6:p1:x4 2 [ people ]
c27:of:0 int k6:p1:x3 3 [ ]
k7 referent k7:x8 1 [ ]
k6:p1 referent k6:p1:x5 1 [ who ]
c16:equality int k6:p1:x4 3 [ ]
c3:equality int k6:p1:x4 4 [ ]
c12:have:0 instance k6:p1:e1 1 [ had ]
c13:agent:-1 int k6:p1:x5 2 [ ]
k6:p1 referent k6:p1:p2 1 [ to ]
c14:topic:1 int k6:p1:e1 2 [ ]
c4:work:0 instance (k6:p1):p2:e2 1 [ work ]
c5:agent:-1 int k6:p1:x5 3 [ ]
c11:on:0 ext (k6:p1):p2:x6 1 [ on ]
c11:on:0 int (k6:p1):p2:e2 2 [ ]
k6:p1:p2 referent (k6:p1):p2:x6 2 [ a ]
c7:particular:0 arg (k6:p1):p2:s2 1 [ particular ]
c6:experiencer:-1 int (k6:p1):p2:x6 3 [ ]
c8:person:0 instance (k6:p1):p2:x7 1 [ persons ]
c9:of:0 int (k6:p1):p2:x6 4 [ ]
c10:land:0 instance (k6:p1):p2:x6 5 [ land ]
k7 surface k7:e3 1 [ and ]
c18:agent:-1 int k7:x8 2 [ ]
c17:could:0 instance k7:e3 2 [ could ]
k7 function k7:e3 3 [ not ]
c20:leave:0 instance k7:p3:e4 1 [ leave ]
c21:agent:-1 int k7:x8 3 [ ]
c19:topic:1 int k7:e3 4 [ ]
c26:with:0 ext k8:x9 1 [ without ]
k8 referent k8:x9 2 [ that ]
c23:person:0 instance k8:x10 1 [ persons ]
c24:of:0 int k8:x9 3 [ ]
c25:permission:0 instance k8:x9 4 [ permission ]
c26:with:0 int k7:p3:e4 2 [ ]
k8 punctuation k8:x9 5 [ . ]


!.
A slave is someone who is the property of another person and has to work for that person.
slave NN who WP property NN person NN work VB person NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:slave,pos:'NN',lemma:slave,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:someone,pos:'DT',lemma:someone,namex:'O'],1005:[tok:who,pos:'WP',lemma:who,namex:'O'],1006:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1007:[tok:the,pos:'DT',lemma:the,namex:'O'],1008:[tok:property,pos:'NN',lemma:property,namex:'O'],1009:[tok:of,pos:'IN',lemma:of,namex:'O'],1010:[tok:another,pos:'DT',lemma:another,namex:'O'],1011:[tok:person,pos:'NN',lemma:person,namex:'O'],1012:[tok:and,pos:'CC',lemma:and,namex:'O'],1013:[tok:has,pos:'VBZ',lemma:have,namex:'O'],1014:[tok:to,pos:'TO',lemma:to,namex:'O'],1015:[tok:work,pos:'VB',lemma:work,namex:'O'],1016:[tok:for,pos:'IN',lemma:for,namex:'O'],1017:[tok:that,pos:'DT',lemma:that,namex:'O'],1018:[tok:person,pos:'NN',lemma:person,namex:'O'],1019:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[1017]:B,[]:C,[1007]:D],[[1018]:pred(B,person,n,0),[1011]:pred(C,person,n,0),[1008]:pred(D,property,n,0)]),drs([[]:E,[1001]:F],[[]:prop(E,drs([[]:G,[1014]:H,[1005]:I,[]:J,[1005]:K,[]:L],[[1003]:eq(F,L),[]:rel(G,H,topic,0),[]:rel(G,I,agent,0),[1013]:pred(G,have,v,0),[]:prop(H,drs([[]:M],[[1016]:rel(M,B,for,0),[]:rel(M,I,agent,0),[1015]:pred(M,work,v,0)])),[]:eq(L,I),[]:prop(J,drs([[1010]:N],[[1006]:eq(K,D),[1009]:rel(D,N,of,0),[1011]:pred(N,person,n,0),[]:not(drs([],[[]:eq(N,C)]))])),[]:eq(L,K),[1004]:pred(L,person,n,1)])),[1002]:pred(F,slave,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A slave is someone who is the property of another person and has to work for that person . 
k4 concept c0:slave:0 0 [ ]
k4 referent k4:p1 0 [ ]
k5 relation c6:equality 0 [ ]
c10:equality ext k4:p1:x4 0 [ ]
c17:topic:1 ext k4:p1:p3 0 [ ]
c18:equality ext k4:p1:x2 0 [ ]
c2:equality ext k4:p1:x3 0 [ ]
c5:not scope k5 0 [ ]
c6:equality ext (k4:p1):p2:x6 0 [ ]
c9:equality ext (k4:p1):p2:x5 0 [ ]
k4:p1 concept c1:person:1 0 [ ]
k4:p1 event c15:have:0 0 [ ]
k4:p1 referent k4:p1:e1 0 [ ]
k4:p1 referent k4:p1:p2 0 [ ]
k4:p1 referent k4:p1:x2 0 [ ]
k4:p1 relation c10:equality 0 [ ]
k4:p1 relation c2:equality 0 [ ]
k4:p1 role c17:topic:1 0 [ ]
k4:p1 role c16:agent:-1 0 [ ]
k4:p1:p2 concept c3:property:0 0 [ ]
k4:p1:p2 concept c4:person:0 0 [ ]
k4:p1:p2 concept c7:person:0 0 [ ]
k4:p1:p2 referent (k4:p1):p2:x6 0 [ ]
k4:p1:p2 relation c8:of:0 0 [ ]
k4:p1:p2 unary c5:not 0 [ ]
k4:p1:p3 concept c13:person:0 0 [ ]
k4:p1:p3 event c11:work:0 0 [ ]
k4:p1:p3 referent (k4:p1):p3:e2 0 [ ]
k4:p1:p3 relation c14:for:0 0 [ ]
k4:p1:p3 role c12:agent:-1 0 [ ]
c12:agent:-1 ext (k4:p1):p3:e2 0 [ ]
c16:agent:-1 ext k4:p1:e1 0 [ ]
k4 referent k4:x1 1 [ A ]
c0:slave:0 instance k4:x1 2 [ slave ]
k4:p1 relation c18:equality 1 [ is ]
c1:person:1 instance k4:p1:x2 1 [ someone ]
c18:equality int k4:x1 3 [ ]
k4:p1 referent k4:p1:x3 1 [ who ]
k4:p1 referent k4:p1:x4 1 [ ]
c10:equality int k4:p1:x2 2 [ ]
c2:equality int k4:p1:x2 3 [ ]
k4:p1:p2 relation c9:equality 1 [ is ]
k4:p1:p2 referent (k4:p1):p2:x5 1 [ the ]
c9:equality int k4:p1:x3 2 [ ]
c3:property:0 instance (k4:p1):p2:x5 2 [ property ]
c8:of:0 ext (k4:p1):p2:x7 1 [ of ]
k4:p1:p2 referent (k4:p1):p2:x7 2 [ another ]
c8:of:0 int (k4:p1):p2:x5 3 [ ]
c4:person:0 instance (k4:p1):p2:x6 1 [ person ]
c6:equality int (k4:p1):p2:x7 3 [ ]
c7:person:0 instance (k4:p1):p2:x7 4 [ ]
k4:p1 surface k4:p1:e1 1 [ and ]
c16:agent:-1 int k4:p1:x4 2 [ ]
c15:have:0 instance k4:p1:e1 2 [ has ]
k4:p1 referent k4:p1:p3 1 [ to ]
c17:topic:1 int k4:p1:e1 3 [ ]
c11:work:0 instance (k4:p1):p3:e2 1 [ work ]
c12:agent:-1 int k4:p1:x4 3 [ ]
c14:for:0 ext (k4:p1):p3:x8 1 [ for ]
k4:p1:p3 referent (k4:p1):p3:x8 2 [ that ]
c13:person:0 instance (k4:p1):p3:x8 3 [ person ]
c14:for:0 int (k4:p1):p3:e2 2 [ ]
k4:p1:p3 punctuation (k4:p1):p3:x8 4 [ . ]


!.
0.4825
0.8896
When you make a journey, you travel from one place to another.
'When' WRB you PRP make VBP journey NN you PRP travel VBP place NN 
sem(1,[1001:[tok:'When',pos:'WRB',lemma:when,namex:'O'],1002:[tok:you,pos:'PRP',lemma:you,namex:'O'],1003:[tok:make,pos:'VBP',lemma:make,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:journey,pos:'NN',lemma:journey,namex:'O'],1006:[tok: (','),pos: (','),lemma: (','),namex:'O'],1007:[tok:you,pos:'PRP',lemma:you,namex:'O'],1008:[tok:travel,pos:'VBP',lemma:travel,namex:'O'],1009:[tok:from,pos:'IN',lemma:from,namex:'O'],1010:[tok:one,pos:'CD',lemma:one,namex:'O'],1011:[tok:place,pos:'NN',lemma:place,namex:'O'],1012:[tok:to,pos:'TO',lemma:to,namex:'O'],1013:[tok:another,pos:'DT',lemma:another,namex:'O'],1014:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[]:C],[[1007]:pred(B,person,n,1),[1002]:pred(C,person,n,1)]),drs([[]:D,[]:E,[]:F],[[]:prop(D,drs([[]:G,[]:H,[]:I],[[1009]:rel(I,G,from,0),[1011]:pred(G,place,n,0),[1010]:card(G,1,eq),[1012]:rel(I,H,to,0),[1013]:pred(H,thing,n,12),[]:rel(I,B,agent,0),[1008]:pred(I,travel,v,0)])),[]:prop(E,drs([[]:J,[1004]:K],[[]:rel(J,K,theme,0),[]:rel(J,C,agent,0),[1003]:pred(J,make,v,0),[1005]:pred(K,journey,n,0)])),[]:prop(F,drs([],[[1001]:rel(E,D,when,0)]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% When you make a journey , you travel from one place to another . 
k4 referent k4:p1 0 [ ]
k4 referent k4:p2 0 [ ]
k4 referent k4:p3 0 [ ]
c4:agent:1 ext k4:p2:x1 0 [ ]
c5:theme:1 ext k4:p2:x2 0 [ ]
c8:agent:1 ext k4:p3:x3 0 [ ]
k4:p1 relation c0:when:0 0 [ ]
k4:p2 concept c1:person:1 0 [ ]
k4:p2 concept c2:journey:0 0 [ ]
k4:p2 event c3:make:0 0 [ ]
k4:p2 referent k4:p2:e1 0 [ ]
k4:p2 referent k4:p2:x1 0 [ ]
k4:p2 role c4:agent:1 0 [ ]
k4:p2 role c5:theme:1 0 [ ]
k4:p3 cardinality c11:1:eq 0 [ ]
k4:p3 concept c12:place:0 0 [ ]
k4:p3 concept c6:person:1 0 [ ]
k4:p3 concept c9:thing:12 0 [ ]
k4:p3 event c7:travel:0 0 [ ]
k4:p3 referent k4:p3:e2 0 [ ]
k4:p3 referent k4:p3:x3 0 [ ]
k4:p3 referent k4:p3:x4 0 [ ]
k4:p3 referent k4:p3:x5 0 [ ]
k4:p3 relation c10:to:0 0 [ ]
k4:p3 relation c13:from:0 0 [ ]
k4:p3 role c8:agent:1 0 [ ]
c0:when:0 ext k4:p3 1 [ When ]
c1:person:1 instance k4:p2:x1 1 [ you ]
c4:agent:1 int k4:p2:e1 1 [ ]
k4:p2:e1 main k4:p2 1 [ ]
c3:make:0 instance k4:p2:e1 2 [ make ]
k4:p2 referent k4:p2:x2 1 [ a ]
c2:journey:0 instance k4:p2:x2 2 [ journey ]
c5:theme:1 int k4:p2:e1 3 [ ]
k4:p2 punctuation k4:p2:x2 3 [ , ]
c6:person:1 instance k4:p3:x3 1 [ you ]
c8:agent:1 int k4:p3:e2 1 [ ]
c0:when:0 int k4:p2 2 [ ]
c7:travel:0 instance k4:p3:e2 2 [ travel ]
k4:p3:e2 main k4:p3 2 [ ]
c13:from:0 ext k4:p3:x5 1 [ from ]
c11:1:eq arg k4:p3:x5 2 [ one ]
c13:from:0 int k4:p3:e2 3 [ ]
c12:place:0 instance k4:p3:x5 3 [ place ]
c10:to:0 ext k4:p3:x4 1 [ to ]
c9:thing:12 instance k4:p3:x4 2 [ another ]
k4:p3 punctuation k4:p3:x4 3 [ . ]
c10:to:0 int k4:p3:e2 4 [ ]


!.
A voyage is a long journey on a ship or in a spacecraft.
voyage NN long JJ journey NN ship NN spacecraft NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:voyage,pos:'NN',lemma:voyage,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:long,pos:'JJ',lemma:long,namex:'O'],1006:[tok:journey,pos:'NN',lemma:journey,namex:'O'],1007:[tok:on,pos:'IN',lemma:on,namex:'O'],1008:[tok:a,pos:'DT',lemma:a,namex:'O'],1009:[tok:ship,pos:'NN',lemma:ship,namex:'O'],1010:[tok:or,pos:'CC',lemma:or,namex:'O'],1011:[tok:in,pos:'IN',lemma:in,namex:'O'],1012:[tok:a,pos:'DT',lemma:a,namex:'O'],1013:[tok:spacecraft,pos:'NN',lemma:spacecraft,namex:'O'],1014:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([],[[1010]:or(drs([[1008]:B,[]:C,[1001]:D],[[1007]:rel(C,B,on,0),[1009]:pred(B,ship,n,0),[]:prop(C,drs([[]:E,[1004]:F],[[1003]:eq(D,F),[1006]:pred(F,journey,n,0),[1005]:pred(E,long,a,0),[]:rel(E,F,experiencer,0)])),[1002]:pred(D,voyage,n,0)]),drs([[1012]:G,[]:H,[1001]:I],[[1011]:rel(H,G,in,0),[1013]:pred(G,spacecraft,n,0),[]:prop(H,drs([[]:J,[1004]:K],[[1003]:eq(I,K),[1006]:pred(K,journey,n,0),[1005]:pred(J,long,a,0),[]:rel(J,K,experiencer,0)])),[1002]:pred(I,voyage,n,0)]))])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A voyage is a long journey on a ship or in a spacecraft . 
k2 binary c0:or 0 [ ]
k3 concept c1:voyage:0 0 [ ]
k3 concept c6:ship:0 0 [ ]
k3 referent k3:p1 0 [ ]
k3 relation c7:on:0 0 [ ]
k4 concept c13:spacecraft:0 0 [ ]
k4 concept c8:voyage:0 0 [ ]
k4 referent k4:p2 0 [ ]
k4 relation c14:in:0 0 [ ]
c0:or antecedent k3 0 [ ]
c0:or consequent k4 0 [ ]
c12:equality ext k4:p2:x6 0 [ ]
c2:experiencer:-1 ext k3:p1:s1 0 [ ]
c5:equality ext k3:p1:x3 0 [ ]
c9:experiencer:-1 ext k4:p2:s2 0 [ ]
k3:p1 attribute c3:long:0 0 [ ]
k3:p1 concept c4:journey:0 0 [ ]
k3:p1 referent k3:p1:s1 0 [ ]
k3:p1 role c2:experiencer:-1 0 [ ]
k4:p2 attribute c10:long:0 0 [ ]
k4:p2 concept c11:journey:0 0 [ ]
k4:p2 referent k4:p2:s2 0 [ ]
k4:p2 role c9:experiencer:-1 0 [ ]
k3 referent k3:x1 1 [ A ]
k4 referent k4:x4 1 [ ]
c1:voyage:0 instance k3:x1 2 [ voyage ]
c8:voyage:0 instance k4:x4 2 [ ]
k3:p1 relation c5:equality 1 [ is ]
k4:p2 relation c12:equality 1 [ ]
k3:p1 referent k3:p1:x3 1 [ a ]
k4:p2 referent k4:p2:x6 1 [ ]
c12:equality int k4:x4 3 [ ]
c5:equality int k3:x1 3 [ ]
c10:long:0 arg k4:p2:s2 1 [ ]
c3:long:0 arg k3:p1:s1 1 [ long ]
c2:experiencer:-1 int k3:p1:x3 2 [ ]
c11:journey:0 instance k4:p2:x6 2 [ ]
c4:journey:0 instance k3:p1:x3 3 [ journey ]
c7:on:0 ext k3:x2 1 [ on ]
c7:on:0 int k3:p1 1 [ ]
k3 referent k3:x2 2 [ a ]
c6:ship:0 instance k3:x2 3 [ ship ]
k4:p2 surface k4:p2:s2 2 [ or ]
c9:experiencer:-1 int k4:p2:x6 3 [ ]
c14:in:0 ext k4:x5 1 [ in ]
k4 referent k4:x5 2 [ a ]
c13:spacecraft:0 instance k4:x5 3 [ spacecraft ]
c14:in:0 int k4:p2 1 [ ]
k4 punctuation k4:x5 4 [ . ]


!.
0.3600
0.7826
An autograph is the signature of someone famous which is specially written for a fan to keep.
autograph NN signature NN famous JJ which WDT specially RB written VBN fan NN keep VB 
sem(1,[1001:[tok:'An',pos:'DT',lemma:an,namex:'O'],1002:[tok:autograph,pos:'NN',lemma:autograph,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:the,pos:'DT',lemma:the,namex:'O'],1005:[tok:signature,pos:'NN',lemma:signature,namex:'O'],1006:[tok:of,pos:'IN',lemma:of,namex:'O'],1007:[tok:someone,pos:'DT',lemma:someone,namex:'O'],1008:[tok:famous,pos:'JJ',lemma:famous,namex:'O'],1009:[tok:which,pos:'WDT',lemma:which,namex:'O'],1010:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1011:[tok:specially,pos:'RB',lemma:specially,namex:'O'],1012:[tok:written,pos:'VBN',lemma:write,namex:'O'],1013:[tok:for,pos:'IN',lemma:for,namex:'O'],1014:[tok:a,pos:'DT',lemma:a,namex:'O'],1015:[tok:fan,pos:'NN',lemma:fan,namex:'O'],1016:[tok:to,pos:'TO',lemma:to,namex:'O'],1017:[tok:keep,pos:'VB',lemma:keep,namex:'O'],1018:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[1004]:B],[[1005]:pred(B,signature,n,0)]),drs([[]:C,[1001]:D],[[]:prop(C,drs([[1016]:E,[1014]:F,[]:G,[1009]:H,[]:I,[]:J,[]:K],[[1003]:eq(D,B),[1006]:rel(B,K,of,0),[1011]:pred(G,specially,r,0),[1013]:rel(G,F,for,0),[]:prop(E,drs([[]:L,[]:M,[]:N],[[]:rel(L,M,theme,0),[]:rel(L,N,agent,0),[1017]:pred(L,keep,v,0),[]:pred(M,thing,n,12),[]:eq(F,N)])),[1015]:pred(F,fan,n,0),[]:rel(G,H,theme,0),[1012]:pred(G,write,v,0),[]:eq(K,H),[]:rel(I,J,experiencer,0),[1008]:pred(I,famous,a,0),[]:eq(K,J),[1007]:pred(K,person,n,1)])),[1002]:pred(D,autograph,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% An autograph is the signature of someone famous which is specially written for a fan to keep . 
k4 concept c0:autograph:0 0 [ ]
k4 referent k4:p1 0 [ ]
c10:equality ext (k4:p1):p2:x7 0 [ ]
c11:thing:12 instance (k4:p1):p2:x8 0 [ ]
c14:theme:1 ext (k4:p1):p2:x8 0 [ ]
c14:theme:1 int (k4:p1):p2:e2 0 [ ]
c18:equality ext k4:p1:x2 0 [ ]
c3:equality ext k4:p1:x4 0 [ ]
c6:equality ext k4:p1:x5 0 [ ]
k4:p1 attribute c16:specially:0 0 [ ]
k4:p1 attribute c4:famous:0 0 [ ]
k4:p1 concept c1:signature:0 0 [ ]
k4:p1 concept c2:person:1 0 [ ]
k4:p1 concept c9:fan:0 0 [ ]
k4:p1 event c7:write:0 0 [ ]
k4:p1 referent k4:p1:e1 0 [ ]
k4:p1 referent k4:p1:s1 0 [ ]
k4:p1 referent k4:p1:x3 0 [ ]
k4:p1 referent k4:p1:x4 0 [ ]
k4:p1 relation c15:for:0 0 [ ]
k4:p1 relation c17:of:0 0 [ ]
k4:p1 relation c3:equality 0 [ ]
k4:p1 relation c6:equality 0 [ ]
k4:p1 role c5:experiencer:-1 0 [ ]
k4:p1 role c8:theme:-1 0 [ ]
k4:p1:p2 concept c11:thing:12 0 [ ]
k4:p1:p2 event c12:keep:0 0 [ ]
k4:p1:p2 referent (k4:p1):p2:e2 0 [ ]
k4:p1:p2 referent (k4:p1):p2:x7 0 [ ]
k4:p1:p2 referent (k4:p1):p2:x8 0 [ ]
k4:p1:p2 relation c10:equality 0 [ ]
k4:p1:p2 role c14:theme:1 0 [ ]
k4:p1:p2 role c13:agent:-1 0 [ ]
c13:agent:-1 ext (k4:p1):p2:e2 0 [ ]
c5:experiencer:-1 ext k4:p1:s1 0 [ ]
c8:theme:-1 ext k4:p1:e1 0 [ ]
k4 referent k4:x1 1 [ An ]
c0:autograph:0 instance k4:x1 2 [ autograph ]
k4:p1 relation c18:equality 1 [ is ]
k4:p1 referent k4:p1:x2 1 [ the ]
c18:equality int k4:x1 3 [ ]
c1:signature:0 instance k4:p1:x2 2 [ signature ]
c17:of:0 ext k4:p1:x3 1 [ of ]
c2:person:1 instance k4:p1:x3 2 [ someone ]
c17:of:0 int k4:p1:x2 3 [ ]
c4:famous:0 arg k4:p1:s1 1 [ famous ]
c5:experiencer:-1 int k4:p1:x4 1 [ ]
c3:equality int k4:p1:x3 3 [ ]
k4:p1 referent k4:p1:x5 1 [ which ]
c6:equality int k4:p1:x3 4 [ ]
k4:p1 surface k4:p1:e1 1 [ is ]
c8:theme:-1 int k4:p1:x5 2 [ ]
c16:specially:0 arg k4:p1:e1 2 [ specially ]
c7:write:0 instance k4:p1:e1 3 [ written ]
c15:for:0 ext k4:p1:x6 1 [ for ]
k4:p1 referent k4:p1:x6 2 [ a ]
c15:for:0 int k4:p1:e1 4 [ ]
c9:fan:0 instance k4:p1:x6 3 [ fan ]
k4:p1 referent k4:p1:p2 1 [ to ]
c12:keep:0 instance (k4:p1):p2:e2 1 [ keep ]
c13:agent:-1 int (k4:p1):p2:x7 1 [ ]
k4:p1:p2 punctuation (k4:p1):p2:e2 2 [ . ]
c10:equality int k4:p1:x6 4 [ ]


!.
Your signature is your name, written in your own characteristic way, often at the end of a document to indicate that you wrote the document or that you agree with what it says.
'Your' PRP$ signature NN your PRP$ name NN written VBN your PRP$ own JJ characteristic JJ way NN often RB end NN document NN indicate VB you PRP wrote VBD document NN you PRP agree VBP what WP it PRP 
sem(1,[1001:[tok:'Your',pos:'PRP$',lemma:your,namex:'O'],1002:[tok:signature,pos:'NN',lemma:signature,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:your,pos:'PRP$',lemma:your,namex:'O'],1005:[tok:name,pos:'NN',lemma:name,namex:'O'],1006:[tok: (','),pos: (','),lemma: (','),namex:'O'],1007:[tok:written,pos:'VBN',lemma:write,namex:'O'],1008:[tok:in,pos:'IN',lemma:in,namex:'O'],1009:[tok:your,pos:'PRP$',lemma:your,namex:'O'],1010:[tok:own,pos:'JJ',lemma:own,namex:'O'],1011:[tok:characteristic,pos:'JJ',lemma:characteristic,namex:'O'],1012:[tok:way,pos:'NN',lemma:way,namex:'O'],1013:[tok: (','),pos: (','),lemma: (','),namex:'O'],1014:[tok:often,pos:'RB',lemma:often,namex:'O'],1015:[tok:at,pos:'IN',lemma:at,namex:'O'],1016:[tok:the,pos:'DT',lemma:the,namex:'O'],1017:[tok:end,pos:'NN',lemma:end,namex:'O'],1018:[tok:of,pos:'IN',lemma:of,namex:'O'],1019:[tok:a,pos:'DT',lemma:a,namex:'O'],1020:[tok:document,pos:'NN',lemma:document,namex:'O'],1021:[tok:to,pos:'TO',lemma:to,namex:'O'],1022:[tok:indicate,pos:'VB',lemma:indicate,namex:'O'],1023:[tok:that,pos:'IN',lemma:that,namex:'O'],1024:[tok:you,pos:'PRP',lemma:you,namex:'O'],1025:[tok:wrote,pos:'VBD',lemma:write,namex:'O'],1026:[tok:the,pos:'DT',lemma:the,namex:'O'],1027:[tok:document,pos:'NN',lemma:document,namex:'O'],1028:[tok:or,pos:'CC',lemma:or,namex:'O'],1029:[tok:that,pos:'IN',lemma:that,namex:'O'],1030:[tok:you,pos:'PRP',lemma:you,namex:'O'],1031:[tok:agree,pos:'VBP',lemma:agree,namex:'O'],1032:[tok:with,pos:'IN',lemma:with,namex:'O'],1033:[tok:what,pos:'WP',lemma:what,namex:'O'],1034:[tok:it,pos:'PRP',lemma:it,namex:'O'],1035:[tok:says,pos:'VBZ',lemma:say,namex:'O'],1036:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[]:C,[1026]:D,[]:E,[1016]:F,[]:G,[]:H,[]:I,[]:J,[]:K,[]:L,[]:M,[]:N],[[1034]:pred(B,thing,n,12),[1030]:pred(C,person,n,1),[1027]:pred(D,document,n,0),[1024]:pred(E,person,n,1),[1017]:pred(F,end,n,0),[1012]:pred(I,way,n,0),[1011]:pred(G,characteristic,a,0),[]:rel(G,I,experiencer,0),[1010]:pred(H,own,a,0),[]:rel(H,I,experiencer,0),[]:rel(I,J,of,1),[1009]:pred(J,person,n,1),[1005]:pred(K,name,n,0),[]:rel(K,L,of,1),[1004]:pred(L,person,n,1),[1002]:pred(M,signature,n,0),[]:rel(M,N,of,1),[1001]:pred(N,person,n,1)]),drs([[]:O],[[]:prop(O,drs([[1021]:P,[1019]:Q,[]:R,[]:S],[[1003]:eq(M,K),[1014]:pred(K,often,n,0),[1015]:rel(K,F,at,0),[1018]:rel(F,Q,of,0),[]:prop(P,drs([[]:T],[[1028]:or(drs([[]:U,[1023]:V],[[]:rel(U,V,topic,0),[]:rel(U,T,agent,0),[1022]:pred(U,indicate,v,0),[]:prop(V,drs([[]:W],[[]:rel(W,D,theme,0),[]:rel(W,E,agent,0),[1025]:pred(W,write,v,0)]))]),drs([[]:X,[1029]:Y],[[]:rel(X,Y,topic,0),[]:rel(X,T,agent,0),[1022]:pred(X,indicate,v,0),[]:prop(Y,drs([[]:Z],[[]:duplex(whq,drs([[]:A1],[[1033]:pred(A1,thing,n,12)]),A1,drs([[]:B1],[[1032]:rel(Z,A1,with,0),[]:rel(B1,A1,theme,0),[]:rel(B1,B,agent,0),[1035]:pred(B1,say,v,0)])),[]:rel(Z,C,agent,0),[1031]:pred(Z,agree,v,0)]))])),[]:eq(Q,T)])),[1020]:pred(Q,document,n,0),[1008]:rel(R,I,in,0),[]:rel(R,S,theme,0),[1007]:pred(R,write,v,0),[]:eq(K,S)]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% Your signature is your name , written in your own characteristic way , often at the end of a document to indicate that you wrote the document or that you agree with what it says . 
k10 event c39:indicate:0 0 [ ]
k10 referent k10:e4 0 [ ]
k10 role c41:topic:1 0 [ ]
k10 role c40:agent:-1 0 [ ]
k11 concept c33:thing:12 0 [ ]
k11 referent k11:x14 0 [ ]
k12 concept c34:thing:12 0 [ ]
k12 event c35:say:0 0 [ ]
k12 referent k12:e6 0 [ ]
k12 referent k12:x15 0 [ ]
k12 relation c38:with:0 0 [ ]
k12 role c36:agent:1 0 [ ]
k12 role c37:theme:1 0 [ ]
k8 concept c0:person:1 0 [ ]
k8 concept c2:signature:0 0 [ ]
k8 referent k8:p1 0 [ ]
k8 referent k8:x1 0 [ ]
k8 referent k8:x2 0 [ ]
k8 relation c1:of:1 0 [ ]
k9 event c26:indicate:0 0 [ ]
k9 referent k9:e2 0 [ ]
k9 role c28:topic:1 0 [ ]
k9 role c27:agent:-1 0 [ ]
c1:of:1 ext k8:x1 0 [ ]
c10:of:1 ext k8:p1:x6 0 [ ]
c11:experiencer:-1 ext k8:p1:s1 0 [ ]
c13:experiencer:-1 ext k8:p1:s2 0 [ ]
c19:equality ext (k8:p1):p2:x10 0 [ ]
c20:or antecedent k9 0 [ ]
c20:or consequent k10 0 [ ]
c24:agent:1 ext k9:p3:x11 0 [ ]
c25:theme:1 ext k9:p3:x12 0 [ ]
c28:topic:1 ext k9:p3 0 [ ]
c31:agent:1 ext k10:p4:x13 0 [ ]
c32:whq antecedent k11 0 [ ]
c32:whq consequent k12 0 [ ]
c36:agent:1 ext k12:x15 0 [ ]
c37:theme:1 ext k11:x14 0 [ ]
c4:of:1 ext k8:p1:x3 0 [ ]
c41:topic:1 ext k10:p4 0 [ ]
c45:equality ext k8:p1:x4 0 [ ]
c6:equality ext k8:p1:x5 0 [ ]
k10:p4 concept c29:person:1 0 [ ]
k10:p4 duplex c32:whq 0 [ ]
k10:p4 event c30:agree:0 0 [ ]
k10:p4 referent k10:p4:e5 0 [ ]
k10:p4 referent k10:p4:x13 0 [ ]
k10:p4 role c31:agent:1 0 [ ]
k8:p1 attribute c12:own:0 0 [ ]
k8:p1 attribute c14:characteristic:0 0 [ ]
k8:p1 concept c15:way:0 0 [ ]
k8:p1 concept c17:end:0 0 [ ]
k8:p1 concept c18:document:0 0 [ ]
k8:p1 concept c3:person:1 0 [ ]
k8:p1 concept c44:often:0 0 [ ]
k8:p1 concept c5:name:0 0 [ ]
k8:p1 concept c9:person:1 0 [ ]
k8:p1 event c7:write:0 0 [ ]
k8:p1 referent k8:p1:e1 0 [ ]
k8:p1 referent k8:p1:s1 0 [ ]
k8:p1 referent k8:p1:s2 0 [ ]
k8:p1 referent k8:p1:x3 0 [ ]
k8:p1 referent k8:p1:x4 0 [ ]
k8:p1 referent k8:p1:x5 0 [ ]
k8:p1 referent k8:p1:x6 0 [ ]
k8:p1 referent k8:p1:x7 0 [ ]
k8:p1 relation c10:of:1 0 [ ]
k8:p1 relation c16:in:0 0 [ ]
k8:p1 relation c4:of:1 0 [ ]
k8:p1 relation c42:of:0 0 [ ]
k8:p1 relation c43:at:0 0 [ ]
k8:p1 relation c6:equality 0 [ ]
k8:p1 role c11:experiencer:-1 0 [ ]
k8:p1 role c13:experiencer:-1 0 [ ]
k8:p1 role c8:theme:-1 0 [ ]
k9:p3 concept c21:person:1 0 [ ]
k9:p3 concept c22:document:0 0 [ ]
k9:p3 event c23:write:0 0 [ ]
k9:p3 referent k9:p3:e3 0 [ ]
k9:p3 referent k9:p3:x11 0 [ ]
k9:p3 role c24:agent:1 0 [ ]
k9:p3 role c25:theme:1 0 [ ]
k8:p1:p2 binary c20:or 0 [ ]
k8:p1:p2 referent (k8:p1):p2:x10 0 [ ]
k8:p1:p2 relation c19:equality 0 [ ]
c27:agent:-1 ext k9:e2 0 [ ]
c40:agent:-1 ext k10:e4 0 [ ]
c8:theme:-1 ext k8:p1:e1 0 [ ]
c0:person:1 instance k8:x1 1 [ Your ]
c1:of:1 int k8:x2 1 [ ]
c2:signature:0 instance k8:x2 2 [ signature ]
k8:p1 relation c45:equality 1 [ is ]
c3:person:1 instance k8:p1:x3 1 [ your ]
c4:of:1 int k8:p1:x4 1 [ ]
c5:name:0 instance k8:p1:x4 2 [ name ]
c45:equality int k8:x2 3 [ ]
k8:p1 punctuation k8:p1:x4 3 [ , ]
c7:write:0 instance k8:p1:e1 1 [ written ]
c8:theme:-1 int k8:p1:x5 1 [ ]
c6:equality int k8:p1:x4 4 [ ]
c16:in:0 ext k8:p1:x7 1 [ in ]
c9:person:1 instance k8:p1:x6 1 [ your ]
c10:of:1 int k8:p1:x7 2 [ ]
c12:own:0 arg k8:p1:s1 1 [ own ]
c11:experiencer:-1 int k8:p1:x7 3 [ ]
c14:characteristic:0 arg k8:p1:s2 1 [ characteristic ]
c13:experiencer:-1 int k8:p1:x7 4 [ ]
c15:way:0 instance k8:p1:x7 5 [ way ]
c16:in:0 int k8:p1:e1 2 [ ]
k8:p1 punctuation k8:p1:x7 6 [ , ]
c44:often:0 instance k8:p1:x4 5 [ often ]
c43:at:0 ext k8:p1:x8 1 [ at ]
k8:p1 referent k8:p1:x8 2 [ the ]
c43:at:0 int k8:p1:x4 6 [ ]
c17:end:0 instance k8:p1:x8 3 [ end ]
c42:of:0 ext k8:p1:x9 1 [ of ]
k8:p1 referent k8:p1:x9 2 [ a ]
c42:of:0 int k8:p1:x8 4 [ ]
c18:document:0 instance k8:p1:x9 3 [ document ]
k8:p1 referent k8:p1:p2 1 [ to ]
c26:indicate:0 instance k9:e2 1 [ indicate ]
c39:indicate:0 instance k10:e4 1 [ ]
c27:agent:-1 int (k8:p1):p2:x10 1 [ ]
c40:agent:-1 int (k8:p1):p2:x10 2 [ ]
c19:equality int k8:p1:x9 4 [ ]
k9 referent k9:p3 1 [ that ]
c28:topic:1 int k9:e2 2 [ ]
c21:person:1 instance k9:p3:x11 1 [ you ]
c24:agent:1 int k9:p3:e3 1 [ ]
c23:write:0 instance k9:p3:e3 2 [ wrote ]
k9:p3:e3 main k9:p3 2 [ ]
k9:p3 referent k9:p3:x12 1 [ the ]
c25:theme:1 int k9:p3:e3 3 [ ]
c22:document:0 instance k9:p3:x12 2 [ document ]
k10:p4 surface k10:p4:e5 1 [ or ]
k10 referent k10:p4 1 [ that ]
c41:topic:1 int k10:e4 2 [ ]
c29:person:1 instance k10:p4:x13 1 [ you ]
c31:agent:1 int k10:p4:e5 2 [ ]
k10:p4:e5 main k10:p4 2 [ ]
c30:agree:0 instance k10:p4:e5 3 [ agree ]
c37:theme:1 int k12:e6 1 [ ]
c38:with:0 ext k11:x14 1 [ with ]
c38:with:0 int k10:p4:e5 4 [ ]
c33:thing:12 instance k11:x14 2 [ what ]
c34:thing:12 instance k12:x15 1 [ it ]
c36:agent:1 int k12:e6 2 [ ]
k12:e6 main k12 1 [ ]
c35:say:0 instance k12:e6 3 [ says ]
k12 punctuation k12:e6 4 [ . ]


!.
0.4050
0.3146
The coast is an area of land that is next to the sea.
coast NN area NN land NN that WDT next JJ sea NN 
sem(1,[1001:[tok:'The',pos:'DT',lemma:the,namex:'O'],1002:[tok:coast,pos:'NN',lemma:coast,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:an,pos:'DT',lemma:an,namex:'O'],1005:[tok:area,pos:'NN',lemma:area,namex:'O'],1006:[tok:of,pos:'IN',lemma:of,namex:'O'],1007:[tok:land,pos:'NN',lemma:land,namex:'O'],1008:[tok:that,pos:'WDT',lemma:that,namex:'O'],1009:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1010:[tok:next,pos:'JJ',lemma:next,namex:'O'],1011:[tok:to,pos:'TO',lemma:to,namex:'O'],1012:[tok:the,pos:'DT',lemma:the,namex:'O'],1013:[tok:sea,pos:'NN',lemma:sea,namex:'O'],1014:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[1012]:B,[1001]:C],[[1013]:pred(B,sea,n,0),[1002]:pred(C,coast,n,0)]),drs([[]:D],[[]:prop(D,drs([[]:E,[1008]:F,[]:G,[1004]:H],[[1003]:eq(C,H),[1006]:rel(H,G,of,0),[1011]:rel(E,B,to,0),[]:rel(E,F,experiencer,0),[1010]:pred(E,next,a,0),[]:eq(G,F),[1007]:pred(G,land,n,0),[1005]:pred(H,area,n,0)]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% The coast is an area of land that is next to the sea . 
k2 concept c0:coast:0 0 [ ]
k2 referent k2:p1 0 [ ]
c3:equality ext k2:p1:x4 0 [ ]
c9:equality ext k2:p1:x2 0 [ ]
k2:p1 attribute c4:next:0 0 [ ]
k2:p1 concept c1:area:0 0 [ ]
k2:p1 concept c2:land:0 0 [ ]
k2:p1 concept c6:sea:0 0 [ ]
k2:p1 referent k2:p1:s1 0 [ ]
k2:p1 referent k2:p1:x3 0 [ ]
k2:p1 relation c3:equality 0 [ ]
k2:p1 relation c7:to:0 0 [ ]
k2:p1 relation c8:of:0 0 [ ]
k2:p1 role c5:experiencer:-1 0 [ ]
c5:experiencer:-1 ext k2:p1:s1 0 [ ]
k2 referent k2:x1 1 [ The ]
c0:coast:0 instance k2:x1 2 [ coast ]
k2:p1 relation c9:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ an ]
c9:equality int k2:x1 3 [ ]
c1:area:0 instance k2:p1:x2 2 [ area ]
c8:of:0 ext k2:p1:x3 1 [ of ]
c2:land:0 instance k2:p1:x3 2 [ land ]
c8:of:0 int k2:p1:x2 3 [ ]
k2:p1 referent k2:p1:x4 1 [ that ]
c3:equality int k2:p1:x3 3 [ ]
k2:p1 surface k2:p1:s1 1 [ is ]
c5:experiencer:-1 int k2:p1:x4 2 [ ]
c4:next:0 arg k2:p1:s1 2 [ next ]
c7:to:0 ext k2:p1:x5 1 [ to ]
k2:p1 referent k2:p1:x5 2 [ the ]
c6:sea:0 instance k2:p1:x5 3 [ sea ]
c7:to:0 int k2:p1:s1 3 [ ]
k2:p1 punctuation k2:p1:x5 4 [ . ]


!.
The shores or shore of a sea, lake, or wide river is the land along the edge of it.
shores NNS shore NN sea NN lake NN wide JJ river NN land NN edge NN it PRP 
sem(1,[1001:[tok:'The',pos:'DT',lemma:the,namex:'O'],1002:[tok:shores,pos:'NNS',lemma:shore,namex:'O'],1003:[tok:or,pos:'CC',lemma:or,namex:'O'],1004:[tok:shore,pos:'NN',lemma:shore,namex:'O'],1005:[tok:of,pos:'IN',lemma:of,namex:'O'],1006:[tok:a,pos:'DT',lemma:a,namex:'O'],1007:[tok:sea,pos:'NN',lemma:sea,namex:'O'],1008:[tok: (','),pos: (','),lemma: (','),namex:'O'],1009:[tok:lake,pos:'NN',lemma:lake,namex:'O'],1010:[tok: (','),pos: (','),lemma: (','),namex:'O'],1011:[tok:or,pos:'CC',lemma:or,namex:'O'],1012:[tok:wide,pos:'JJ',lemma:wide,namex:'O'],1013:[tok:river,pos:'NN',lemma:river,namex:'O'],1014:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1015:[tok:the,pos:'DT',lemma:the,namex:'O'],1016:[tok:land,pos:'NN',lemma:land,namex:'O'],1017:[tok:along,pos:'IN',lemma:along,namex:'O'],1018:[tok:the,pos:'DT',lemma:the,namex:'O'],1019:[tok:edge,pos:'NN',lemma:edge,namex:'O'],1020:[tok:of,pos:'IN',lemma:of,namex:'O'],1021:[tok:it,pos:'PRP',lemma:it,namex:'O'],1022:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[1018]:C,[1015]:D,[]:E,[1018]:F,[1015]:G,[1001]:H],[[1021]:pred(B,thing,n,12),[1019]:pred(C,edge,n,0),[1016]:pred(D,land,n,0),[1021]:pred(E,thing,n,12),[1019]:pred(F,edge,n,0),[1016]:pred(G,land,n,0),[1003]:or(drs([],[[1002]:pred(H,shore,n,0)]),drs([],[[1004]:pred(H,shore,n,0)]))]),drs([],[[1011]:or(drs([[]:I,[]:J,[1006]:K],[[]:prop(I,drs([],[[1014]:eq(H,G),[1017]:rel(G,F,along,0),[1020]:rel(F,E,of,0)])),[1005]:rel(H,K,of,0),[1008]:rel(K,J,rel,2),[1009]:pred(J,lake,n,0),[1007]:pred(K,sea,n,0)]),drs([[]:L,[]:M,[]:N],[[]:prop(L,drs([],[[1014]:eq(N,D),[1017]:rel(D,C,along,0),[1020]:rel(C,B,of,0)])),[1013]:pred(N,river,n,0),[1012]:pred(M,wide,a,0),[]:rel(M,N,experiencer,0)]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% The shores or shore of a sea , lake , or wide river is the land along the edge of it . 
k2 binary c0:or 0 [ ]
k3 binary c1:or 0 [ ]
k3 concept c4:sea:0 0 [ ]
k3 concept c5:lake:0 0 [ ]
k3 referent k3:p1 0 [ ]
k3 referent k3:x3 0 [ ]
k3 relation c6:rel:2 0 [ ]
k3 relation c7:of:0 0 [ ]
k4 concept c2:shore:0 0 [ ]
k5 concept c3:shore:0 0 [ ]
k6 attribute c15:wide:0 0 [ ]
k6 concept c16:river:0 0 [ ]
k6 referent k6:p2 0 [ ]
k6 referent k6:s1 0 [ ]
k6 referent k6:x7 0 [ ]
k6 role c14:experiencer:-1 0 [ ]
c0:or antecedent k3 0 [ ]
c0:or consequent k6 0 [ ]
c1:or antecedent k4 0 [ ]
c1:or consequent k5 0 [ ]
c13:equality ext k3:p1:x4 0 [ ]
c14:experiencer:-1 ext k6:s1 0 [ ]
c22:equality ext k6:p2:x8 0 [ ]
k3:p1 concept c10:thing:12 0 [ ]
k3:p1 concept c8:land:0 0 [ ]
k3:p1 concept c9:edge:0 0 [ ]
k3:p1 referent k3:p1:x6 0 [ ]
k3:p1 relation c11:of:0 0 [ ]
k3:p1 relation c12:along:0 0 [ ]
k6:p2 concept c17:land:0 0 [ ]
k6:p2 concept c18:edge:0 0 [ ]
k6:p2 concept c19:thing:12 0 [ ]
k6:p2 referent k6:p2:x10 0 [ ]
k6:p2 relation c20:of:0 0 [ ]
k6:p2 relation c21:along:0 0 [ ]
k3 referent k3:x1 1 [ The ]
c2:shore:0 instance k3:x1 2 [ shores ]
k3 function k3:x1 3 [ or ]
c3:shore:0 instance k3:x1 4 [ shore ]
c7:of:0 ext k3:x2 1 [ of ]
k3 referent k3:x2 2 [ a ]
c7:of:0 int k3:x1 5 [ ]
c4:sea:0 instance k3:x2 3 [ sea ]
c6:rel:2 ext k3:x3 1 [ , ]
c5:lake:0 instance k3:x3 2 [ lake ]
k3 punctuation k3:x3 3 [ , ]
c6:rel:2 int k3:x2 4 [ ]
k6 surface k6:s1 1 [ or ]
c14:experiencer:-1 int k6:x7 1 [ ]
c15:wide:0 arg k6:s1 2 [ wide ]
c16:river:0 instance k6:x7 2 [ river ]
k3:p1 relation c13:equality 1 [ is ]
k6:p2 relation c22:equality 1 [ ]
k3:p1 referent k3:p1:x4 1 [ the ]
k6:p2 referent k6:p2:x8 1 [ ]
c22:equality int k6:x7 3 [ ]
c13:equality int k3:x1 6 [ ]
c17:land:0 instance k6:p2:x8 2 [ ]
c8:land:0 instance k3:p1:x4 2 [ land ]
c12:along:0 ext k3:p1:x5 1 [ along ]
c21:along:0 ext k6:p2:x9 1 [ ]
k3:p1 referent k3:p1:x5 2 [ the ]
k6:p2 referent k6:p2:x9 2 [ ]
c12:along:0 int k3:p1:x4 3 [ ]
c21:along:0 int k6:p2:x8 3 [ ]
c18:edge:0 instance k6:p2:x9 3 [ ]
c9:edge:0 instance k3:p1:x5 3 [ edge ]
c11:of:0 ext k3:p1:x6 1 [ of ]
c20:of:0 ext k6:p2:x10 1 [ ]
c10:thing:12 instance k3:p1:x6 2 [ it ]
c19:thing:12 instance k6:p2:x10 2 [ ]
c11:of:0 int k3:p1:x5 4 [ ]
k6:p2 punctuation k6:p2:x10 3 [ . ]
c20:of:0 int k6:p2:x9 4 [ ]


!.
0.5875
0.9773
A forest is a large area where trees grow close together.
forest NN large JJ area NN where WRB trees NNS grow VBP close RB together RB 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:forest,pos:'NN',lemma:forest,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:large,pos:'JJ',lemma:large,namex:'O'],1006:[tok:area,pos:'NN',lemma:area,namex:'O'],1007:[tok:where,pos:'WRB',lemma:where,namex:'O'],1008:[tok:trees,pos:'NNS',lemma:tree,namex:'O'],1009:[tok:grow,pos:'VBP',lemma:grow,namex:'O'],1010:[tok:close,pos:'RB',lemma:close,namex:'O'],1011:[tok:together,pos:'RB',lemma:together,namex:'O'],1012:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[]:E,[1004]:F],[[1003]:eq(C,F),[]:prop(D,drs([[]:G,[]:H],[[1010]:pred(G,close,r,0),[1011]:pred(G,together,r,0),[]:rel(G,H,agent,0),[1009]:pred(G,grow,v,0),[1008]:pred(H,tree,n,0)])),[1007]:rel(F,D,where,0),[1006]:pred(F,area,n,0),[1005]:pred(E,large,a,0),[]:rel(E,F,experiencer,0)])),[1002]:pred(C,forest,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A forest is a large area where trees grow close together . 
k3 concept c0:forest:0 0 [ ]
k3 referent k3:p1 0 [ ]
c1:experiencer:-1 ext k3:p1:s1 0 [ ]
c10:equality ext k3:p1:x2 0 [ ]
c7:agent:1 ext (k3:p1):p2:x3 0 [ ]
k3:p1 attribute c2:large:0 0 [ ]
k3:p1 concept c3:area:0 0 [ ]
k3:p1 referent k3:p1:p2 0 [ ]
k3:p1 referent k3:p1:s1 0 [ ]
k3:p1 relation c4:where:0 0 [ ]
k3:p1 role c1:experiencer:-1 0 [ ]
k3:p1:p2 attribute c8:together:0 0 [ ]
k3:p1:p2 attribute c9:close:0 0 [ ]
k3:p1:p2 concept c5:tree:0 0 [ ]
k3:p1:p2 event c6:grow:0 0 [ ]
k3:p1:p2 referent (k3:p1):p2:e1 0 [ ]
k3:p1:p2 referent (k3:p1):p2:x3 0 [ ]
k3:p1:p2 role c7:agent:1 0 [ ]
k3 referent k3:x1 1 [ A ]
c0:forest:0 instance k3:x1 2 [ forest ]
k3:p1 relation c10:equality 1 [ is ]
k3:p1 referent k3:p1:x2 1 [ a ]
c10:equality int k3:x1 3 [ ]
c2:large:0 arg k3:p1:s1 1 [ large ]
c1:experiencer:-1 int k3:p1:x2 2 [ ]
c3:area:0 instance k3:p1:x2 3 [ area ]
c4:where:0 ext k3:p1:p2 1 [ where ]
c4:where:0 int k3:p1:x2 4 [ ]
c5:tree:0 instance (k3:p1):p2:x3 1 [ trees ]
c7:agent:1 int (k3:p1):p2:e1 1 [ ]
c6:grow:0 instance (k3:p1):p2:e1 2 [ grow ]
(k3:p1):p2:e1 main k3:p1:p2 2 [ ]
c9:close:0 arg (k3:p1):p2:e1 3 [ close ]
c8:together:0 arg (k3:p1):p2:e1 4 [ together ]
k3:p1:p2 punctuation (k3:p1):p2:e1 5 [ . ]


!.
Woodland is land with a lot of trees.
'Woodland' NNP land NN lot NN trees NNS 
sem(1,[1001:[tok:'Woodland',pos:'NNP',lemma:'Woodland',namex:'I-PER'],1002:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1003:[tok:land,pos:'NN',lemma:land,namex:'O'],1004:[tok:with,pos:'IN',lemma:with,namex:'O'],1005:[tok:a,pos:'DT',lemma:a,namex:'O'],1006:[tok:lot,pos:'NN',lemma:lot,namex:'O'],1007:[tok:of,pos:'IN',lemma:of,namex:'O'],1008:[tok:trees,pos:'NNS',lemma:tree,namex:'O'],1009:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B],[[1001]:named(B,woodland,per,nam)]),drs([[]:C],[[]:prop(C,drs([[]:D,[1005]:E,[]:F],[[1002]:eq(B,F),[1004]:rel(F,E,with,0),[1007]:rel(E,D,of,0),[1008]:pred(D,tree,n,0),[1006]:pred(E,lot,n,0),[1003]:pred(F,land,n,0)]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% Woodland is land with a lot of trees . 
k2 named c0:woodland:per 0 [ ]
k2 referent k2:p1 0 [ ]
k2 referent k2:x1 0 [ ]
c6:equality ext k2:p1:x2 0 [ ]
k2:p1 concept c1:land:0 0 [ ]
k2:p1 concept c2:lot:0 0 [ ]
k2:p1 concept c3:tree:0 0 [ ]
k2:p1 referent k2:p1:x2 0 [ ]
k2:p1 referent k2:p1:x4 0 [ ]
k2:p1 relation c4:of:0 0 [ ]
k2:p1 relation c5:with:0 0 [ ]
c0:woodland:per instance k2:x1 1 [ Woodland ]
k2:p1 relation c6:equality 1 [ is ]
c1:land:0 instance k2:p1:x2 1 [ land ]
c6:equality int k2:x1 2 [ ]
c5:with:0 ext k2:p1:x3 1 [ with ]
c5:with:0 int k2:p1:x2 2 [ ]
k2:p1 referent k2:p1:x3 2 [ a ]
c2:lot:0 instance k2:p1:x3 3 [ lot ]
c4:of:0 ext k2:p1:x4 1 [ of ]
c3:tree:0 instance k2:p1:x4 2 [ trees ]
k2:p1 punctuation k2:p1:x4 3 [ . ]
c4:of:0 int k2:p1:x3 4 [ ]


!.
0.6275
0.4770
An implement is a tool or other pieces of equipment.
implement VB tool NN other JJ pieces NNS equipment NN 
sem(1,[1001:[tok:'An',pos:'DT',lemma:an,namex:'O'],1002:[tok:implement,pos:'VB',lemma:implement,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:tool,pos:'NN',lemma:tool,namex:'O'],1006:[tok:or,pos:'CC',lemma:or,namex:'O'],1007:[tok:other,pos:'JJ',lemma:other,namex:'O'],1008:[tok:pieces,pos:'NNS',lemma:piece,namex:'O'],1009:[tok:of,pos:'IN',lemma:of,namex:'O'],1010:[tok:equipment,pos:'NN',lemma:equipment,namex:'O'],1011:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B],[[1008]:pred(B,piece,n,0)]),drs([[]:C,[1001]:D],[[]:prop(C,drs([],[[1006]:or(drs([[1004]:E],[[1003]:eq(D,E),[1005]:pred(E,tool,n,0)]),drs([[]:F,[]:G],[[1003]:eq(D,G),[1009]:rel(G,F,of,0),[1010]:pred(F,equipment,n,0),[]:not(drs([],[[1007]:eq(G,B)])),[1008]:pred(G,piece,n,0)]))])),[1002]:pred(D,implement,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% An implement is a tool or other pieces of equipment . 
k2 concept c0:implement:0 0 [ ]
k2 referent k2:p1 0 [ ]
k3 concept c2:tool:0 0 [ ]
k4 attribute c5:other:0 0 [ ]
k4 concept c6:piece:0 0 [ ]
k4 concept c7:equipment:0 0 [ ]
k4 referent k4:s1 0 [ ]
k4 referent k4:x3 0 [ ]
k4 referent k4:x4 0 [ ]
k4 relation c8:of:0 0 [ ]
k4 role c4:experiencer:-1 0 [ ]
c1:or antecedent k3 0 [ ]
c1:or consequent k4 0 [ ]
c3:equality ext k3:x2 0 [ ]
c4:experiencer:-1 ext k4:s1 0 [ ]
c9:equality ext k4:x3 0 [ ]
k2:p1 binary c1:or 0 [ ]
k2 referent k2:x1 1 [ An ]
c0:implement:0 instance k2:x1 2 [ implement ]
k3 relation c3:equality 1 [ is ]
k4 relation c9:equality 1 [ ]
k3 referent k3:x2 1 [ a ]
c3:equality int k2:x1 3 [ ]
c2:tool:0 instance k3:x2 2 [ tool ]
k4 surface k4:s1 1 [ or ]
c4:experiencer:-1 int k4:x3 1 [ ]
c5:other:0 arg k4:s1 2 [ other ]
c6:piece:0 instance k4:x3 2 [ pieces ]
c9:equality int k2:x1 4 [ ]
c8:of:0 ext k4:x4 1 [ of ]
c7:equipment:0 instance k4:x4 2 [ equipment ]
k4 punctuation k4:x4 3 [ . ]
c8:of:0 int k4:x3 3 [ ]


!.
A tool is any instrument or simple piece of equipment that you hold in your hands and use to do a particular kind of work.
tool NN instrument NN simple JJ piece NN equipment NN you PRP hold VBP your PRP$ hands NNS use NN do VB particular JJ kind NN work NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:tool,pos:'NN',lemma:tool,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:any,pos:'DT',lemma:any,namex:'O'],1005:[tok:instrument,pos:'NN',lemma:instrument,namex:'O'],1006:[tok:or,pos:'CC',lemma:or,namex:'O'],1007:[tok:simple,pos:'JJ',lemma:simple,namex:'O'],1008:[tok:piece,pos:'NN',lemma:piece,namex:'O'],1009:[tok:of,pos:'IN',lemma:of,namex:'O'],1010:[tok:equipment,pos:'NN',lemma:equipment,namex:'O'],1011:[tok:that,pos:'IN',lemma:that,namex:'O'],1012:[tok:you,pos:'PRP',lemma:you,namex:'O'],1013:[tok:hold,pos:'VBP',lemma:hold,namex:'O'],1014:[tok:in,pos:'IN',lemma:in,namex:'O'],1015:[tok:your,pos:'PRP$',lemma:your,namex:'O'],1016:[tok:hands,pos:'NNS',lemma:hand,namex:'O'],1017:[tok:and,pos:'CC',lemma:and,namex:'O'],1018:[tok:use,pos:'NN',lemma:use,namex:'O'],1019:[tok:to,pos:'TO',lemma:to,namex:'O'],1020:[tok:do,pos:'VB',lemma:do,namex:'O'],1021:[tok:a,pos:'DT',lemma:a,namex:'O'],1022:[tok:particular,pos:'JJ',lemma:particular,namex:'O'],1023:[tok:kind,pos:'NN',lemma:kind,namex:'O'],1024:[tok:of,pos:'IN',lemma:of,namex:'O'],1025:[tok:work,pos:'NN',lemma:work,namex:'O'],1026:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[]:C,[]:D],[[1016]:pred(B,hand,n,0),[]:rel(B,C,of,1),[1015]:pred(C,person,n,1),[1012]:pred(D,person,n,1)]),drs([[]:E,[1001]:F],[[]:prop(E,drs([],[[]:imp(drs([[1004]:G],[[1006]:or(drs([],[[1005]:pred(G,instrument,n,0)]),drs([[]:H],[[1008]:pred(G,piece,n,0),[1007]:pred(H,simple,a,0),[]:rel(H,G,experiencer,0)]))]),drs([[1019]:I,[]:J,[1017]:K,[]:L,[1011]:M,[]:N],[[1003]:eq(F,G),[1014]:rel(L,K,in,0),[]:rel(J,K,subset_of,1),[]:prop(I,drs([[]:O,[]:P,[]:Q,[1021]:R,[]:S],[[]:rel(O,R,theme,0),[]:rel(O,S,agent,0),[1020]:pred(O,do,v,0),[1024]:rel(R,P,of,0),[1025]:pred(P,work,n,0),[1023]:pred(R,kind,n,0),[1022]:pred(Q,particular,a,0),[]:rel(Q,R,experiencer,0),[]:eq(J,S)])),[1018]:pred(J,use,n,0),[]:rel(B,K,subset_of,1),[]:rel(L,M,theme,0),[]:rel(L,D,agent,0),[1013]:pred(L,hold,v,0),[]:eq(G,M),[1009]:rel(G,N,of,0),[1010]:pred(N,equipment,n,0)]))])),[1002]:pred(F,tool,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A tool is any instrument or simple piece of equipment that you hold in your hands and use to do a particular kind of work . 
k4 concept c0:tool:0 0 [ ]
k4 referent k4:p1 0 [ ]
k5 binary c2:or 0 [ ]
k6 concept c3:instrument:0 0 [ ]
k7 attribute c5:simple:0 0 [ ]
k7 concept c6:piece:0 0 [ ]
k7 referent k7:s1 0 [ ]
k7 role c4:experiencer:-1 0 [ ]
k8 concept c14:person:1 0 [ ]
k8 concept c16:hand:0 0 [ ]
k8 concept c18:use:0 0 [ ]
k8 concept c7:equipment:0 0 [ ]
k8 concept c9:person:1 0 [ ]
k8 event c11:hold:0 0 [ ]
k8 referent k8:e1 0 [ ]
k8 referent k8:x3 0 [ ]
k8 referent k8:x4 0 [ ]
k8 referent k8:x7 0 [ ]
k8 referent k8:x8 0 [ ]
k8 referent k8:x9 0 [ ]
k8 relation c10:equality 0 [ ]
k8 relation c15:of:1 0 [ ]
k8 relation c17:superset_of:1 0 [ ]
k8 relation c28:superset_of:1 0 [ ]
k8 relation c29:in:0 0 [ ]
k8 relation c8:of:0 0 [ ]
k8 role c12:agent:1 0 [ ]
k8 role c13:theme:-1 0 [ ]
c1:imp antecedent k5 0 [ ]
c1:imp consequent k8 0 [ ]
c10:equality ext k8:x5 0 [ ]
c12:agent:1 ext k8:x4 0 [ ]
c15:of:1 ext k8:x7 0 [ ]
c17:superset_of:1 ext k8:x8 0 [ ]
c19:equality ext k8:p2:x10 0 [ ]
c2:or antecedent k6 0 [ ]
c2:or consequent k7 0 [ ]
c20:experiencer:-1 ext k8:p2:s2 0 [ ]
c27:theme:1 ext k8:p2:x11 0 [ ]
c28:superset_of:1 ext k8:x9 0 [ ]
c30:equality ext k5:x2 0 [ ]
c4:experiencer:-1 ext k7:s1 0 [ ]
k4:p1 binary c1:imp 0 [ ]
k8:p2 attribute c21:particular:0 0 [ ]
k8:p2 concept c22:kind:0 0 [ ]
k8:p2 concept c23:work:0 0 [ ]
k8:p2 event c25:do:0 0 [ ]
k8:p2 referent k8:p2:e2 0 [ ]
k8:p2 referent k8:p2:s2 0 [ ]
k8:p2 referent k8:p2:x10 0 [ ]
k8:p2 referent k8:p2:x12 0 [ ]
k8:p2 relation c19:equality 0 [ ]
k8:p2 relation c24:of:0 0 [ ]
k8:p2 role c20:experiencer:-1 0 [ ]
k8:p2 role c27:theme:1 0 [ ]
k8:p2 role c26:agent:-1 0 [ ]
c13:theme:-1 ext k8:e1 0 [ ]
c26:agent:-1 ext k8:p2:e2 0 [ ]
k4 referent k4:x1 1 [ A ]
c0:tool:0 instance k4:x1 2 [ tool ]
k8 relation c30:equality 1 [ is ]
k5 referent k5:x2 1 [ any ]
c30:equality int k4:x1 3 [ ]
c3:instrument:0 instance k5:x2 2 [ instrument ]
k5 function k5:x2 3 [ or ]
c5:simple:0 arg k7:s1 1 [ simple ]
c4:experiencer:-1 int k5:x2 4 [ ]
c6:piece:0 instance k5:x2 5 [ piece ]
c8:of:0 ext k8:x3 1 [ of ]
c7:equipment:0 instance k8:x3 2 [ equipment ]
c8:of:0 int k5:x2 6 [ ]
k8 referent k8:x5 1 [ that ]
c10:equality int k5:x2 7 [ ]
c12:agent:1 int k8:e1 1 [ ]
c9:person:1 instance k8:x4 1 [ you ]
c11:hold:0 instance k8:e1 2 [ hold ]
c13:theme:-1 int k8:x5 2 [ ]
c29:in:0 ext k8:x6 1 [ in ]
c14:person:1 instance k8:x7 1 [ your ]
c15:of:1 int k8:x8 1 [ ]
c16:hand:0 instance k8:x8 2 [ hands ]
c17:superset_of:1 int k8:x6 2 [ ]
k8 referent k8:x6 3 [ and ]
c29:in:0 int k8:e1 3 [ ]
c18:use:0 instance k8:x9 1 [ use ]
c28:superset_of:1 int k8:x6 4 [ ]
k8 referent k8:p2 1 [ to ]
c25:do:0 instance k8:p2:e2 1 [ do ]
c26:agent:-1 int k8:p2:x10 1 [ ]
c19:equality int k8:x9 2 [ ]
k8:p2 referent k8:p2:x11 1 [ a ]
c27:theme:1 int k8:p2:e2 2 [ ]
c21:particular:0 arg k8:p2:s2 1 [ particular ]
c20:experiencer:-1 int k8:p2:x11 2 [ ]
c22:kind:0 instance k8:p2:x11 3 [ kind ]
c24:of:0 ext k8:p2:x12 1 [ of ]
c23:work:0 instance k8:p2:x12 2 [ work ]
k8:p2 punctuation k8:p2:x12 3 [ . ]
c24:of:0 int k8:p2:x11 4 [ ]


!.
0.5900
0.8919
A cock is an adult male chicken.
cock NN adult NN male NN chicken NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:cock,pos:'NN',lemma:cock,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:an,pos:'DT',lemma:an,namex:'O'],1005:[tok:adult,pos:'NN',lemma:adult,namex:'O'],1006:[tok:male,pos:'NN',lemma:male,namex:'O'],1007:[tok:chicken,pos:'NN',lemma:chicken,namex:'O'],1008:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[]:E,[1004]:F],[[1003]:eq(C,F),[1007]:pred(F,chicken,n,0),[]:rel(F,D,of,0),[1006]:pred(D,male,n,0),[]:rel(F,E,of,0),[1005]:pred(E,adult,n,0)])),[1002]:pred(C,cock,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A cock is an adult male chicken . 
k2 concept c0:cock:0 0 [ ]
k2 referent k2:p1 0 [ ]
c2:of:0 ext k2:p1:x3 0 [ ]
c4:of:0 ext k2:p1:x4 0 [ ]
c6:equality ext k2:p1:x2 0 [ ]
k2:p1 concept c1:adult:0 0 [ ]
k2:p1 concept c3:male:0 0 [ ]
k2:p1 concept c5:chicken:0 0 [ ]
k2:p1 referent k2:p1:x3 0 [ ]
k2:p1 referent k2:p1:x4 0 [ ]
k2:p1 relation c2:of:0 0 [ ]
k2:p1 relation c4:of:0 0 [ ]
k2 referent k2:x1 1 [ A ]
c0:cock:0 instance k2:x1 2 [ cock ]
k2:p1 relation c6:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ an ]
c1:adult:0 instance k2:p1:x3 1 [ adult ]
c2:of:0 int k2:p1:x2 2 [ ]
c3:male:0 instance k2:p1:x4 1 [ male ]
c4:of:0 int k2:p1:x2 3 [ ]
c5:chicken:0 instance k2:p1:x2 4 [ chicken ]
c6:equality int k2:x1 3 [ ]
k2:p1 punctuation k2:p1:x2 5 [ . ]


!.
A rooster is an adult male chicken.
rooster NN adult NN male NN chicken NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:rooster,pos:'NN',lemma:rooster,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:an,pos:'DT',lemma:an,namex:'O'],1005:[tok:adult,pos:'NN',lemma:adult,namex:'O'],1006:[tok:male,pos:'NN',lemma:male,namex:'O'],1007:[tok:chicken,pos:'NN',lemma:chicken,namex:'O'],1008:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[]:E,[1004]:F],[[1003]:eq(C,F),[1007]:pred(F,chicken,n,0),[]:rel(F,D,of,0),[1006]:pred(D,male,n,0),[]:rel(F,E,of,0),[1005]:pred(E,adult,n,0)])),[1002]:pred(C,rooster,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A rooster is an adult male chicken . 
k2 concept c0:rooster:0 0 [ ]
k2 referent k2:p1 0 [ ]
c2:of:0 ext k2:p1:x3 0 [ ]
c4:of:0 ext k2:p1:x4 0 [ ]
c6:equality ext k2:p1:x2 0 [ ]
k2:p1 concept c1:adult:0 0 [ ]
k2:p1 concept c3:male:0 0 [ ]
k2:p1 concept c5:chicken:0 0 [ ]
k2:p1 referent k2:p1:x3 0 [ ]
k2:p1 referent k2:p1:x4 0 [ ]
k2:p1 relation c2:of:0 0 [ ]
k2:p1 relation c4:of:0 0 [ ]
k2 referent k2:x1 1 [ A ]
c0:rooster:0 instance k2:x1 2 [ rooster ]
k2:p1 relation c6:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ an ]
c1:adult:0 instance k2:p1:x3 1 [ adult ]
c2:of:0 int k2:p1:x2 2 [ ]
c3:male:0 instance k2:p1:x4 1 [ male ]
c4:of:0 int k2:p1:x2 3 [ ]
c5:chicken:0 instance k2:p1:x2 4 [ chicken ]
c6:equality int k2:x1 3 [ ]
k2:p1 punctuation k2:p1:x2 5 [ . ]


!.
0.8625
0.8560
A boy is a child who will grow up to be a man.
boy NN child NN who WP grow VB up RP be VB man NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:boy,pos:'NN',lemma:boy,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:child,pos:'NN',lemma:child,namex:'O'],1006:[tok:who,pos:'WP',lemma:who,namex:'O'],1007:[tok:will,pos:'MD',lemma:will,namex:'O'],1008:[tok:grow,pos:'VB',lemma:grow,namex:'O'],1009:[tok:up,pos:'RP',lemma:up,namex:'O'],1010:[tok:to,pos:'TO',lemma:to,namex:'O'],1011:[tok:be,pos:'VB',lemma:be,namex:'O'],1012:[tok:a,pos:'DT',lemma:a,namex:'O'],1013:[tok:man,pos:'NN',lemma:man,namex:'O'],1014:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[]:E,[1006]:F,[1004]:G],[[1003]:eq(C,G),[]:prop(D,drs([[]:H,[1010]:I],[[1009]:pred(H,up,r,0),[]:rel(H,I,topic,0),[]:rel(H,F,agent,0),[1008]:pred(H,grow,v,0),[]:prop(I,drs([[]:J],[[]:prop(J,drs([[1012]:K],[[1011]:eq(F,K),[1013]:pred(K,man,n,0)]))]))])),[]:rel(E,D,topic,0),[]:rel(E,F,agent,0),[1007]:pred(E,will,v,0),[]:eq(G,F),[1005]:pred(G,child,n,0)])),[1002]:pred(C,boy,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A boy is a child who will grow up to be a man . 
k4 concept c0:boy:0 0 [ ]
k4 referent k4:p1 0 [ ]
c10:topic:1 ext (k4:p1):p2:p3 0 [ ]
c12:equality ext k4:p1:x2 0 [ ]
c2:equality ext k4:p1:x3 0 [ ]
c5:topic:1 ext k4:p1:p2 0 [ ]
c7:equality ext (((k4:p1):p2):p3):p4:x4 0 [ ]
k4:p1 concept c1:child:0 0 [ ]
k4:p1 event c3:will:0 0 [ ]
k4:p1 referent k4:p1:e1 0 [ ]
k4:p1 referent k4:p1:p2 0 [ ]
k4:p1 relation c2:equality 0 [ ]
k4:p1 role c5:topic:1 0 [ ]
k4:p1 role c4:agent:-1 0 [ ]
k4:p1:p2 attribute c11:up:0 0 [ ]
k4:p1:p2 event c8:grow:0 0 [ ]
k4:p1:p2 referent (k4:p1):p2:e2 0 [ ]
k4:p1:p2 role c10:topic:1 0 [ ]
k4:p1:p2 role c9:agent:-1 0 [ ]
(k4:p1):p2:p3 referent ((k4:p1):p2):p3:p4 0 [ ]
((k4:p1):p2):p3:p4 concept c6:man:0 0 [ ]
c4:agent:-1 ext k4:p1:e1 0 [ ]
c9:agent:-1 ext (k4:p1):p2:e2 0 [ ]
k4 referent k4:x1 1 [ A ]
c0:boy:0 instance k4:x1 2 [ boy ]
k4:p1 relation c12:equality 1 [ is ]
k4:p1 referent k4:p1:x2 1 [ a ]
c12:equality int k4:x1 3 [ ]
c1:child:0 instance k4:p1:x2 2 [ child ]
k4:p1 referent k4:p1:x3 1 [ who ]
c2:equality int k4:p1:x2 3 [ ]
c3:will:0 instance k4:p1:e1 1 [ will ]
c4:agent:-1 int k4:p1:x3 2 [ ]
c8:grow:0 instance (k4:p1):p2:e2 1 [ grow ]
c9:agent:-1 int k4:p1:x3 3 [ ]
c11:up:0 arg (k4:p1):p2:e2 2 [ up ]
k4:p1:p2 referent (k4:p1):p2:p3 1 [ to ]
c5:topic:1 int k4:p1:e1 2 [ ]
c10:topic:1 int (k4:p1):p2:e2 3 [ ]
((k4:p1):p2):p3:p4 relation c7:equality 1 [ be ]
((k4:p1):p2):p3:p4 referent (((k4:p1):p2):p3):p4:x4 1 [ a ]
c6:man:0 instance (((k4:p1):p2):p3):p4:x4 2 [ man ]
((k4:p1):p2):p3:p4 punctuation (((k4:p1):p2):p3):p4:x4 3 [ . ]
c7:equality int k4:p1:x3 4 [ ]


!.
A lad is a young man or boy.
lad NN young JJ man NN boy NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:lad,pos:'NN',lemma:lad,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:young,pos:'JJ',lemma:young,namex:'O'],1006:[tok:man,pos:'NN',lemma:man,namex:'O'],1007:[tok:or,pos:'CC',lemma:or,namex:'O'],1008:[tok:boy,pos:'NN',lemma:boy,namex:'O'],1009:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[1004]:E],[[1003]:eq(C,E),[1007]:or(drs([],[[1006]:pred(E,man,n,0)]),drs([],[[1008]:pred(E,boy,n,0)])),[1005]:pred(D,young,a,0),[]:rel(D,E,experiencer,0)])),[1002]:pred(C,lad,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A lad is a young man or boy . 
k2 concept c0:lad:0 0 [ ]
k2 referent k2:p1 0 [ ]
k3 concept c4:man:0 0 [ ]
k4 concept c5:boy:0 0 [ ]
c1:experiencer:-1 ext k2:p1:s1 0 [ ]
c3:or antecedent k3 0 [ ]
c3:or consequent k4 0 [ ]
c6:equality ext k2:p1:x2 0 [ ]
k2:p1 attribute c2:young:0 0 [ ]
k2:p1 binary c3:or 0 [ ]
k2:p1 referent k2:p1:s1 0 [ ]
k2:p1 role c1:experiencer:-1 0 [ ]
k2 referent k2:x1 1 [ A ]
c0:lad:0 instance k2:x1 2 [ lad ]
k2:p1 relation c6:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ a ]
c2:young:0 arg k2:p1:s1 1 [ young ]
c1:experiencer:-1 int k2:p1:x2 2 [ ]
c4:man:0 instance k2:p1:x2 3 [ man ]
k2:p1 function k2:p1:x2 4 [ or ]
c5:boy:0 instance k2:p1:x2 5 [ boy ]
c6:equality int k2:x1 3 [ ]
k2:p1 punctuation k2:p1:x2 6 [ . ]


!.
0.5800
0.8980
A cushion is a fabric case filled with soft material, which you put on a seat to make it more comfortable.
cushion NN fabric NN case NN filled VBN soft JJ material NN which WDT you PRP put VBP seat NN make VB it PRP more RBR comfortable JJ 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:cushion,pos:'NN',lemma:cushion,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:fabric,pos:'NN',lemma:fabric,namex:'O'],1006:[tok:case,pos:'NN',lemma:case,namex:'O'],1007:[tok:filled,pos:'VBN',lemma:fill,namex:'O'],1008:[tok:with,pos:'IN',lemma:with,namex:'O'],1009:[tok:soft,pos:'JJ',lemma:soft,namex:'O'],1010:[tok:material,pos:'NN',lemma:material,namex:'O'],1011:[tok: (','),pos: (','),lemma: (','),namex:'O'],1012:[tok:which,pos:'WDT',lemma:which,namex:'O'],1013:[tok:you,pos:'PRP',lemma:you,namex:'O'],1014:[tok:put,pos:'VBP',lemma:put,namex:'O'],1015:[tok:on,pos:'IN',lemma:on,namex:'O'],1016:[tok:a,pos:'DT',lemma:a,namex:'O'],1017:[tok:seat,pos:'NN',lemma:seat,namex:'O'],1018:[tok:to,pos:'TO',lemma:to,namex:'O'],1019:[tok:make,pos:'VB',lemma:make,namex:'O'],1020:[tok:it,pos:'PRP',lemma:it,namex:'O'],1021:[tok:more,pos:'RBR',lemma:more,namex:'O'],1022:[tok:comfortable,pos:'JJ',lemma:comfortable,namex:'O'],1023:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[]:C],[[1020]:pred(B,thing,n,12),[1013]:pred(C,person,n,1)]),drs([[]:D,[1001]:E],[[]:prop(D,drs([[1018]:F,[1016]:G,[]:H,[1012]:I,[]:J,[]:K,[]:L,[]:M,[]:N,[1004]:O],[[1003]:eq(E,O),[]:rel(H,F,for,0),[]:prop(F,drs([[]:P,[]:Q,[]:R],[[]:prop(P,drs([[]:S],[[1021]:pred(S,more,r,0),[]:rel(S,B,experiencer,0),[1022]:pred(S,comfortable,a,0)])),[]:rel(Q,P,recipient,0),[]:rel(Q,R,agent,0),[]:rel(Q,B,topic,0),[1019]:pred(Q,make,v,0)])),[1015]:rel(H,G,on,0),[1017]:pred(G,seat,n,0),[]:rel(H,I,theme,0),[]:rel(H,C,agent,0),[1014]:pred(H,put,v,0),[]:eq(O,I),[1008]:rel(L,K,with,0),[1010]:pred(K,material,n,0),[1009]:pred(J,soft,a,0),[]:rel(J,K,experiencer,0),[]:rel(L,M,theme,0),[1007]:pred(L,fill,v,0),[]:eq(O,M),[1006]:pred(O,case,n,0),[]:rel(O,N,of,0),[1005]:pred(N,fabric,n,0)])),[1002]:pred(E,cushion,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A cushion is a fabric case filled with soft material , which you put on a seat to make it more comfortable . 
k5 concept c0:cushion:0 0 [ ]
k5 referent k5:p1 0 [ ]
c12:equality ext k5:p1:x7 0 [ ]
c14:agent:1 ext k5:p1:x6 0 [ ]
c2:of:0 ext k5:p1:x3 0 [ ]
c20:topic:1 ext (k5:p1):p2:x10 0 [ ]
c21:agent:1 ext (k5:p1):p2:x9 0 [ ]
c21:agent:1 int (k5:p1):p2:e3 0 [ ]
c22:recipient:1 ext (k5:p1):p2:p3 0 [ ]
c24:experiencer:1 ext (k5:p1):p2:x10 0 [ ]
c26:for:0 ext k5:p1:p2 0 [ ]
c27:equality ext k5:p1:x2 0 [ ]
c4:equality ext k5:p1:x4 0 [ ]
c7:experiencer:-1 ext k5:p1:s1 0 [ ]
k5:p1 attribute c8:soft:0 0 [ ]
k5:p1 concept c1:fabric:0 0 [ ]
k5:p1 concept c11:person:1 0 [ ]
k5:p1 concept c16:seat:0 0 [ ]
k5:p1 concept c3:case:0 0 [ ]
k5:p1 concept c9:material:0 0 [ ]
k5:p1 event c13:put:0 0 [ ]
k5:p1 event c5:fill:0 0 [ ]
k5:p1 referent k5:p1:e1 0 [ ]
k5:p1 referent k5:p1:e2 0 [ ]
k5:p1 referent k5:p1:s1 0 [ ]
k5:p1 referent k5:p1:x3 0 [ ]
k5:p1 referent k5:p1:x4 0 [ ]
k5:p1 referent k5:p1:x5 0 [ ]
k5:p1 referent k5:p1:x6 0 [ ]
k5:p1 relation c10:with:0 0 [ ]
k5:p1 relation c12:equality 0 [ ]
k5:p1 relation c17:on:0 0 [ ]
k5:p1 relation c2:of:0 0 [ ]
k5:p1 relation c26:for:0 0 [ ]
k5:p1 relation c4:equality 0 [ ]
k5:p1 role c14:agent:1 0 [ ]
k5:p1 role c7:experiencer:-1 0 [ ]
k5:p1 role c15:theme:-1 0 [ ]
k5:p1 role c6:theme:-1 0 [ ]
k5:p1:p2 concept c18:thing:12 0 [ ]
k5:p1:p2 event c19:make:0 0 [ ]
k5:p1:p2 referent (k5:p1):p2:e3 0 [ ]
k5:p1:p2 referent (k5:p1):p2:p3 0 [ ]
k5:p1:p2 referent (k5:p1):p2:x10 0 [ ]
k5:p1:p2 referent (k5:p1):p2:x9 0 [ ]
k5:p1:p2 role c20:topic:1 0 [ ]
k5:p1:p2 role c21:agent:1 0 [ ]
k5:p1:p2 role c22:recipient:1 0 [ ]
(k5:p1):p2:p3 attribute c23:comfortable:0 0 [ ]
(k5:p1):p2:p3 attribute c25:more:0 0 [ ]
(k5:p1):p2:p3 referent ((k5:p1):p2):p3:s2 0 [ ]
(k5:p1):p2:p3 role c24:experiencer:1 0 [ ]
c15:theme:-1 ext k5:p1:e2 0 [ ]
c6:theme:-1 ext k5:p1:e1 0 [ ]
k5 referent k5:x1 1 [ A ]
c0:cushion:0 instance k5:x1 2 [ cushion ]
k5:p1 relation c27:equality 1 [ is ]
k5:p1 referent k5:p1:x2 1 [ a ]
c27:equality int k5:x1 3 [ ]
c1:fabric:0 instance k5:p1:x3 1 [ fabric ]
c2:of:0 int k5:p1:x2 2 [ ]
c3:case:0 instance k5:p1:x2 3 [ case ]
c5:fill:0 instance k5:p1:e1 1 [ filled ]
c6:theme:-1 int k5:p1:x4 1 [ ]
c4:equality int k5:p1:x2 4 [ ]
c10:with:0 ext k5:p1:x5 1 [ with ]
c8:soft:0 arg k5:p1:s1 1 [ soft ]
c7:experiencer:-1 int k5:p1:x5 2 [ ]
c9:material:0 instance k5:p1:x5 3 [ material ]
c10:with:0 int k5:p1:e1 2 [ ]
k5:p1 punctuation k5:p1:x5 4 [ , ]
k5:p1 referent k5:p1:x7 1 [ which ]
c12:equality int k5:p1:x2 5 [ ]
c11:person:1 instance k5:p1:x6 1 [ you ]
c14:agent:1 int k5:p1:e2 1 [ ]
c13:put:0 instance k5:p1:e2 2 [ put ]
c15:theme:-1 int k5:p1:x7 2 [ ]
c17:on:0 ext k5:p1:x8 1 [ on ]
k5:p1 referent k5:p1:x8 2 [ a ]
c17:on:0 int k5:p1:e2 3 [ ]
c16:seat:0 instance k5:p1:x8 3 [ seat ]
k5:p1 referent k5:p1:p2 1 [ to ]
c26:for:0 int k5:p1:e2 4 [ ]
c19:make:0 instance (k5:p1):p2:e3 1 [ make ]
(k5:p1):p2:e3 main k5:p1:p2 2 [ ]
c18:thing:12 instance (k5:p1):p2:x10 1 [ it ]
c24:experiencer:1 int ((k5:p1):p2):p3:s2 1 [ ]
c20:topic:1 int (k5:p1):p2:e3 2 [ ]
c25:more:0 arg ((k5:p1):p2):p3:s2 2 [ more ]
((k5:p1):p2):p3:s2 main (k5:p1):p2:p3 1 [ ]
c23:comfortable:0 arg ((k5:p1):p2):p3:s2 3 [ comfortable ]
k5:p1:p2 punctuation (k5:p1):p2:p3 2 [ . ]
c22:recipient:1 int (k5:p1):p2:e3 3 [ ]


!.
A pillow is a rectangular cushion which you rest your head on when you are in bed.
pillow NN rectangular JJ cushion NN which WDT you PRP rest VBP your PRP$ head NN when WRB you PRP are VBP bed NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:pillow,pos:'NN',lemma:pillow,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:rectangular,pos:'JJ',lemma:rectangular,namex:'O'],1006:[tok:cushion,pos:'NN',lemma:cushion,namex:'O'],1007:[tok:which,pos:'WDT',lemma:which,namex:'O'],1008:[tok:you,pos:'PRP',lemma:you,namex:'O'],1009:[tok:rest,pos:'VBP',lemma:rest,namex:'O'],1010:[tok:your,pos:'PRP$',lemma:your,namex:'O'],1011:[tok:head,pos:'NN',lemma:head,namex:'O'],1012:[tok:on,pos:'IN',lemma:on,namex:'O'],1013:[tok:when,pos:'WRB',lemma:when,namex:'O'],1014:[tok:you,pos:'PRP',lemma:you,namex:'O'],1015:[tok:are,pos:'VBP',lemma:be,namex:'O'],1016:[tok:in,pos:'IN',lemma:in,namex:'O'],1017:[tok:bed,pos:'NN',lemma:bed,namex:'O'],1018:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[]:C,[]:D,[]:E],[[1014]:pred(B,person,n,1),[1011]:pred(C,head,n,0),[]:rel(C,D,of,1),[1010]:pred(D,person,n,1),[1008]:pred(E,person,n,1)]),drs([[]:F,[1001]:G],[[]:prop(F,drs([[]:H,[]:I,[1004]:J],[[1003]:eq(G,J),[]:prop(H,drs([[]:K,[]:L],[[]:prop(K,drs([],[[]:duplex(whq,drs([[]:M],[[1013]:pred(M,unit_of_time,n,1)]),M,drs([[]:N],[[]:rel(N,M,time_rel,0),[]:prop(N,drs([[]:O],[[1016]:rel(B,O,in,0),[1017]:pred(O,bed,n,0)]))]))])),[1012]:rel(L,K,on,0),[]:rel(L,C,theme,0),[]:rel(L,E,agent,0),[1009]:pred(L,rest,v,0)])),[1007]:rel(J,H,which,0),[1006]:pred(J,cushion,n,0),[1005]:pred(I,rectangular,a,0),[]:rel(I,J,experiencer,0)])),[1002]:pred(G,pillow,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A pillow is a rectangular cushion which you rest your head on when you are in bed . 
k3 concept c0:pillow:0 0 [ ]
k3 referent k3:p1 0 [ ]
k4 concept c14:unit_of_time:1 0 [ ]
k4 referent k4:x6 0 [ ]
k5 concept c15:person:1 0 [ ]
k5 referent k5:p4 0 [ ]
k5 referent k5:x7 0 [ ]
k5 relation c18:time_rel:0 0 [ ]
c1:experiencer:-1 ext k3:p1:s1 0 [ ]
c10:agent:1 ext (k3:p1):p2:x3 0 [ ]
c11:theme:1 ext (k3:p1):p2:x5 0 [ ]
c13:whq antecedent k4 0 [ ]
c13:whq consequent k5 0 [ ]
c18:time_rel:0 ext k4:x6 0 [ ]
c19:equality ext k3:p1:x2 0 [ ]
c7:of:1 ext (k3:p1):p2:x4 0 [ ]
k3:p1 attribute c2:rectangular:0 0 [ ]
k3:p1 concept c3:cushion:0 0 [ ]
k3:p1 referent k3:p1:p2 0 [ ]
k3:p1 referent k3:p1:s1 0 [ ]
k3:p1 relation c4:which:0 0 [ ]
k3:p1 role c1:experiencer:-1 0 [ ]
k5:p4 concept c16:bed:0 0 [ ]
k5:p4 referent k5:p4:x8 0 [ ]
k5:p4 relation c17:in:0 0 [ ]
k3:p1:p2 concept c5:person:1 0 [ ]
k3:p1:p2 concept c6:person:1 0 [ ]
k3:p1:p2 concept c8:head:0 0 [ ]
k3:p1:p2 event c9:rest:0 0 [ ]
k3:p1:p2 referent (k3:p1):p2:e1 0 [ ]
k3:p1:p2 referent (k3:p1):p2:p3 0 [ ]
k3:p1:p2 referent (k3:p1):p2:x3 0 [ ]
k3:p1:p2 referent (k3:p1):p2:x4 0 [ ]
k3:p1:p2 referent (k3:p1):p2:x5 0 [ ]
k3:p1:p2 relation c12:on:0 0 [ ]
k3:p1:p2 relation c7:of:1 0 [ ]
k3:p1:p2 role c10:agent:1 0 [ ]
k3:p1:p2 role c11:theme:1 0 [ ]
(k3:p1):p2:p3 duplex c13:whq 0 [ ]
k3 referent k3:x1 1 [ A ]
c0:pillow:0 instance k3:x1 2 [ pillow ]
k3:p1 relation c19:equality 1 [ is ]
k3:p1 referent k3:p1:x2 1 [ a ]
c19:equality int k3:x1 3 [ ]
c2:rectangular:0 arg k3:p1:s1 1 [ rectangular ]
c1:experiencer:-1 int k3:p1:x2 2 [ ]
c3:cushion:0 instance k3:p1:x2 3 [ cushion ]
c4:which:0 ext k3:p1:p2 1 [ which ]
c4:which:0 int k3:p1:x2 4 [ ]
c10:agent:1 int (k3:p1):p2:e1 1 [ ]
c5:person:1 instance (k3:p1):p2:x3 1 [ you ]
c9:rest:0 instance (k3:p1):p2:e1 2 [ rest ]
(k3:p1):p2:e1 main k3:p1:p2 2 [ ]
c6:person:1 instance (k3:p1):p2:x4 1 [ your ]
c7:of:1 int (k3:p1):p2:x5 1 [ ]
c8:head:0 instance (k3:p1):p2:x5 2 [ head ]
c11:theme:1 int (k3:p1):p2:e1 3 [ ]
c12:on:0 ext (k3:p1):p2:p3 1 [ on ]
c12:on:0 int (k3:p1):p2:e1 4 [ ]
c14:unit_of_time:1 instance k4:x6 1 [ when ]
c18:time_rel:0 int k5:p4 1 [ ]
c15:person:1 instance k5:x7 1 [ you ]
k3:p1:p2 surface (k3:p1):p2:e1 5 [ are ]
c17:in:0 ext k5:p4:x8 1 [ in ]
c16:bed:0 instance k5:p4:x8 2 [ bed ]
c17:in:0 int k5:x7 2 [ ]
k5:p4 punctuation k5:p4:x8 3 [ . ]


!.
0.5225
0.9340
A cemetery is a place where dead peoples bodies or their ashes are buried.
cemetery NN place NN where WRB dead JJ peoples NNS bodies NNS their PRP$ ashes NNS are VBP buried VBN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:cemetery,pos:'NN',lemma:cemetery,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:place,pos:'NN',lemma:place,namex:'O'],1006:[tok:where,pos:'WRB',lemma:where,namex:'O'],1007:[tok:dead,pos:'JJ',lemma:dead,namex:'O'],1008:[tok:peoples,pos:'NNS',lemma:people,namex:'O'],1009:[tok:bodies,pos:'NNS',lemma:body,namex:'O'],1010:[tok:or,pos:'CC',lemma:or,namex:'O'],1011:[tok:their,pos:'PRP$',lemma:their,namex:'O'],1012:[tok:ashes,pos:'NNS',lemma:ash,namex:'O'],1013:[tok:are,pos:'VBP',lemma:be,namex:'O'],1014:[tok:buried,pos:'VBN',lemma:bury,namex:'O'],1015:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B,[]:C],[[1012]:pred(B,ash,n,0),[]:rel(B,C,of,1),[1011]:pred(C,thing,n,12)]),drs([[]:D,[1001]:E],[[]:prop(D,drs([[]:F,[1004]:G],[[1003]:eq(E,G),[]:prop(F,drs([],[[1010]:or(drs([[]:H,[]:I,[]:J,[]:K],[[]:rel(H,K,theme,0),[1014]:pred(H,bury,v,0),[1009]:pred(K,body,n,0),[]:rel(K,I,of,0),[1008]:pred(I,people,n,0),[1007]:pred(J,dead,a,0),[]:rel(J,K,experiencer,0)]),drs([[]:L],[[]:rel(L,B,theme,0),[1014]:pred(L,bury,v,0)]))])),[1006]:rel(G,F,where,0),[1005]:pred(G,place,n,0)])),[1002]:pred(E,cemetery,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A cemetery is a place where dead peoples bodies or their ashes are buried . 
k4 concept c0:cemetery:0 0 [ ]
k4 referent k4:p1 0 [ ]
k5 attribute c5:dead:0 0 [ ]
k5 concept c6:people:0 0 [ ]
k5 concept c8:body:0 0 [ ]
k5 event c9:bury:0 0 [ ]
k5 referent k5:e1 0 [ ]
k5 referent k5:s1 0 [ ]
k5 referent k5:x3 0 [ ]
k5 referent k5:x4 0 [ ]
k5 relation c7:of:0 0 [ ]
k5 role c10:theme:1 0 [ ]
k5 role c4:experiencer:-1 0 [ ]
k6 concept c11:thing:12 0 [ ]
k6 concept c13:ash:0 0 [ ]
k6 event c14:bury:0 0 [ ]
k6 referent k6:e2 0 [ ]
k6 referent k6:x5 0 [ ]
k6 referent k6:x6 0 [ ]
k6 relation c12:of:1 0 [ ]
k6 role c15:theme:1 0 [ ]
c10:theme:1 ext k5:x3 0 [ ]
c12:of:1 ext k6:x5 0 [ ]
c15:theme:1 ext k6:x6 0 [ ]
c16:equality ext k4:p1:x2 0 [ ]
c3:or antecedent k5 0 [ ]
c3:or consequent k6 0 [ ]
c4:experiencer:-1 ext k5:s1 0 [ ]
c7:of:0 ext k5:x4 0 [ ]
k4:p1 concept c1:place:0 0 [ ]
k4:p1 referent k4:p1:p2 0 [ ]
k4:p1 relation c2:where:0 0 [ ]
k4:p1:p2 binary c3:or 0 [ ]
k4 referent k4:x1 1 [ A ]
c0:cemetery:0 instance k4:x1 2 [ cemetery ]
k4:p1 relation c16:equality 1 [ is ]
k4:p1 referent k4:p1:x2 1 [ a ]
c16:equality int k4:x1 3 [ ]
c1:place:0 instance k4:p1:x2 2 [ place ]
c2:where:0 ext k4:p1:p2 1 [ where ]
c5:dead:0 arg k5:s1 1 [ dead ]
c6:people:0 instance k5:x4 1 [ peoples ]
c7:of:0 int k5:x3 1 [ ]
c10:theme:1 int k5:e1 1 [ ]
c8:body:0 instance k5:x3 2 [ bodies ]
k5 surface k5:s1 2 [ or ]
c4:experiencer:-1 int k5:x3 3 [ ]
c11:thing:12 instance k6:x5 1 [ their ]
c12:of:1 int k6:x6 1 [ ]
c15:theme:1 int k6:e2 1 [ ]
c13:ash:0 instance k6:x6 2 [ ashes ]
k6 surface k6:e2 2 [ are ]
c9:bury:0 instance k5:e1 2 [ buried ]
k5:e1 main k4:p1:p2 2 [ ]
c14:bury:0 instance k6:e2 3 [ ]
k6:e2 main k4:p1:p2 3 [ ]
c2:where:0 int k4:p1:x2 3 [ ]
k4:p1 punctuation k4:p1:p2 4 [ . ]


!.
A graveyard is an area of land, sometimes near a church, where dead people are buried.
graveyard NN area NN land NN sometimes RB church NN where WRB dead JJ people NNS are VBP buried VBN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:graveyard,pos:'NN',lemma:graveyard,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:an,pos:'DT',lemma:an,namex:'O'],1005:[tok:area,pos:'NN',lemma:area,namex:'O'],1006:[tok:of,pos:'IN',lemma:of,namex:'O'],1007:[tok:land,pos:'NN',lemma:land,namex:'O'],1008:[tok: (','),pos: (','),lemma: (','),namex:'O'],1009:[tok:sometimes,pos:'RB',lemma:sometimes,namex:'O'],1010:[tok:near,pos:'IN',lemma:near,namex:'O'],1011:[tok:a,pos:'DT',lemma:a,namex:'O'],1012:[tok:church,pos:'NN',lemma:church,namex:'O'],1013:[tok: (','),pos: (','),lemma: (','),namex:'O'],1014:[tok:where,pos:'WRB',lemma:where,namex:'O'],1015:[tok:dead,pos:'JJ',lemma:dead,namex:'O'],1016:[tok:people,pos:'NNS',lemma:people,namex:'O'],1017:[tok:are,pos:'VBP',lemma:be,namex:'O'],1018:[tok:buried,pos:'VBN',lemma:bury,namex:'O'],1019:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1011]:C,[]:D,[1001]:E],[[1010]:rel(D,C,near,0),[]:prop(B,drs([[]:F,[]:G,[]:H],[[]:rel(F,H,theme,0),[1018]:pred(F,bury,v,0),[1016]:pred(H,people,n,0),[1015]:pred(G,dead,a,0),[]:rel(G,H,experiencer,0)])),[1014]:rel(C,B,where,0),[1012]:pred(C,church,n,0),[1009]:pred(D,sometimes,r,0),[]:prop(D,drs([[]:I,[1004]:J],[[1003]:eq(E,J),[1006]:rel(J,I,of,0),[1007]:pred(I,land,n,0),[1005]:pred(J,area,n,0)])),[1002]:pred(E,graveyard,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A graveyard is an area of land , sometimes near a church , where dead people are buried . 
k3 attribute c5:sometimes:0 0 [ ]
k3 concept c0:graveyard:0 0 [ ]
k3 concept c6:church:0 0 [ ]
k3 referent k3:p1 0 [ ]
k3 referent k3:p2 0 [ ]
k3 relation c13:near:0 0 [ ]
k3 relation c7:where:0 0 [ ]
c12:theme:1 ext k3:p2:x5 0 [ ]
c4:equality ext k3:p1:x3 0 [ ]
c8:experiencer:-1 ext k3:p2:s1 0 [ ]
k3:p1 concept c1:area:0 0 [ ]
k3:p1 concept c2:land:0 0 [ ]
k3:p1 referent k3:p1:x4 0 [ ]
k3:p1 relation c3:of:0 0 [ ]
k3:p2 attribute c9:dead:0 0 [ ]
k3:p2 concept c10:people:0 0 [ ]
k3:p2 event c11:bury:0 0 [ ]
k3:p2 referent k3:p2:e1 0 [ ]
k3:p2 referent k3:p2:s1 0 [ ]
k3:p2 referent k3:p2:x5 0 [ ]
k3:p2 role c12:theme:1 0 [ ]
k3:p2 role c8:experiencer:-1 0 [ ]
k3 referent k3:x1 1 [ A ]
c0:graveyard:0 instance k3:x1 2 [ graveyard ]
k3:p1 relation c4:equality 1 [ is ]
k3:p1 referent k3:p1:x3 1 [ an ]
c4:equality int k3:x1 3 [ ]
c1:area:0 instance k3:p1:x3 2 [ area ]
c3:of:0 ext k3:p1:x4 1 [ of ]
c2:land:0 instance k3:p1:x4 2 [ land ]
c3:of:0 int k3:p1:x3 3 [ ]
k3:p1 punctuation k3:p1:x4 3 [ , ]
c5:sometimes:0 arg k3:p1 1 [ sometimes ]
c13:near:0 ext k3:x2 1 [ near ]
k3 referent k3:x2 2 [ a ]
c6:church:0 instance k3:x2 3 [ church ]
c13:near:0 int k3:p1 2 [ ]
k3 punctuation k3:x2 4 [ , ]
c7:where:0 ext k3:p2 1 [ where ]
c8:experiencer:-1 int k3:p2:x5 1 [ ]
c9:dead:0 arg k3:p2:s1 1 [ dead ]
c12:theme:1 int k3:p2:e1 1 [ ]
c10:people:0 instance k3:p2:x5 2 [ people ]
k3:p2 surface k3:p2:e1 2 [ are ]
k3:p2:e1 main k3:p2 2 [ ]
c11:bury:0 instance k3:p2:e1 3 [ buried ]
k3 punctuation k3:p2 3 [ . ]
c7:where:0 int k3:x2 5 [ ]


!.
0.7725
1.0
An automobile is a car.
automobile NN car NN 
sem(1,[1001:[tok:'An',pos:'DT',lemma:an,namex:'O'],1002:[tok:automobile,pos:'NN',lemma:automobile,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:car,pos:'NN',lemma:car,namex:'O'],1006:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[1004]:D],[[1003]:eq(C,D),[1005]:pred(D,car,n,0)])),[1002]:pred(C,automobile,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% An automobile is a car . 
k2 concept c0:automobile:0 0 [ ]
k2 referent k2:p1 0 [ ]
c2:equality ext k2:p1:x2 0 [ ]
k2:p1 concept c1:car:0 0 [ ]
k2 referent k2:x1 1 [ An ]
c0:automobile:0 instance k2:x1 2 [ automobile ]
k2:p1 relation c2:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ a ]
c1:car:0 instance k2:p1:x2 2 [ car ]
c2:equality int k2:x1 3 [ ]
k2:p1 punctuation k2:p1:x2 3 [ . ]


!.
A car is a motor vehicle with room for a small number of passengers.
car NN motor NN vehicle NN room NN small JJ number NN passengers NNS 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:car,pos:'NN',lemma:car,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:motor,pos:'NN',lemma:motor,namex:'O'],1006:[tok:vehicle,pos:'NN',lemma:vehicle,namex:'O'],1007:[tok:with,pos:'IN',lemma:with,namex:'O'],1008:[tok:room,pos:'NN',lemma:room,namex:'O'],1009:[tok:for,pos:'IN',lemma:for,namex:'O'],1010:[tok:a,pos:'DT',lemma:a,namex:'O'],1011:[tok:small,pos:'JJ',lemma:small,namex:'O'],1012:[tok:number,pos:'NN',lemma:number,namex:'O'],1013:[tok:of,pos:'IN',lemma:of,namex:'O'],1014:[tok:passengers,pos:'NNS',lemma:passenger,namex:'O'],1015:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[]:E,[1010]:F,[]:G,[]:H,[1004]:I],[[1003]:eq(C,I),[1007]:rel(I,G,with,0),[1009]:rel(G,F,for,0),[1013]:rel(F,D,of,0),[1014]:pred(D,passenger,n,0),[1012]:pred(F,number,n,0),[1011]:pred(E,small,a,0),[]:rel(E,F,experiencer,0),[1008]:pred(G,room,n,0),[1006]:pred(I,vehicle,n,0),[]:rel(I,H,of,0),[1005]:pred(H,motor,n,0)])),[1002]:pred(C,car,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A car is a motor vehicle with room for a small number of passengers . 
k2 concept c0:car:0 0 [ ]
k2 referent k2:p1 0 [ ]
c12:equality ext k2:p1:x2 0 [ ]
c2:of:0 ext k2:p1:x3 0 [ ]
c5:experiencer:-1 ext k2:p1:s1 0 [ ]
k2:p1 attribute c6:small:0 0 [ ]
k2:p1 concept c1:motor:0 0 [ ]
k2:p1 concept c3:vehicle:0 0 [ ]
k2:p1 concept c4:room:0 0 [ ]
k2:p1 concept c7:number:0 0 [ ]
k2:p1 concept c8:passenger:0 0 [ ]
k2:p1 referent k2:p1:s1 0 [ ]
k2:p1 referent k2:p1:x3 0 [ ]
k2:p1 referent k2:p1:x4 0 [ ]
k2:p1 referent k2:p1:x6 0 [ ]
k2:p1 relation c10:for:0 0 [ ]
k2:p1 relation c11:with:0 0 [ ]
k2:p1 relation c2:of:0 0 [ ]
k2:p1 relation c9:of:0 0 [ ]
k2:p1 role c5:experiencer:-1 0 [ ]
k2 referent k2:x1 1 [ A ]
c0:car:0 instance k2:x1 2 [ car ]
k2:p1 relation c12:equality 1 [ is ]
k2:p1 referent k2:p1:x2 1 [ a ]
c12:equality int k2:x1 3 [ ]
c1:motor:0 instance k2:p1:x3 1 [ motor ]
c2:of:0 int k2:p1:x2 2 [ ]
c3:vehicle:0 instance k2:p1:x2 3 [ vehicle ]
c11:with:0 ext k2:p1:x4 1 [ with ]
c4:room:0 instance k2:p1:x4 2 [ room ]
c11:with:0 int k2:p1:x2 4 [ ]
c10:for:0 ext k2:p1:x5 1 [ for ]
k2:p1 referent k2:p1:x5 2 [ a ]
c10:for:0 int k2:p1:x4 3 [ ]
c6:small:0 arg k2:p1:s1 1 [ small ]
c5:experiencer:-1 int k2:p1:x5 3 [ ]
c7:number:0 instance k2:p1:x5 4 [ number ]
c9:of:0 ext k2:p1:x6 1 [ of ]
c8:passenger:0 instance k2:p1:x6 2 [ passengers ]
k2:p1 punctuation k2:p1:x6 3 [ . ]
c9:of:0 int k2:p1:x5 5 [ ]


!.
0.5575
0.7001
Midday is 12 oclock in the middle of the day.
'Midday' NNP oclock NN middle NN day NN 
sem(1,[1001:[tok:'Midday',pos:'NNP',lemma:'Midday',namex:'I-DAT'],1002:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1003:[tok:'12',pos:'CD',lemma:'12',namex:'I-PCT'],1004:[tok:oclock,pos:'NN',lemma:oclock,namex:'I-PCT'],1005:[tok:in,pos:'IN',lemma:in,namex:'O'],1006:[tok:the,pos:'DT',lemma:the,namex:'I-DAT'],1007:[tok:middle,pos:'NN',lemma:middle,namex:'I-DAT'],1008:[tok:of,pos:'IN',lemma:of,namex:'I-DAT'],1009:[tok:the,pos:'DT',lemma:the,namex:'I-DAT'],1010:[tok:day,pos:'NN',lemma:day,namex:'I-DAT'],1011:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[1009]:B,[1006]:C,[]:D],[[1010]:pred(B,day,n,0),[1007]:pred(C,middle,n,0),[1001]:named(D,midday,tim,nam)]),drs([[]:E],[[1005]:rel(E,C,in,0),[1008]:rel(C,B,of,0),[]:prop(E,drs([[]:F],[[1002]:eq(D,F),[1004]:pred(F,oclock,n,0),[1003]:card(F,12,eq)]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% Midday is 12 oclock in the middle of the day . 
k2 concept c4:middle:0 0 [ ]
k2 concept c5:day:0 0 [ ]
k2 named c0:midday:tim 0 [ ]
k2 referent k2:p1 0 [ ]
k2 referent k2:x1 0 [ ]
k2 relation c6:of:0 0 [ ]
k2 relation c7:in:0 0 [ ]
c3:equality ext k2:p1:x4 0 [ ]
k2:p1 cardinality c1:12:eq 0 [ ]
k2:p1 concept c2:oclock:0 0 [ ]
k2:p1 referent k2:p1:x4 0 [ ]
c0:midday:tim instance k2:x1 1 [ Midday ]
k2:p1 relation c3:equality 1 [ is ]
c1:12:eq arg k2:p1:x4 1 [ 12 ]
c3:equality int k2:x1 2 [ ]
c2:oclock:0 instance k2:p1:x4 2 [ oclock ]
c7:in:0 ext k2:x2 1 [ in ]
c7:in:0 int k2:p1 1 [ ]
k2 referent k2:x2 2 [ the ]
c4:middle:0 instance k2:x2 3 [ middle ]
c6:of:0 ext k2:x3 1 [ of ]
k2 referent k2:x3 2 [ the ]
c5:day:0 instance k2:x3 3 [ day ]
k2 punctuation k2:x3 4 [ . ]
c6:of:0 int k2:x2 4 [ ]


!.
Noon is 12 oclock in the middle of the day.
'Noon' NNP oclock NN middle NN day NN 
sem(1,[1001:[tok:'Noon',pos:'NNP',lemma:'Noon',namex:'O'],1002:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1003:[tok:'12',pos:'CD',lemma:'12',namex:'O'],1004:[tok:oclock,pos:'NN',lemma:oclock,namex:'O'],1005:[tok:in,pos:'IN',lemma:in,namex:'O'],1006:[tok:the,pos:'DT',lemma:the,namex:'I-DAT'],1007:[tok:middle,pos:'NN',lemma:middle,namex:'I-DAT'],1008:[tok:of,pos:'IN',lemma:of,namex:'I-DAT'],1009:[tok:the,pos:'DT',lemma:the,namex:'I-DAT'],1010:[tok:day,pos:'NN',lemma:day,namex:'I-DAT'],1011:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[1009]:B,[1006]:C,[]:D],[[1010]:pred(B,day,n,0),[1007]:pred(C,middle,n,0),[1001]:named(D,noon,nam,nam)]),drs([[]:E],[[1005]:rel(E,C,in,0),[1008]:rel(C,B,of,0),[]:prop(E,drs([[]:F],[[1002]:eq(D,F),[1004]:pred(F,oclock,n,0),[1003]:card(F,12,eq)]))]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% Noon is 12 oclock in the middle of the day . 
k2 concept c4:middle:0 0 [ ]
k2 concept c5:day:0 0 [ ]
k2 named c0:noon:nam 0 [ ]
k2 referent k2:p1 0 [ ]
k2 referent k2:x1 0 [ ]
k2 relation c6:of:0 0 [ ]
k2 relation c7:in:0 0 [ ]
c3:equality ext k2:p1:x4 0 [ ]
k2:p1 cardinality c1:12:eq 0 [ ]
k2:p1 concept c2:oclock:0 0 [ ]
k2:p1 referent k2:p1:x4 0 [ ]
c0:noon:nam instance k2:x1 1 [ Noon ]
k2:p1 relation c3:equality 1 [ is ]
c1:12:eq arg k2:p1:x4 1 [ 12 ]
c3:equality int k2:x1 2 [ ]
c2:oclock:0 instance k2:p1:x4 2 [ oclock ]
c7:in:0 ext k2:x2 1 [ in ]
c7:in:0 int k2:p1 1 [ ]
k2 referent k2:x2 2 [ the ]
c4:middle:0 instance k2:x2 3 [ middle ]
c6:of:0 ext k2:x3 1 [ of ]
k2 referent k2:x3 2 [ the ]
c5:day:0 instance k2:x3 3 [ day ]
k2 punctuation k2:x3 4 [ . ]
c6:of:0 int k2:x2 4 [ ]


!.
0.9550
0.8726
A gem is a jewel or stone that is used in jewellery.
gem NN jewel NN stone NN that WDT used VBN jewellery NN 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:gem,pos:'NN',lemma:gem,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:jewel,pos:'NN',lemma:jewel,namex:'O'],1006:[tok:or,pos:'CC',lemma:or,namex:'O'],1007:[tok:stone,pos:'NN',lemma:stone,namex:'O'],1008:[tok:that,pos:'WDT',lemma:that,namex:'O'],1009:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1010:[tok:used,pos:'VBN',lemma:use,namex:'O'],1011:[tok:in,pos:'IN',lemma:in,namex:'O'],1012:[tok:jewellery,pos:'NN',lemma:jewellery,namex:'O'],1013:[tok:'.',pos:'.',lemma:'.',namex:'O']],drs([[]:B,[1001]:C],[[]:prop(B,drs([[]:D,[]:E,[1008]:F,[1004]:G],[[1003]:eq(C,G),[1011]:rel(E,D,in,0),[1012]:pred(D,jewellery,n,0),[]:rel(E,F,theme,0),[1010]:pred(E,use,v,0),[]:eq(G,F),[1006]:or(drs([],[[1005]:pred(G,jewel,n,0)]),drs([],[[1007]:pred(G,stone,n,0)]))])),[1002]:pred(C,gem,n,0)])).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A gem is a jewel or stone that is used in jewellery . 
k3 concept c0:gem:0 0 [ ]
k3 referent k3:p1 0 [ ]
k4 concept c2:jewel:0 0 [ ]
k5 concept c3:stone:0 0 [ ]
c1:or antecedent k4 0 [ ]
c1:or consequent k5 0 [ ]
c4:equality ext k3:p1:x3 0 [ ]
c9:equality ext k3:p1:x2 0 [ ]
k3:p1 binary c1:or 0 [ ]
k3:p1 concept c7:jewellery:0 0 [ ]
k3:p1 event c5:use:0 0 [ ]
k3:p1 referent k3:p1:e1 0 [ ]
k3:p1 referent k3:p1:x4 0 [ ]
k3:p1 relation c4:equality 0 [ ]
k3:p1 relation c8:in:0 0 [ ]
k3:p1 role c6:theme:-1 0 [ ]
c6:theme:-1 ext k3:p1:e1 0 [ ]
k3 referent k3:x1 1 [ A ]
c0:gem:0 instance k3:x1 2 [ gem ]
k3:p1 relation c9:equality 1 [ is ]
k3:p1 referent k3:p1:x2 1 [ a ]
c9:equality int k3:x1 3 [ ]
c2:jewel:0 instance k3:p1:x2 2 [ jewel ]
k3:p1 function k3:p1:x2 3 [ or ]
c3:stone:0 instance k3:p1:x2 4 [ stone ]
k3:p1 referent k3:p1:x3 1 [ that ]
c4:equality int k3:p1:x2 5 [ ]
k3:p1 surface k3:p1:e1 1 [ is ]
c6:theme:-1 int k3:p1:x3 2 [ ]
c5:use:0 instance k3:p1:e1 2 [ used ]
c8:in:0 ext k3:p1:x4 1 [ in ]
c7:jewellery:0 instance k3:p1:x4 2 [ jewellery ]
c8:in:0 int k3:p1:e1 3 [ ]
k3:p1 punctuation k3:p1:x4 3 [ . ]


!.
A jewel is a precious stone used to decorate valuable things that you wear, such as rings or necklaces.
jewel NN precious JJ stone NN used VBN decorate VB valuable JJ things NNS you PRP wear VBP such JJ rings NNS necklaces NNS 
sem(1,[1001:[tok:'A',pos:'DT',lemma:a,namex:'O'],1002:[tok:jewel,pos:'NN',lemma:jewel,namex:'O'],1003:[tok: (is),pos:'VBZ',lemma:be,namex:'O'],1004:[tok:a,pos:'DT',lemma:a,namex:'O'],1005:[tok:precious,pos:'JJ',lemma:precious,namex:'O'],1006:[tok:stone,pos:'NN',lemma:stone,namex:'O'],1007:[tok:used,pos:'VBN',lemma:use,namex:'O'],1008:[tok:to,pos:'TO',lemma:to,namex:'O'],1009:[tok:decorate,pos:'VB',lemma:decorate,namex:'O'],1010:[tok:valuable,pos:'JJ',lemma:valuable,namex:'O'],1011:[tok:things,pos:'NNS',lemma:thing,namex:'O'],1012:[tok:that,pos:'IN',lemma:that,namex:'O'],1013:[tok:you,pos:'PRP',lemma:you,namex:'O'],1014:[tok:wear,pos:'VBP',lemma:wear,namex:'O'],1015:[tok: (','),pos: (','),lemma: (','),namex:'O'],1016:[tok:such,pos:'JJ',lemma:such,namex:'O'],1017:[tok: (as),pos:'IN',lemma: (as),namex:'O'],1018:[tok:rings,pos:'NNS',lemma:ring,namex:'O'],1019:[tok:or,pos:'CC',lemma:or,namex:'O'],1020:[tok:necklaces,pos:'NNS',lemma:necklace,namex:'O'],1021:[tok:'.',pos:'.',lemma:'.',namex:'O']],merge(drs([[]:B],[[1013]:pred(B,person,n,1)]),drs([[]:C,[1001]:D],[[]:prop(C,drs([[]:E,[1008]:F,[]:G,[]:H,[1004]:I],[[1019]:or(drs([[]:J],[[1003]:eq(D,I),[1016]:pred(I,such,n,0),[1017]:rel(I,J,as,0),[1018]:pred(J,ring,n,0)]),drs([[]:K],[[1003]:eq(D,I),[1016]:pred(I,such,n,0),[1017]:rel(I,K,as,0),[1020]:pred(K,necklace,n,0)])),[]:rel(E,F,recipient,0),[]:rel(E,G,topic,0),[1007]:pred(E,use,v,0),[]:prop(F,drs([[]:L,[]:M,[1012]:N,[]:O,[]:P],[[]:rel(L,P,theme,0),[]:rel(L,G,agent,0),[1009]:pred(L,decorate,v,0),[]:rel(M,N,theme,0),[]:rel(M,B,agent,0),[1014]:pred(M,wear,v,0),[]:eq(P,N),[1011]:pred(P,thing,n,0),[1010]:pred(O,valuable,a,0),[]:rel(O,P,experiencer,0)])),[]:eq(I,G),[1006]:pred(I,stone,n,0),[1005]:pred(H,precious,a,0),[]:rel(H,I,experiencer,0)])),[1002]:pred(D,jewel,n,0)]))).
!.
%%% This output was generated by the following command:
%%% /home/gingerbeard/candc/bin/boxer --stdin --semantics drg 
%%% A jewel is a precious stone used to decorate valuable things that you wear , such as rings or necklaces . 
k5 concept c0:jewel:0 0 [ ]
k5 referent k5:p1 0 [ ]
k6 concept c20:ring:0 0 [ ]
k6 concept c22:such:0 0 [ ]
k6 referent k6:x7 0 [ ]
k6 relation c21:as:0 0 [ ]
k7 concept c24:necklace:0 0 [ ]
k7 concept c26:such:0 0 [ ]
k7 referent k7:x8 0 [ ]
k7 relation c25:as:0 0 [ ]
c1:experiencer:-1 ext k5:p1:s1 0 [ ]
c11:agent:1 ext (k5:p1):p2:x5 0 [ ]
c15:theme:1 ext (k5:p1):p2:x4 0 [ ]
c18:recipient:1 ext k5:p1:p2 0 [ ]
c19:or antecedent k6 0 [ ]
c19:or consequent k7 0 [ ]
c23:equality ext k5:p1:x2 0 [ ]
c27:equality ext k5:p1:x2 0 [ ]
c4:equality ext k5:p1:x3 0 [ ]
c5:experiencer:-1 ext (k5:p1):p2:s2 0 [ ]
c9:equality ext (k5:p1):p2:x6 0 [ ]
k5:p1 attribute c2:precious:0 0 [ ]
k5:p1 binary c19:or 0 [ ]
k5:p1 concept c3:stone:0 0 [ ]
k5:p1 event c16:use:0 0 [ ]
k5:p1 referent k5:p1:e1 0 [ ]
k5:p1 referent k5:p1:s1 0 [ ]
k5:p1 referent k5:p1:x3 0 [ ]
k5:p1 relation c4:equality 0 [ ]
k5:p1 role c1:experiencer:-1 0 [ ]
k5:p1 role c18:recipient:1 0 [ ]
k5:p1 role c17:topic:-1 0 [ ]
k5:p1:p2 attribute c6:valuable:0 0 [ ]
k5:p1:p2 concept c7:thing:0 0 [ ]
k5:p1:p2 concept c8:person:1 0 [ ]
k5:p1:p2 event c10:wear:0 0 [ ]
k5:p1:p2 event c13:decorate:0 0 [ ]
k5:p1:p2 referent (k5:p1):p2:e2 0 [ ]
k5:p1:p2 referent (k5:p1):p2:e3 0 [ ]
k5:p1:p2 referent (k5:p1):p2:s2 0 [ ]
k5:p1:p2 referent (k5:p1):p2:x4 0 [ ]
k5:p1:p2 referent (k5:p1):p2:x5 0 [ ]
k5:p1:p2 relation c9:equality 0 [ ]
k5:p1:p2 role c11:agent:1 0 [ ]
k5:p1:p2 role c15:theme:1 0 [ ]
k5:p1:p2 role c5:experiencer:-1 0 [ ]
k5:p1:p2 role c12:theme:-1 0 [ ]
k5:p1:p2 role c14:agent:-1 0 [ ]
c12:theme:-1 ext (k5:p1):p2:e2 0 [ ]
c14:agent:-1 ext (k5:p1):p2:e3 0 [ ]
c17:topic:-1 ext k5:p1:e1 0 [ ]
k5 referent k5:x1 1 [ A ]
c0:jewel:0 instance k5:x1 2 [ jewel ]
k6 relation c23:equality 1 [ is ]
k7 relation c27:equality 1 [ ]
k5:p1 referent k5:p1:x2 1 [ a ]
c23:equality int k5:x1 3 [ ]
c27:equality int k5:x1 4 [ ]
c2:precious:0 arg k5:p1:s1 1 [ precious ]
c1:experiencer:-1 int k5:p1:x2 2 [ ]
c3:stone:0 instance k5:p1:x2 3 [ stone ]
c16:use:0 instance k5:p1:e1 1 [ used ]
c17:topic:-1 int k5:p1:x3 1 [ ]
k5:p1 referent k5:p1:p2 1 [ to ]
c18:recipient:1 int k5:p1:e1 2 [ ]
c13:decorate:0 instance (k5:p1):p2:e3 1 [ decorate ]
c14:agent:-1 int k5:p1:x3 2 [ ]
c4:equality int k5:p1:x2 4 [ ]
c5:experiencer:-1 int (k5:p1):p2:x4 1 [ ]
c6:valuable:0 arg (k5:p1):p2:s2 1 [ valuable ]
c15:theme:1 int (k5:p1):p2:e3 2 [ ]
c7:thing:0 instance (k5:p1):p2:x4 2 [ things ]
k5:p1:p2 referent (k5:p1):p2:x6 1 [ that ]
c9:equality int (k5:p1):p2:x4 3 [ ]
c11:agent:1 int (k5:p1):p2:e2 1 [ ]
c8:person:1 instance (k5:p1):p2:x5 1 [ you ]
c10:wear:0 instance (k5:p1):p2:e2 2 [ wear ]
c12:theme:-1 int (k5:p1):p2:x6 2 [ ]
k5:p1:p2 punctuation (k5:p1):p2:e2 3 [ , ]
c22:such:0 instance k5:p1:x2 5 [ such ]
c26:such:0 instance k5:p1:x2 6 [ ]
c21:as:0 ext k6:x7 1 [ as ]
c25:as:0 ext k7:x8 1 [ ]
c20:ring:0 instance k6:x7 2 [ rings ]
c21:as:0 int k5:p1:x2 7 [ ]
k5:p1:p2 surface (k5:p1):p2:e2 4 [ or ]
c24:necklace:0 instance k7:x8 2 [ necklaces ]
k7 punctuation k7:x8 3 [ . ]
c25:as:0 int k5:p1:x2 8 [ ]


!.
0.6525
0.8536
